
matiHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd8  08005fd8  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe0  08005fe0  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08005fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  20000294  0800627c  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  0800627c  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015594  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5b  00000000  00000000  00035858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000385b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00039558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253a3  00000000  00000000  0003a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e5a  00000000  00000000  0005f78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df71f  00000000  00000000  000735e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004958  00000000  00000000  00152d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000294 	.word	0x20000294
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005df8 	.word	0x08005df8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000298 	.word	0x20000298
 800020c:	08005df8 	.word	0x08005df8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <BT_CommandDecodeInit>:

/*======================================*/
/*  function implemention       */
/*======================================*/
void BT_CommandDecodeInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
    BT_CmdDecodedFlag = 0;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <BT_CommandDecodeInit+0x1c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <BT_CommandDecodeInit+0x20>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]

}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000ca4 	.word	0x20000ca4
 80005c8:	200002b0 	.word	0x200002b0

080005cc <BT_CommandDecodeMain>:

void BT_CommandDecodeMain(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	BT_CommandHandler();
 80005d0:	f000 f80e 	bl	80005f0 <BT_CommandHandler>
	if(BT_CmdDecodedFlag)
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <BT_CommandDecodeMain+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <BT_CommandDecodeMain+0x1a>
	{
            BT_CommandDecode();
 80005dc:	f000 f894 	bl	8000708 <BT_CommandDecode>
            BT_CmdDecodedFlag = 0;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <BT_CommandDecodeMain+0x20>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	}
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000ca4 	.word	0x20000ca4

080005f0 <BT_CommandHandler>:


void BT_CommandHandler(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
    uint8_t current_byte;

    while (USART_GetChar((char*)(&current_byte))) {
 80005f6:	e06c      	b.n	80006d2 <BT_CommandHandler+0xe2>

//HAL_Delay(100);

        switch (BT_CmdDecodeState) {
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <BT_CommandHandler+0xfc>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d85f      	bhi.n	80006c0 <BT_CommandHandler+0xd0>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <BT_CommandHandler+0x18>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	0800061d 	.word	0x0800061d
 800060c:	0800062b 	.word	0x0800062b
 8000610:	08000641 	.word	0x08000641
 8000614:	08000667 	.word	0x08000667
 8000618:	080006a5 	.word	0x080006a5
            case RX_DECODE_CMD_SYNC_AA:
                if (current_byte == 0xaa)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2baa      	cmp	r3, #170	; 0xaa
 8000620:	d150      	bne.n	80006c4 <BT_CommandHandler+0xd4>
                    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_00;
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <BT_CommandHandler+0xfc>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
                break;
 8000628:	e04c      	b.n	80006c4 <BT_CommandHandler+0xd4>

            case RX_DECODE_CMD_SYNC_00:
                if (current_byte == 0x00)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d103      	bne.n	8000638 <BT_CommandHandler+0x48>
                    BT_CmdDecodeState = RX_DECODE_CMD_LENGTH;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <BT_CommandHandler+0xfc>)
 8000632:	2202      	movs	r2, #2
 8000634:	701a      	strb	r2, [r3, #0]
                else
                    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
                break;
 8000636:	e048      	b.n	80006ca <BT_CommandHandler+0xda>
                    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <BT_CommandHandler+0xfc>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
                break;
 800063e:	e044      	b.n	80006ca <BT_CommandHandler+0xda>

            case RX_DECODE_CMD_LENGTH:
                BT_CmdDecodedFlag = 0; //command receive flag clear
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <BT_CommandHandler+0x100>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
                BT_CmdBufferPt = 0; //buffer reset for command parameter
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <BT_CommandHandler+0x104>)
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
                BT_CmdDecodeCmdLength = current_byte;
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <BT_CommandHandler+0x108>)
 8000650:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeChecksum = current_byte; //checksum calculation start!
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <BT_CommandHandler+0x10c>)
 8000656:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeDataCnt = current_byte; //save bytes number, use to check where is command end
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <BT_CommandHandler+0x110>)
 800065c:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeState = RX_DECODE_CMD_DATA; //next state
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <BT_CommandHandler+0xfc>)
 8000660:	2203      	movs	r2, #3
 8000662:	701a      	strb	r2, [r3, #0]
                break;
 8000664:	e031      	b.n	80006ca <BT_CommandHandler+0xda>

            case RX_DECODE_CMD_DATA:
                BT_CmdDecodeChecksum += current_byte;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <BT_CommandHandler+0x10c>)
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4413      	add	r3, r2
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <BT_CommandHandler+0x10c>)
 8000672:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeDataCnt--;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <BT_CommandHandler+0x110>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <BT_CommandHandler+0x110>)
 800067e:	701a      	strb	r2, [r3, #0]
                BT_CmdBuffer[BT_CmdBufferPt++] = current_byte;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <BT_CommandHandler+0x104>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	b291      	uxth	r1, r2
 8000688:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <BT_CommandHandler+0x104>)
 800068a:	8011      	strh	r1, [r2, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	79f9      	ldrb	r1, [r7, #7]
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <BT_CommandHandler+0x114>)
 8000692:	5499      	strb	r1, [r3, r2]
                if (BT_CmdDecodeDataCnt == 0) //no data remained?
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <BT_CommandHandler+0x110>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d115      	bne.n	80006c8 <BT_CommandHandler+0xd8>
                    BT_CmdDecodeState = RX_DECODE_CMD_CHECKSUM; //yes, next mode: checksum
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <BT_CommandHandler+0xfc>)
 800069e:	2204      	movs	r2, #4
 80006a0:	701a      	strb	r2, [r3, #0]
                break;
 80006a2:	e011      	b.n	80006c8 <BT_CommandHandler+0xd8>

            case RX_DECODE_CMD_CHECKSUM:
                if ((uint8_t) (BT_CmdDecodeChecksum + current_byte) == 0) {
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <BT_CommandHandler+0x10c>)
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4413      	add	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <BT_CommandHandler+0xc8>
                    BT_CmdDecodedFlag = 1;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <BT_CommandHandler+0x100>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
                } else {
                }
                BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <BT_CommandHandler+0xfc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
                break;
 80006be:	e004      	b.n	80006ca <BT_CommandHandler+0xda>
            default:
                break;
 80006c0:	bf00      	nop
 80006c2:	e002      	b.n	80006ca <BT_CommandHandler+0xda>
                break;
 80006c4:	bf00      	nop
 80006c6:	e000      	b.n	80006ca <BT_CommandHandler+0xda>
                break;
 80006c8:	bf00      	nop
        }

        if (BT_CmdDecodedFlag) {
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <BT_CommandHandler+0x100>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d107      	bne.n	80006e2 <BT_CommandHandler+0xf2>
    while (USART_GetChar((char*)(&current_byte))) {
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fd89 	bl	80011ec <USART_GetChar>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d18b      	bne.n	80005f8 <BT_CommandHandler+0x8>
            break;
        }
    }
}
 80006e0:	e000      	b.n	80006e4 <BT_CommandHandler+0xf4>
            break;
 80006e2:	bf00      	nop
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200002b0 	.word	0x200002b0
 80006f0:	20000ca4 	.word	0x20000ca4
 80006f4:	200002b4 	.word	0x200002b4
 80006f8:	200002b1 	.word	0x200002b1
 80006fc:	200002b2 	.word	0x200002b2
 8000700:	200002b3 	.word	0x200002b3
 8000704:	20000bdc 	.word	0x20000bdc

08000708 <BT_CommandDecode>:

void BT_CommandDecode( void )
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
    switch(BT_CmdBuffer[0])
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <BT_CommandDecode+0x24>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d002      	beq.n	800071a <BT_CommandDecode+0x12>
 8000714:	2b29      	cmp	r3, #41	; 0x29
 8000716:	d002      	beq.n	800071e <BT_CommandDecode+0x16>

            //BTAPP_EventHandler(BT_EVENT_AVRCP_ABS_VOLUME_CHANGED, (uint16_t)(BT_CmdBuffer[2]), &BT_CmdBuffer[1]);
            break;

        default:
        	break;
 8000718:	e002      	b.n	8000720 <BT_CommandDecode+0x18>
    		break;
 800071a:	bf00      	nop
 800071c:	e000      	b.n	8000720 <BT_CommandDecode+0x18>
            break;
 800071e:	bf00      	nop
    }

}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000bdc 	.word	0x20000bdc

08000730 <CORE_EnterCriticalSection>:
/* Includes ------------------------------------------------------------------*/
#include "core.h"
#include "stm32f4xx_hal.h"


void CORE_EnterCriticalSection(void){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
	__disable_irq();
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <CORE_ExitCriticalSection>:

void CORE_ExitCriticalSection(void) {
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000746:	b662      	cpsie	i
}
 8000748:	bf00      	nop
	__enable_irq();
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f001 f8ef 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f845 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f981 	bl	8000a68 <MX_GPIO_Init>
  MX_UART4_Init();
 8000766:	f000 f935 	bl	80009d4 <MX_UART4_Init>
  MX_DMA_Init();
 800076a:	f000 f95d 	bl	8000a28 <MX_DMA_Init>
  MX_ADC1_Init();
 800076e:	f000 f8a9 	bl	80008c4 <MX_ADC1_Init>
  MX_TIM7_Init();
 8000772:	f000 f8f9 	bl	8000968 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BT_CommandDecodeInit();
 8000776:	f7ff ff17 	bl	80005a8 <BT_CommandDecodeInit>
  USART_Init(&huart4);
 800077a:	4816      	ldr	r0, [pc, #88]	; (80007d4 <main+0x80>)
 800077c:	f000 fda4 	bl	80012c8 <USART_Init>
  //BT_Action(ANY_MODE_ENTERING_PAIRING);


#ifdef USE_DMA
	/* Start ADC DMA */
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)aResultDMA, BUFLEN) != HAL_OK)
 8000780:	2201      	movs	r2, #1
 8000782:	4915      	ldr	r1, [pc, #84]	; (80007d8 <main+0x84>)
 8000784:	4815      	ldr	r0, [pc, #84]	; (80007dc <main+0x88>)
 8000786:	f001 f98f 	bl	8001aa8 <HAL_ADC_Start_DMA>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <main+0x3e>
		while(1);
 8000790:	e7fe      	b.n	8000790 <main+0x3c>
#endif

	/* Start 8kHz timer */
	if(HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <main+0x8c>)
 8000794:	f003 f972 	bl	8003a7c <HAL_TIM_Base_Start_IT>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d000      	beq.n	80007a0 <main+0x4c>
		while(1);
 800079e:	e7fe      	b.n	800079e <main+0x4a>
  while (1)
  {

	  //BTAPP_EnterBTPairingMode();
	  //HAL_Delay(1);
	  BT_CommandDecodeMain();
 80007a0:	f7ff ff14 	bl	80005cc <BT_CommandDecodeMain>

		/* run DTMF decoder */
		if (dail1.AIindex >= dail1.AIcheck)  {
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <main+0x90>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <main+0x90>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d302      	bcc.n	80007b6 <main+0x62>
			DTMF_Detect (&dail1);
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <main+0x90>)
 80007b2:	f001 f861 	bl	8001878 <DTMF_Detect>
		}


		if (dail1.new){
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x90>)
 80007b8:	7a9b      	ldrb	r3, [r3, #10]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f0      	beq.n	80007a0 <main+0x4c>

			char klawa = DTMFchar[dail1.digit & 0x0F];
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <main+0x90>)
 80007c0:	7a1b      	ldrb	r3, [r3, #8]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <main+0x94>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	71fb      	strb	r3, [r7, #7]
			dail1.new = 0;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <main+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	729a      	strb	r2, [r3, #10]
	  BT_CommandDecodeMain();
 80007d2:	e7e5      	b.n	80007a0 <main+0x4c>
 80007d4:	20000d54 	.word	0x20000d54
 80007d8:	20000d50 	.word	0x20000d50
 80007dc:	20000ca8 	.word	0x20000ca8
 80007e0:	20000d98 	.word	0x20000d98
 80007e4:	20000014 	.word	0x20000014
 80007e8:	20000000 	.word	0x20000000

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2234      	movs	r2, #52	; 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 fb6a 	bl	8004ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xd0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <SystemClock_Config+0xd0>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <SystemClock_Config+0xd0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd4>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000860:	2308      	movs	r3, #8
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fe11 	bl	80034a0 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000884:	f000 f93c 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fb85 	bl	8002fb4 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008b0:	f000 f926 	bl	8000b00 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	; 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_ADC1_Init+0x98>)
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_ADC1_Init+0x9c>)
 80008da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ADC1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_ADC1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ADC1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_ADC1_Init+0x98>)
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_ADC1_Init+0xa0>)
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_ADC1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_ADC1_Init+0x98>)
 8000910:	2201      	movs	r2, #1
 8000912:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ADC1_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ADC1_Init+0x98>)
 800091e:	2201      	movs	r2, #1
 8000920:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <MX_ADC1_Init+0x98>)
 8000924:	f001 f87c 	bl	8001a20 <HAL_ADC_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f8e7 	bl	8000b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_ADC1_Init+0x98>)
 8000944:	f001 f9de 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800094e:	f000 f8d7 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000ca8 	.word	0x20000ca8
 8000960:	40012000 	.word	0x40012000
 8000964:	0f000001 	.word	0x0f000001

08000968 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM7_Init+0x64>)
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_TIM7_Init+0x68>)
 800097a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 5;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_TIM7_Init+0x64>)
 800097e:	2205      	movs	r2, #5
 8000980:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_TIM7_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_TIM7_Init+0x64>)
 800098a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_TIM7_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM7_Init+0x64>)
 8000998:	f003 f820 	bl	80039dc <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009a2:	f000 f8ad 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM7_Init+0x64>)
 80009b4:	f003 faa2 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80009be:	f000 f89f 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000d98 	.word	0x20000d98
 80009d0:	40001400 	.word	0x40001400

080009d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_UART4_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_UART4_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_UART4_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_UART4_Init+0x4c>)
 8000a0c:	f003 fb06 	bl	800401c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f873 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000d54 	.word	0x20000d54
 8000a24:	40004c00 	.word	0x40004c00

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_DMA_Init+0x3c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MX_DMA_Init+0x3c>)
 8000a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_DMA_Init+0x3c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2038      	movs	r0, #56	; 0x38
 8000a50:	f001 fce3 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a54:	2038      	movs	r0, #56	; 0x38
 8000a56:	f001 fcfc 	bl	8002452 <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_GPIO_Init+0x4c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x4c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_GPIO_Init+0x4c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_GPIO_Init+0x4c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x4c>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_GPIO_Init+0x4c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	int err;

#ifdef USE_DMA
	dail1.AInput[dail1.AIindex & (DTMFsz-1)] = aResultDMA[0];
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ac8:	8812      	ldrh	r2, [r2, #0]
 8000aca:	b291      	uxth	r1, r2
 8000acc:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ace:	3308      	adds	r3, #8
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)aResultDMA, BUFLEN);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4907      	ldr	r1, [pc, #28]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ade:	f000 ffe3 	bl	8001aa8 <HAL_ADC_Start_DMA>
	dail1.AIindex++;
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a02      	ldr	r2, [pc, #8]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000aea:	6013      	str	r3, [r2, #0]
	err = HAL_ADC_Stop(&hadc);
	if(err != HAL_OK)
		while(1);
#endif

}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000014 	.word	0x20000014
 8000af8:	20000d50 	.word	0x20000d50
 8000afc:	20000ca8 	.word	0x20000ca8

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <RingBuffer_Init>:
        ;
    }
}

bool RingBuffer_Init(RingBuffer *ringBuffer, char *dataBuffer, size_t dataBufferSize)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	assert(ringBuffer);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d105      	bne.n	8000b2a <RingBuffer_Init+0x1e>
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <RingBuffer_Init+0x80>)
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <RingBuffer_Init+0x84>)
 8000b22:	210f      	movs	r1, #15
 8000b24:	481b      	ldr	r0, [pc, #108]	; (8000b94 <RingBuffer_Init+0x88>)
 8000b26:	f004 f97b 	bl	8004e20 <__assert_func>
	assert(dataBuffer);
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d105      	bne.n	8000b3c <RingBuffer_Init+0x30>
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <RingBuffer_Init+0x8c>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <RingBuffer_Init+0x84>)
 8000b34:	2110      	movs	r1, #16
 8000b36:	4817      	ldr	r0, [pc, #92]	; (8000b94 <RingBuffer_Init+0x88>)
 8000b38:	f004 f972 	bl	8004e20 <__assert_func>
	assert(dataBufferSize > 0);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d105      	bne.n	8000b4e <RingBuffer_Init+0x42>
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <RingBuffer_Init+0x90>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <RingBuffer_Init+0x84>)
 8000b46:	2111      	movs	r1, #17
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <RingBuffer_Init+0x88>)
 8000b4a:	f004 f969 	bl	8004e20 <__assert_func>

	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d016      	beq.n	8000b82 <RingBuffer_Init+0x76>
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d013      	beq.n	8000b82 <RingBuffer_Init+0x76>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d010      	beq.n	8000b82 <RingBuffer_Init+0x76>

	  ringBuffer->ptr=dataBuffer;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	605a      	str	r2, [r3, #4]
	  ringBuffer->size=dataBufferSize;
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	601a      	str	r2, [r3, #0]
	  ringBuffer->head=0;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
	  ringBuffer->tail=0;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
	  ringBuffer->count=0;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
	  return true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <RingBuffer_Init+0x78>
	}

	return false;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08005e60 	.word	0x08005e60
 8000b90:	08005eac 	.word	0x08005eac
 8000b94:	08005e6c 	.word	0x08005e6c
 8000b98:	08005e88 	.word	0x08005e88
 8000b9c:	08005e94 	.word	0x08005e94

08000ba0 <RingBuffer_PutChar>:
	return 0;
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	assert(ringBuffer);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d105      	bne.n	8000bbe <RingBuffer_PutChar+0x1e>
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <RingBuffer_PutChar+0x78>)
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <RingBuffer_PutChar+0x7c>)
 8000bb6:	214f      	movs	r1, #79	; 0x4f
 8000bb8:	4819      	ldr	r0, [pc, #100]	; (8000c20 <RingBuffer_PutChar+0x80>)
 8000bba:	f004 f931 	bl	8004e20 <__assert_func>

	if (ringBuffer) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d023      	beq.n	8000c0c <RingBuffer_PutChar+0x6c>
		if (ringBuffer->count < ringBuffer->size)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	da1d      	bge.n	8000c0c <RingBuffer_PutChar+0x6c>
        {
          ringBuffer->ptr[ringBuffer->head] = c;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6892      	ldr	r2, [r2, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	78fa      	ldrb	r2, [r7, #3]
 8000bdc:	701a      	strb	r2, [r3, #0]
          if(ringBuffer->head==ringBuffer->size-1) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d103      	bne.n	8000bf4 <RingBuffer_PutChar+0x54>
						ringBuffer->head=0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	e004      	b.n	8000bfe <RingBuffer_PutChar+0x5e>
					} else {
						ringBuffer->head++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
					}
          ++ringBuffer->count;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	611a      	str	r2, [r3, #16]
          return true;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <RingBuffer_PutChar+0x6e>
        }
	}
	return false;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08005e60 	.word	0x08005e60
 8000c1c:	08005ebc 	.word	0x08005ebc
 8000c20:	08005e6c 	.word	0x08005e6c

08000c24 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	assert(ringBuffer);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <RingBuffer_GetChar+0x1c>
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <RingBuffer_GetChar+0x8c>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <RingBuffer_GetChar+0x90>)
 8000c38:	2163      	movs	r1, #99	; 0x63
 8000c3a:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <RingBuffer_GetChar+0x94>)
 8000c3c:	f004 f8f0 	bl	8004e20 <__assert_func>
	assert(c);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <RingBuffer_GetChar+0x2e>
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <RingBuffer_GetChar+0x98>)
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <RingBuffer_GetChar+0x90>)
 8000c4a:	2164      	movs	r1, #100	; 0x64
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <RingBuffer_GetChar+0x94>)
 8000c4e:	f004 f8e7 	bl	8004e20 <__assert_func>

  if ((ringBuffer) && (c)) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d025      	beq.n	8000ca4 <RingBuffer_GetChar+0x80>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d022      	beq.n	8000ca4 <RingBuffer_GetChar+0x80>
    if (ringBuffer->count>0)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dd1e      	ble.n	8000ca4 <RingBuffer_GetChar+0x80>
    {
      *c = ringBuffer->ptr[ringBuffer->tail];
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68d2      	ldr	r2, [r2, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
       if(ringBuffer->tail==ringBuffer->size-1) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d103      	bne.n	8000c8c <RingBuffer_GetChar+0x68>
				 ringBuffer->tail=0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	e004      	b.n	8000c96 <RingBuffer_GetChar+0x72>
			 } else {
				 ringBuffer->tail++;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60da      	str	r2, [r3, #12]
			 }
      --ringBuffer->count;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	611a      	str	r2, [r3, #16]
			return true;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <RingBuffer_GetChar+0x82>
    }
	}
	return false;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	08005e60 	.word	0x08005e60
 8000cb4:	08005ed0 	.word	0x08005ed0
 8000cb8:	08005e6c 	.word	0x08005e6c
 8000cbc:	08005ea8 	.word	0x08005ea8

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d158      	bne.n	8000de4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481d      	ldr	r0, [pc, #116]	; (8000df4 <HAL_ADC_MspInit+0xe4>)
 8000d7e:	f001 ff85 	bl	8002c8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <HAL_ADC_MspInit+0xec>)
 8000d86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000dac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000dca:	f001 fb5d 	bl	8002488 <HAL_DMA_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000dd4:	f7ff fe94 	bl	8000b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8000dde:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_ADC_MspInit+0xe8>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40012000 	.word	0x40012000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	20000cf0 	.word	0x20000cf0
 8000dfc:	40026410 	.word	0x40026410

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_TIM_Base_MspInit+0x48>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d115      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_TIM_Base_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_TIM_Base_MspInit+0x4c>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_TIM_Base_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2037      	movs	r0, #55	; 0x37
 8000e34:	f001 faf1 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e38:	2037      	movs	r0, #55	; 0x37
 8000e3a:	f001 fb0a 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40001400 	.word	0x40001400
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d152      	bne.n	8000f18 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0xd4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4811      	ldr	r0, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0xd8>)
 8000ee2:	f001 fed3 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	480a      	ldr	r0, [pc, #40]	; (8000f2c <HAL_UART_MspInit+0xdc>)
 8000f04:	f001 fec2 	bl	8002c8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2034      	movs	r0, #52	; 0x34
 8000f0e:	f001 fa84 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f12:	2034      	movs	r0, #52	; 0x34
 8000f14:	f001 fa9d 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40004c00 	.word	0x40004c00
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020800 	.word	0x40020800

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 fd30 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <UART4_IRQHandler+0x10>)
 8000f8a:	f003 f909 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000d54 	.word	0x20000d54

08000f98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM7_IRQHandler+0x10>)
 8000f9e:	f002 fddd 	bl	8003b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000d98 	.word	0x20000d98

08000fac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA2_Stream0_IRQHandler+0x10>)
 8000fb2:	f001 fc01 	bl	80027b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000cf0 	.word	0x20000cf0

08000fc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	return 1;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_kill>:

int _kill(int pid, int sig)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fda:	f003 ff3f 	bl	8004e5c <__errno>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2216      	movs	r2, #22
 8000fe2:	601a      	str	r2, [r3, #0]
	return -1;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_exit>:

void _exit (int status)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffe7 	bl	8000fd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001002:	e7fe      	b.n	8001002 <_exit+0x12>

08001004 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
	}

return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_close>:
	}
	return len;
}

int _close(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001066:	605a      	str	r2, [r3, #4]
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_isatty>:

int _isatty(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	return 1;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 fec0 	bl	8004e5c <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20020000 	.word	0x20020000
 8001108:	00000400 	.word	0x00000400
 800110c:	200002b8 	.word	0x200002b8
 8001110:	20000df8 	.word	0x20000df8

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <_write>:
// UART receive buffer descriptor
static RingBuffer USART_RingBuffer_Rx;
// UART receive buffer memory pool
static char RingBufferData_Rx[1024];

int _write(int file, char *ptr, int len) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	USART_WriteData(ptr,len);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f000 f805 	bl	8001158 <USART_WriteData>
	return len;
 800114e:	687b      	ldr	r3, [r7, #4]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <USART_WriteData>:

size_t USART_WriteData(const void *data, size_t dataSize){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	size_t i = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]

	static char c;


	for(;i<dataSize;i++)
 8001166:	e018      	b.n	800119a <USART_WriteData+0x42>
	{

		CORE_EnterCriticalSection();
 8001168:	f7ff fae2 	bl	8000730 <CORE_EnterCriticalSection>
		if(!RingBuffer_PutChar(&USART_RingBuffer_Tx, *((char*)data+i)) ) {
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	4819      	ldr	r0, [pc, #100]	; (80011dc <USART_WriteData+0x84>)
 8001178:	f7ff fd12 	bl	8000ba0 <RingBuffer_PutChar>
 800117c:	4603      	mov	r3, r0
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <USART_WriteData+0x38>
			CORE_ExitCriticalSection();
 8001188:	f7ff fadb 	bl	8000742 <CORE_ExitCriticalSection>
			return false;
 800118c:	2300      	movs	r3, #0
 800118e:	e020      	b.n	80011d2 <USART_WriteData+0x7a>
		}
		CORE_ExitCriticalSection();
 8001190:	f7ff fad7 	bl	8000742 <CORE_ExitCriticalSection>
	for(;i<dataSize;i++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3e2      	bcc.n	8001168 <USART_WriteData+0x10>
	}
	CORE_EnterCriticalSection();
 80011a2:	f7ff fac5 	bl	8000730 <CORE_EnterCriticalSection>
	if(!flag){
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <USART_WriteData+0x88>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10d      	bne.n	80011cc <USART_WriteData+0x74>
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <USART_WriteData+0x8c>)
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <USART_WriteData+0x84>)
 80011b4:	f7ff fd36 	bl	8000c24 <RingBuffer_GetChar>
		HAL_UART_Transmit_IT(huart_ptr, &c,1);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <USART_WriteData+0x90>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	4909      	ldr	r1, [pc, #36]	; (80011e4 <USART_WriteData+0x8c>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 ff78 	bl	80040b6 <HAL_UART_Transmit_IT>
		flag=1;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <USART_WriteData+0x88>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
	}
	CORE_ExitCriticalSection();
 80011cc:	f7ff fab9 	bl	8000742 <CORE_ExitCriticalSection>
	return i;
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002c4 	.word	0x200002c4
 80011e0:	200002bd 	.word	0x200002bd
 80011e4:	20000aec 	.word	0x20000aec
 80011e8:	200002c0 	.word	0x200002c0

080011ec <USART_GetChar>:
size_t USART_WriteString(const char *string){
	return USART_WriteData(string, strlen(string));
}


bool USART_GetChar(char *c){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

	CORE_EnterCriticalSection();
 80011f4:	f7ff fa9c 	bl	8000730 <CORE_EnterCriticalSection>
	if(!RingBuffer_GetChar(&USART_RingBuffer_Rx, c )) {
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <USART_GetChar+0x38>)
 80011fc:	f7ff fd12 	bl	8000c24 <RingBuffer_GetChar>
 8001200:	4603      	mov	r3, r0
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <USART_GetChar+0x28>
		CORE_ExitCriticalSection();
 800120c:	f7ff fa99 	bl	8000742 <CORE_ExitCriticalSection>
		return false;
 8001210:	2300      	movs	r3, #0
 8001212:	e002      	b.n	800121a <USART_GetChar+0x2e>
	}
	CORE_ExitCriticalSection();
 8001214:	f7ff fa95 	bl	8000742 <CORE_ExitCriticalSection>

	return true;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200006d8 	.word	0x200006d8

08001228 <HAL_UART_RxCpltCallback>:
		CORE_ExitCriticalSection();
	}
	return i;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart_ptr->Instance){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_UART_RxCpltCallback+0x3c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d10d      	bne.n	800125a <HAL_UART_RxCpltCallback+0x32>

		RingBuffer_PutChar(&USART_RingBuffer_Rx, rcv_char);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_UART_RxCpltCallback+0x40>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_UART_RxCpltCallback+0x44>)
 8001248:	f7ff fcaa 	bl	8000ba0 <RingBuffer_PutChar>
		HAL_UART_Receive_IT(huart_ptr,&rcv_char,1);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_UART_RxCpltCallback+0x3c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	4905      	ldr	r1, [pc, #20]	; (8001268 <HAL_UART_RxCpltCallback+0x40>)
 8001254:	4618      	mov	r0, r3
 8001256:	f002 ff73 	bl	8004140 <HAL_UART_Receive_IT>

	}

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002c0 	.word	0x200002c0
 8001268:	200002bc 	.word	0x200002bc
 800126c:	200006d8 	.word	0x200006d8

08001270 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	if(huart->Instance==huart_ptr->Instance){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_UART_TxCpltCallback+0x48>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d114      	bne.n	80012b0 <HAL_UART_TxCpltCallback+0x40>
		static char c;

		if(RingBuffer_GetChar(&USART_RingBuffer_Tx, &c) == true)
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <HAL_UART_TxCpltCallback+0x4c>)
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <HAL_UART_TxCpltCallback+0x50>)
 800128a:	f7ff fccb 	bl	8000c24 <RingBuffer_GetChar>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00a      	beq.n	80012aa <HAL_UART_TxCpltCallback+0x3a>
		{
			//c=*"a";
			HAL_UART_Transmit_IT(huart_ptr, &c,1);
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_UART_TxCpltCallback+0x48>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <HAL_UART_TxCpltCallback+0x4c>)
 800129c:	4618      	mov	r0, r3
 800129e:	f002 ff0a 	bl	80040b6 <HAL_UART_Transmit_IT>
			flag=1;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_UART_TxCpltCallback+0x54>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
		}else flag=0;

	}

}
 80012a8:	e002      	b.n	80012b0 <HAL_UART_TxCpltCallback+0x40>
		}else flag=0;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_UART_TxCpltCallback+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002c0 	.word	0x200002c0
 80012bc:	20000aed 	.word	0x20000aed
 80012c0:	200002c4 	.word	0x200002c4
 80012c4:	200002bd 	.word	0x200002bd

080012c8 <USART_Init>:


/**
  * This function initialize ring buffers, USART device and enable receive interrupt.
  */
void USART_Init(UART_HandleTypeDef* huart){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

	huart_ptr = huart;
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <USART_Init+0x3c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
	// initialize ring buffers
	RingBuffer_Init(&USART_RingBuffer_Tx, RingBufferData_Tx, sizeof(RingBufferData_Tx));
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012da:	490b      	ldr	r1, [pc, #44]	; (8001308 <USART_Init+0x40>)
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <USART_Init+0x44>)
 80012de:	f7ff fc15 	bl	8000b0c <RingBuffer_Init>
	RingBuffer_Init(&USART_RingBuffer_Rx, RingBufferData_Rx, sizeof(RingBufferData_Rx));
 80012e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e6:	490a      	ldr	r1, [pc, #40]	; (8001310 <USART_Init+0x48>)
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <USART_Init+0x4c>)
 80012ea:	f7ff fc0f 	bl	8000b0c <RingBuffer_Init>

	HAL_UART_Receive_IT(huart_ptr,&rcv_char,1);
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <USART_Init+0x3c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4908      	ldr	r1, [pc, #32]	; (8001318 <USART_Init+0x50>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 ff22 	bl	8004140 <HAL_UART_Receive_IT>


}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200002c0 	.word	0x200002c0
 8001308:	200002d8 	.word	0x200002d8
 800130c:	200002c4 	.word	0x200002c4
 8001310:	200006ec 	.word	0x200006ec
 8001314:	200006d8 	.word	0x200006d8
 8001318:	200002bc 	.word	0x200002bc

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001322:	490e      	ldr	r1, [pc, #56]	; (800135c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001338:	4c0b      	ldr	r4, [pc, #44]	; (8001368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001346:	f7ff fee5 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134a:	f003 fd9f 	bl	8004e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff fa01 	bl	8000754 <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8001360:	08005fe8 	.word	0x08005fe8
  ldr r2, =_sbss
 8001364:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8001368:	20000df4 	.word	0x20000df4

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>
	...

08001370 <Goertzel>:


/*------------------------------------------------------------------------------
  Calculate Power of Signal
 *------------------------------------------------------------------------------*/
static unsigned int Goertzel (int cos_fact)  {
 8001370:	b480      	push	{r7}
 8001372:	b08d      	sub	sp, #52	; 0x34
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  long  v0, v1, v2; 
  int  pwr;
  int p1, p2, p01;
  unsigned int  i;

  v1  = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  v2  = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
// 1. Compute for each sample: 
// vk(n) = (2*cos(2*PI*f0/fs)) * vk(n-1) - vk(n-2) + x(n)
  x = DTMFin;
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <Goertzel+0x94>)
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (i = 0; i < N; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	e015      	b.n	80013b6 <Goertzel+0x46>
    v0 = ((cos_fact*v1)>>14)-v2+*x;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	139a      	asrs	r2, r3, #14
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
    x++;
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	3302      	adds	r3, #2
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    v2 = v1;
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    v1 = v0;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < N; i++) {
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	3301      	adds	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	2b71      	cmp	r3, #113	; 0x71
 80013ba:	d9e6      	bls.n	800138a <Goertzel+0x1a>
  }
// 2. Compute once every N samples:
// |X(k)|2 = vk(N)2 + vk(N-1)2 - (2*cos(2*PI*f0/fs)) * vk(N) * vk(N-1))
  p1  = v1*v1;
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	fb03 f303 	mul.w	r3, r3, r3
 80013c2:	61fb      	str	r3, [r7, #28]
  p2  = v2*v2;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	fb03 f303 	mul.w	r3, r3, r3
 80013ca:	61bb      	str	r3, [r7, #24]
  p01 = v1*v2;
 80013cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
  pwr = p1 - (cos_fact*(p01>>14)) + p2;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	139b      	asrs	r3, r3, #14
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4413      	add	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
  if (pwr < 0)  return (0);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da01      	bge.n	80013f4 <Goertzel+0x84>
 80013f0:	2300      	movs	r3, #0
 80013f2:	e001      	b.n	80013f8 <Goertzel+0x88>
  return ((pwr>>16));          //  make sure that -1 is not returned
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	141b      	asrs	r3, r3, #16
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3734      	adds	r7, #52	; 0x34
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	20000af0 	.word	0x20000af0

08001408 <GainControl>:


/*------------------------------------------------------------------------------
  Check Input Signal and Copy it to the DTMF Input Buffer
 *------------------------------------------------------------------------------*/
static void GainControl (DTMF *t)  {
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  unsigned int  avg;
  unsigned int  min, max;
  unsigned int  idx;
  short *d;

  min = 0xFFFF;
 8001410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001414:	617b      	str	r3, [r7, #20]
  max = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]

  avg  = 0x10000L / N;         // normalize factor for average calculation  
 800141a:	f240 233e 	movw	r3, #574	; 0x23e
 800141e:	61bb      	str	r3, [r7, #24]
  d = &DTMFin[N];
 8001420:	4b42      	ldr	r3, [pc, #264]	; (800152c <GainControl+0x124>)
 8001422:	60bb      	str	r3, [r7, #8]
  idx = t->AIindex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  do  {
    v =  t->AInput[idx & (DTMFsz-1)];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	3308      	adds	r3, #8
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	889b      	ldrh	r3, [r3, #4]
 8001438:	61fb      	str	r3, [r7, #28]
    if (v < min)  min = v;
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	429a      	cmp	r2, r3
 8001440:	d201      	bcs.n	8001446 <GainControl+0x3e>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	617b      	str	r3, [r7, #20]
    if (v > max)  max = v;
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	429a      	cmp	r2, r3
 800144c:	d901      	bls.n	8001452 <GainControl+0x4a>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	613b      	str	r3, [r7, #16]
    avg += (0x10000L / N) * v;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f240 223e 	movw	r2, #574	; 0x23e
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4413      	add	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
    idx--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3b01      	subs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
    *--d = v;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3b02      	subs	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	b21a      	sxth	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	801a      	strh	r2, [r3, #0]
  }  while (d != &DTMFin[0]);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <GainControl+0x128>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d1d5      	bne.n	800142a <GainControl+0x22>

  avg >>= 16;                  // avarage value
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	61bb      	str	r3, [r7, #24]
  min = max - min;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
// calculate prior value in 'v'
  for (v = 0; v < 15 && (min & 0x8000)==0; v++)  {
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	e005      	b.n	800149e <GainControl+0x96>
    min <<= 1;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  for (v = 0; v < 15 && (min & 0x8000)==0; v++)  {
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b0e      	cmp	r3, #14
 80014a2:	d804      	bhi.n	80014ae <GainControl+0xa6>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f1      	beq.n	8001492 <GainControl+0x8a>
  }
  if (v < 7)  {
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d81d      	bhi.n	80014f0 <GainControl+0xe8>
    v = 7 - v;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
    for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <GainControl+0x128>)
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	e011      	b.n	80014e6 <GainControl+0xde>
      *d++ = ((short) (*d - avg)) >> v;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa42 f103 	asr.w	r1, r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c9a      	adds	r2, r3, #2
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b20a      	sxth	r2, r1
 80014e4:	801a      	strh	r2, [r3, #0]
    for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4a10      	ldr	r2, [pc, #64]	; (800152c <GainControl+0x124>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d1e9      	bne.n	80014c2 <GainControl+0xba>
    }
    return;
 80014ee:	e018      	b.n	8001522 <GainControl+0x11a>
  }

  v -= 7;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3b07      	subs	r3, #7
 80014f4:	61fb      	str	r3, [r7, #28]
  for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <GainControl+0x128>)
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e00e      	b.n	800151a <GainControl+0x112>
    *d++ = ((int) (*d - avg)) << v;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	461a      	mov	r2, r3
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	461a      	mov	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f103 	lsl.w	r1, r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c9a      	adds	r2, r3, #2
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b20a      	sxth	r2, r1
 8001518:	801a      	strh	r2, [r3, #0]
  for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <GainControl+0x124>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d1ec      	bne.n	80014fc <GainControl+0xf4>
  }
}
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	20000bd4 	.word	0x20000bd4
 8001530:	20000af0 	.word	0x20000af0

08001534 <chk_valid>:
  Check if remaining powers are outside 
    return 0 if invalid power values detected
 *------------------------------------------------------------------------------*/
static int chk_valid (unsigned int p[4],     // power results
                      unsigned int d,        // maximum power
                      unsigned int pref)  {  // power reference
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]

  if (d == 0)  return 0;                     // no digit
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <chk_valid+0x16>
 8001546:	2300      	movs	r3, #0
 8001548:	e02e      	b.n	80015a8 <chk_valid+0x74>
  pref /= 8;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	607b      	str	r3, [r7, #4]
  if (d != 1 && p[0] > pref) return (0);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d006      	beq.n	8001564 <chk_valid+0x30>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	d201      	bcs.n	8001564 <chk_valid+0x30>
 8001560:	2300      	movs	r3, #0
 8001562:	e021      	b.n	80015a8 <chk_valid+0x74>
  if (d != 2 && p[1] > pref) return (0);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d007      	beq.n	800157a <chk_valid+0x46>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3304      	adds	r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d201      	bcs.n	800157a <chk_valid+0x46>
 8001576:	2300      	movs	r3, #0
 8001578:	e016      	b.n	80015a8 <chk_valid+0x74>
  if (d != 3 && p[2] > pref) return (0);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d007      	beq.n	8001590 <chk_valid+0x5c>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d201      	bcs.n	8001590 <chk_valid+0x5c>
 800158c:	2300      	movs	r3, #0
 800158e:	e00b      	b.n	80015a8 <chk_valid+0x74>
  if (d != 4 && p[3] > pref) return (0);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b04      	cmp	r3, #4
 8001594:	d007      	beq.n	80015a6 <chk_valid+0x72>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d201      	bcs.n	80015a6 <chk_valid+0x72>
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <chk_valid+0x74>
  return (1);
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DTMF_digit>:

/*------------------------------------------------------------------------------
  DTMF Digit:  Checks for valid DTMF digit
      return  digit+0x10  or 0 for invalid digit
 *------------------------------------------------------------------------------*/
static unsigned char DTMF_digit (void)  {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  unsigned int f, rampl, campl;
  unsigned int row, col;
  unsigned int p[4];

//--- Check Row Frequency -------------------------------------
  p[0] = Goertzel (DTMF_697Hz);
 80015ba:	f646 504c 	movw	r0, #27980	; 0x6d4c
 80015be:	f7ff fed7 	bl	8001370 <Goertzel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	607b      	str	r3, [r7, #4]
  p[1] = Goertzel (DTMF_770Hz);
 80015c6:	f646 104c 	movw	r0, #26956	; 0x694c
 80015ca:	f7ff fed1 	bl	8001370 <Goertzel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	60bb      	str	r3, [r7, #8]
  p[2] = Goertzel (DTMF_852Hz);
 80015d2:	f246 4065 	movw	r0, #25701	; 0x6465
 80015d6:	f7ff fecb 	bl	8001370 <Goertzel>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]
  p[3] = Goertzel (DTMF_941Hz);
 80015de:	f645 609b 	movw	r0, #24219	; 0x5e9b
 80015e2:	f7ff fec5 	bl	8001370 <Goertzel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]
//  printf ("\nr=%d %d %d %d", p[0], p[1],p[2],p[3]);
  row = 0; rampl = 0x40;  // initial sensivity
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	2340      	movs	r3, #64	; 0x40
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[0] > rampl)  { row = 1;  rampl = p[0]; } 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d203      	bcs.n	8001602 <DTMF_digit+0x4e>
 80015fa:	2301      	movs	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[1] > rampl)  { row = 2;  rampl = p[1]; } 
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001606:	429a      	cmp	r2, r3
 8001608:	d203      	bcs.n	8001612 <DTMF_digit+0x5e>
 800160a:	2302      	movs	r3, #2
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[2] > rampl)  { row = 3;  rampl = p[2]; } 
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001616:	429a      	cmp	r2, r3
 8001618:	d203      	bcs.n	8001622 <DTMF_digit+0x6e>
 800161a:	2303      	movs	r3, #3
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[3] > rampl)  { row = 4;  rampl = p[3]; } 
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	429a      	cmp	r2, r3
 8001628:	d203      	bcs.n	8001632 <DTMF_digit+0x7e>
 800162a:	2304      	movs	r3, #4
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  if (!chk_valid (p, row, rampl)) goto invalid;  
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001636:	69f9      	ldr	r1, [r7, #28]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff7b 	bl	8001534 <chk_valid>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80ff 	beq.w	8001844 <DTMF_digit+0x290>
//--- Check Col Frequency -------------------------------------
  p[0] = Goertzel (DTMF_1209Hz);
 8001646:	f644 2081 	movw	r0, #19073	; 0x4a81
 800164a:	f7ff fe91 	bl	8001370 <Goertzel>
 800164e:	4603      	mov	r3, r0
 8001650:	607b      	str	r3, [r7, #4]
  p[1] = Goertzel (DTMF_1336Hz);
 8001652:	f643 70c5 	movw	r0, #16325	; 0x3fc5
 8001656:	f7ff fe8b 	bl	8001370 <Goertzel>
 800165a:	4603      	mov	r3, r0
 800165c:	60bb      	str	r3, [r7, #8]
  p[2] = Goertzel (DTMF_1477Hz);
 800165e:	f243 301d 	movw	r0, #13085	; 0x331d
 8001662:	f7ff fe85 	bl	8001370 <Goertzel>
 8001666:	4603      	mov	r3, r0
 8001668:	60fb      	str	r3, [r7, #12]
  p[3] = Goertzel (DTMF_1633Hz);
 800166a:	f242 4063 	movw	r0, #9315	; 0x2463
 800166e:	f7ff fe7f 	bl	8001370 <Goertzel>
 8001672:	4603      	mov	r3, r0
 8001674:	613b      	str	r3, [r7, #16]
//  printf (" c=%d %d %d %d", p[0], p[1],p[2],p[3]);
  col = 0; campl = 0x50;  // initial sensivity
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	2350      	movs	r3, #80	; 0x50
 800167c:	623b      	str	r3, [r7, #32]
  if (p[0] > campl)  { col = 1;  campl = p[0]; } 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a3a      	ldr	r2, [r7, #32]
 8001682:	429a      	cmp	r2, r3
 8001684:	d203      	bcs.n	800168e <DTMF_digit+0xda>
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	623b      	str	r3, [r7, #32]
  if (p[1] > campl)  { col = 2;  campl = p[1]; } 
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	429a      	cmp	r2, r3
 8001694:	d203      	bcs.n	800169e <DTMF_digit+0xea>
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	623b      	str	r3, [r7, #32]
  if (p[2] > campl)  { col = 3;  campl = p[2]; } 
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d203      	bcs.n	80016ae <DTMF_digit+0xfa>
 80016a6:	2303      	movs	r3, #3
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	623b      	str	r3, [r7, #32]
  if (p[3] > campl)  { col = 4;  campl = p[3]; } 
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d203      	bcs.n	80016be <DTMF_digit+0x10a>
 80016b6:	2304      	movs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	623b      	str	r3, [r7, #32]
  if (!chk_valid (p, col, campl)) goto invalid;  
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	6a3a      	ldr	r2, [r7, #32]
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <chk_valid>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80bb 	beq.w	8001848 <DTMF_digit+0x294>

  if (col && row)  {                        // valid digit detected
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80b9 	beq.w	800184c <DTMF_digit+0x298>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80b5 	beq.w	800184c <DTMF_digit+0x298>
// Amplitute Check: col must be within -4dB..+8dB of row 
    if ((rampl << 4) < campl)  goto invalid;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	6a3a      	ldr	r2, [r7, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f200 80b1 	bhi.w	8001850 <DTMF_digit+0x29c>
    if ((campl << 3) < rampl)  goto invalid;
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f200 80ad 	bhi.w	8001854 <DTMF_digit+0x2a0>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d84e      	bhi.n	80017a0 <DTMF_digit+0x1ec>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <DTMF_digit+0x154>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	0800173b 	.word	0x0800173b
 8001710:	0800175d 	.word	0x0800175d
 8001714:	08001779 	.word	0x08001779

// check 2nd harmonic
    switch (row)  {
      case 1:
        if (col == 2 || col == 3)  break;   // do not check it
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d037      	beq.n	800178e <DTMF_digit+0x1da>
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d034      	beq.n	800178e <DTMF_digit+0x1da>
        f = Goertzel (DTMF_1394Hz);
 8001724:	f643 20a6 	movw	r0, #15014	; 0x3aa6
 8001728:	f7ff fe22 	bl	8001370 <Goertzel>
 800172c:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	d92c      	bls.n	8001792 <DTMF_digit+0x1de>
 8001738:	e091      	b.n	800185e <DTMF_digit+0x2aa>
        break;

      case 2:
        if (col == 3 || col == 4)  break;   // do not check it
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d026      	beq.n	800178e <DTMF_digit+0x1da>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d023      	beq.n	800178e <DTMF_digit+0x1da>
        f = Goertzel (DTMF_1540Hz);
 8001746:	f642 503f 	movw	r0, #11583	; 0x2d3f
 800174a:	f7ff fe11 	bl	8001370 <Goertzel>
 800174e:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	429a      	cmp	r2, r3
 8001758:	d91d      	bls.n	8001796 <DTMF_digit+0x1e2>
 800175a:	e080      	b.n	800185e <DTMF_digit+0x2aa>
        break;

      case 3:
        if (col == 4)  break;              // do not check it
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d01b      	beq.n	800179a <DTMF_digit+0x1e6>
        f = Goertzel (DTMF_1704Hz);
 8001762:	f641 507d 	movw	r0, #7549	; 0x1d7d
 8001766:	f7ff fe03 	bl	8001370 <Goertzel>
 800176a:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	08db      	lsrs	r3, r3, #3
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	429a      	cmp	r2, r3
 8001774:	d913      	bls.n	800179e <DTMF_digit+0x1ea>
 8001776:	e072      	b.n	800185e <DTMF_digit+0x2aa>
        break;

      case 4:
        f = Goertzel (DTMF_1882Hz);
 8001778:	f640 30d8 	movw	r0, #3032	; 0xbd8
 800177c:	f7ff fdf8 	bl	8001370 <Goertzel>
 8001780:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d865      	bhi.n	8001858 <DTMF_digit+0x2a4>
        break;
 800178c:	e008      	b.n	80017a0 <DTMF_digit+0x1ec>
    }

    switch (col)  {
 800178e:	bf00      	nop
 8001790:	e006      	b.n	80017a0 <DTMF_digit+0x1ec>
        break;
 8001792:	bf00      	nop
 8001794:	e004      	b.n	80017a0 <DTMF_digit+0x1ec>
        break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <DTMF_digit+0x1ec>
        if (col == 4)  break;              // do not check it
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <DTMF_digit+0x1ec>
        break;
 800179e:	bf00      	nop
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d83d      	bhi.n	8001824 <DTMF_digit+0x270>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <DTMF_digit+0x1fc>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017d5 	.word	0x080017d5
 80017b8:	080017e9 	.word	0x080017e9
 80017bc:	08001803 	.word	0x08001803
      case 1:
        f = Goertzel (DTMF_2418Hz);
 80017c0:	4829      	ldr	r0, [pc, #164]	; (8001868 <DTMF_digit+0x2b4>)
 80017c2:	f7ff fdd5 	bl	8001370 <Goertzel>
 80017c6:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d921      	bls.n	8001816 <DTMF_digit+0x262>
 80017d2:	e044      	b.n	800185e <DTMF_digit+0x2aa>
        break;

      case 2:
        f = Goertzel (DTMF_2672Hz);
 80017d4:	4825      	ldr	r0, [pc, #148]	; (800186c <DTMF_digit+0x2b8>)
 80017d6:	f7ff fdcb 	bl	8001370 <Goertzel>
 80017da:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d919      	bls.n	800181a <DTMF_digit+0x266>
 80017e6:	e03a      	b.n	800185e <DTMF_digit+0x2aa>
        break;

      case 3:
        if (row == 4)  break;              // do not check it
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d017      	beq.n	800181e <DTMF_digit+0x26a>
        f = Goertzel (DTMF_2954Hz);
 80017ee:	4820      	ldr	r0, [pc, #128]	; (8001870 <DTMF_digit+0x2bc>)
 80017f0:	f7ff fdbe 	bl	8001370 <Goertzel>
 80017f4:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d910      	bls.n	8001822 <DTMF_digit+0x26e>
 8001800:	e02d      	b.n	800185e <DTMF_digit+0x2aa>
        break;

      case 4:
        f = Goertzel (DTMF_3266Hz);
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <DTMF_digit+0x2c0>)
 8001804:	f7ff fdb4 	bl	8001370 <Goertzel>
 8001808:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	d823      	bhi.n	800185c <DTMF_digit+0x2a8>
        break;
 8001814:	e006      	b.n	8001824 <DTMF_digit+0x270>
        break;
 8001816:	bf00      	nop
 8001818:	e004      	b.n	8001824 <DTMF_digit+0x270>
        break;
 800181a:	bf00      	nop
 800181c:	e002      	b.n	8001824 <DTMF_digit+0x270>
        if (row == 4)  break;              // do not check it
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <DTMF_digit+0x270>
        break;
 8001822:	bf00      	nop
    }

// digit is valid
    return ((row-1) << 2) | (col-1) | 0x10;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	b2da      	uxtb	r2, r3
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e00d      	b.n	8001860 <DTMF_digit+0x2ac>
  if (!chk_valid (p, row, rampl)) goto invalid;  
 8001844:	bf00      	nop
 8001846:	e00a      	b.n	800185e <DTMF_digit+0x2aa>
  if (!chk_valid (p, col, campl)) goto invalid;  
 8001848:	bf00      	nop
 800184a:	e008      	b.n	800185e <DTMF_digit+0x2aa>
  }

invalid:
 800184c:	bf00      	nop
 800184e:	e006      	b.n	800185e <DTMF_digit+0x2aa>
    if ((rampl << 4) < campl)  goto invalid;
 8001850:	bf00      	nop
 8001852:	e004      	b.n	800185e <DTMF_digit+0x2aa>
    if ((campl << 3) < rampl)  goto invalid;
 8001854:	bf00      	nop
 8001856:	e002      	b.n	800185e <DTMF_digit+0x2aa>
        if (f > (campl / 8))   goto invalid;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <DTMF_digit+0x2aa>
        if (f > (rampl / 8))   goto invalid;
 800185c:	bf00      	nop
  return (0);
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	ffffd6bb 	.word	0xffffd6bb
 800186c:	ffffbf89 	.word	0xffffbf89
 8001870:	ffffa8d2 	.word	0xffffa8d2
 8001874:	ffff94b0 	.word	0xffff94b0

08001878 <DTMF_Detect>:


/*------------------------------------------------------------------------------
  DTMF Detect
 *------------------------------------------------------------------------------*/
void DTMF_Detect (DTMF *t)  {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  unsigned char d;
  unsigned int  cnt;

  if (t->AIindex >= t->AIcheck)  {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d352      	bcc.n	8001932 <DTMF_Detect+0xba>
    GainControl (t);                       // Copy AD Input to DTMF Buffer
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fdbb 	bl	8001408 <GainControl>
    t->AIindex &= (DTMFsz-1);              // ToDo make atomic
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
    t->AIcheck = t->AIindex + ((N*2)/3);   // Increment DTMF Window (Overlapping Input Buffer)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	605a      	str	r2, [r3, #4]
    d = DTMF_digit ();
 80018a8:	f7ff fe84 	bl	80015b4 <DTMF_digit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	72fb      	strb	r3, [r7, #11]
    t->early = d;     cnt = 0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7afa      	ldrb	r2, [r7, #11]
 80018b4:	725a      	strb	r2, [r3, #9]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
    if (t->d[0] == d) cnt++;       
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7adb      	ldrb	r3, [r3, #11]
 80018be:	7afa      	ldrb	r2, [r7, #11]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d102      	bne.n	80018ca <DTMF_Detect+0x52>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
    if (t->d[1] == d) cnt++;       
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7b1b      	ldrb	r3, [r3, #12]
 80018ce:	7afa      	ldrb	r2, [r7, #11]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d102      	bne.n	80018da <DTMF_Detect+0x62>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
    if (t->d[2] == d) cnt++;       
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b5b      	ldrb	r3, [r3, #13]
 80018de:	7afa      	ldrb	r2, [r7, #11]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d102      	bne.n	80018ea <DTMF_Detect+0x72>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
    if (t->d[3] == d) cnt++;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7b9b      	ldrb	r3, [r3, #14]
 80018ee:	7afa      	ldrb	r2, [r7, #11]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d102      	bne.n	80018fa <DTMF_Detect+0x82>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
    t->d[(t->d_i++ & 3)] = d;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6111      	str	r1, [r2, #16]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	7afa      	ldrb	r2, [r7, #11]
 800190e:	72da      	strb	r2, [r3, #11]
    if (cnt >= 2)  {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d90d      	bls.n	8001932 <DTMF_Detect+0xba>
      if (t->digit != d)  {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7a1b      	ldrb	r3, [r3, #8]
 800191a:	7afa      	ldrb	r2, [r7, #11]
 800191c:	429a      	cmp	r2, r3
 800191e:	d008      	beq.n	8001932 <DTMF_Detect+0xba>
        t->digit = d;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7afa      	ldrb	r2, [r7, #11]
 8001924:	721a      	strb	r2, [r3, #8]
        if (d)  t->new   = 1;
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <DTMF_Detect+0xba>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	729a      	strb	r2, [r3, #10]
      }     
    }       
  }
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 fd4d 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff f9a6 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fd65 	bl	800246e <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 fd2d 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000010 	.word	0x20000010
 80019d8:	2000022c 	.word	0x2000022c
 80019dc:	20000228 	.word	0x20000228

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2000022c 	.word	0x2000022c
 8001a04:	20000de0 	.word	0x20000de0

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000de0 	.word	0x20000de0

08001a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e033      	b.n	8001a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff f966 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a66:	f023 0302 	bic.w	r3, r3, #2
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa78 	bl	8001f68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e001      	b.n	8001a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x1e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e0e9      	b.n	8001c9a <HAL_ADC_Start_DMA+0x1f2>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d018      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_ADC_Start_DMA+0x1fc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6d      	ldr	r2, [pc, #436]	; (8001ca8 <HAL_ADC_Start_DMA+0x200>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9a      	lsrs	r2, r3, #18
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b1c:	d107      	bne.n	8001b2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 80a1 	bne.w	8001c80 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f023 0206 	bic.w	r2, r3, #6
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_ADC_Start_DMA+0x204>)
 8001b9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <HAL_ADC_Start_DMA+0x208>)
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_ADC_Start_DMA+0x20c>)
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	4a41      	ldr	r2, [pc, #260]	; (8001cb8 <HAL_ADC_Start_DMA+0x210>)
 8001bb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bde:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	334c      	adds	r3, #76	; 0x4c
 8001bea:	4619      	mov	r1, r3
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f000 fcf8 	bl	80025e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d12a      	bne.n	8001c56 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_ADC_Start_DMA+0x214>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d015      	beq.n	8001c36 <HAL_ADC_Start_DMA+0x18e>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <HAL_ADC_Start_DMA+0x218>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_Start_DMA+0x178>
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_ADC_Start_DMA+0x204>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_ADC_Start_DMA+0x21c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d136      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_ADC_Start_DMA+0x204>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d130      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d129      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e020      	b.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_ADC_Start_DMA+0x214>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d114      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e00b      	b.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0210 	orr.w	r2, r3, #16
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	08002161 	.word	0x08002161
 8001cb4:	0800221b 	.word	0x0800221b
 8001cb8:	08002237 	.word	0x08002237
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40012100 	.word	0x40012100
 8001cc4:	40012200 	.word	0x40012200

08001cc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1c>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e113      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x244>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d925      	bls.n	8001d7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68d9      	ldr	r1, [r3, #12]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	2207      	movs	r2, #7
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	400a      	ands	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68d9      	ldr	r1, [r3, #12]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	4603      	mov	r3, r0
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4403      	add	r3, r0
 8001d6e:	3b1e      	subs	r3, #30
 8001d70:	409a      	lsls	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e022      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6919      	ldr	r1, [r3, #16]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	2207      	movs	r2, #7
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6919      	ldr	r1, [r3, #16]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4403      	add	r3, r0
 8001db8:	409a      	lsls	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d824      	bhi.n	8001e14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b05      	subs	r3, #5
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	400a      	ands	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	3b05      	subs	r3, #5
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
 8001e12:	e04c      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d824      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b23      	subs	r3, #35	; 0x23
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43da      	mvns	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b23      	subs	r3, #35	; 0x23
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
 8001e64:	e023      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b41      	subs	r3, #65	; 0x41
 8001e78:	221f      	movs	r2, #31
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	400a      	ands	r2, r1
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	; 0x41
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_ADC_ConfigChannel+0x250>)
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_ADC_ConfigChannel+0x254>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10f      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1d8>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d10b      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_ADC_ConfigChannel+0x254>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12b      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x23a>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_ADC_ConfigChannel+0x258>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b11      	cmp	r3, #17
 8001ef6:	d122      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_ADC_ConfigChannel+0x258>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d111      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_ADC_ConfigChannel+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_ADC_ConfigChannel+0x260>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9a      	lsrs	r2, r3, #18
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40012300 	.word	0x40012300
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	10000012 	.word	0x10000012
 8001f60:	20000010 	.word	0x20000010
 8001f64:	431bde83 	.word	0x431bde83

08001f68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <ADC_Init+0x1f0>)
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	021a      	lsls	r2, r3, #8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	4a58      	ldr	r2, [pc, #352]	; (800215c <ADC_Init+0x1f4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d022      	beq.n	8002046 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	e00f      	b.n	8002066 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002064:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0202 	bic.w	r2, r2, #2
 8002074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7e1b      	ldrb	r3, [r3, #24]
 8002080:	005a      	lsls	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	3b01      	subs	r3, #1
 80020c0:	035a      	lsls	r2, r3, #13
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	e007      	b.n	80020dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	051a      	lsls	r2, r3, #20
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800211e:	025a      	lsls	r2, r3, #9
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	029a      	lsls	r2, r3, #10
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40012300 	.word	0x40012300
 800215c:	0f000001 	.word	0x0f000001

08002160 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d13c      	bne.n	80021f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d12b      	bne.n	80021ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d127      	bne.n	80021ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d119      	bne.n	80021ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0220 	bic.w	r2, r2, #32
 80021c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fd6b 	bl	8001cc8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021f2:	e00e      	b.n	8002212 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fd75 	bl	8001cf0 <HAL_ADC_ErrorCallback>
}
 8002206:	e004      	b.n	8002212 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff fd57 	bl	8001cdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f043 0204 	orr.w	r2, r3, #4
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fd4a 	bl	8001cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff fab8 	bl	8001a08 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e099      	b.n	80025d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c4:	e00f      	b.n	80024e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c6:	f7ff fa9f 	bl	8001a08 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d908      	bls.n	80024e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e078      	b.n	80025d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e8      	bne.n	80024c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_DMA_Init+0x158>)
 8002500:	4013      	ands	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2b04      	cmp	r3, #4
 800253e:	d107      	bne.n	8002550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4313      	orrs	r3, r2
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0307 	bic.w	r3, r3, #7
 8002566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2b04      	cmp	r3, #4
 8002578:	d117      	bne.n	80025aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fb01 	bl	8002b94 <DMA_CheckFifoParam>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a6:	2301      	movs	r3, #1
 80025a8:	e016      	b.n	80025d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fab8 	bl	8002b28 <DMA_CalcBaseAndBitshift>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	223f      	movs	r2, #63	; 0x3f
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	f010803f 	.word	0xf010803f

080025e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_DMA_Start_IT+0x26>
 8002606:	2302      	movs	r3, #2
 8002608:	e040      	b.n	800268c <HAL_DMA_Start_IT+0xa8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d12f      	bne.n	800267e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa4a 	bl	8002acc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	223f      	movs	r2, #63	; 0x3f
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0216 	orr.w	r2, r2, #22
 8002652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0208 	orr.w	r2, r2, #8
 800266a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e005      	b.n	800268a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7ff f9b1 	bl	8001a08 <HAL_GetTick>
 80026a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e052      	b.n	800276c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0216 	bic.w	r2, r2, #22
 80026d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_DMA_Abort+0x62>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002716:	e013      	b.n	8002740 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002718:	f7ff f976 	bl	8001a08 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d90c      	bls.n	8002740 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e015      	b.n	800276c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e4      	bne.n	8002718 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	223f      	movs	r2, #63	; 0x3f
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00c      	b.n	80027ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2205      	movs	r2, #5
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_DMA_IRQHandler+0x258>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <HAL_DMA_IRQHandler+0x25c>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2208      	movs	r2, #8
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01a      	beq.n	8002824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0204 	bic.w	r2, r2, #4
 800280a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2208      	movs	r2, #8
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2201      	movs	r2, #1
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2204      	movs	r2, #4
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2204      	movs	r2, #4
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2210      	movs	r2, #16
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d043      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03c      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2210      	movs	r2, #16
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d018      	beq.n	80028fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d024      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e01f      	b.n	8002928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e016      	b.n	8002928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0208 	bic.w	r2, r2, #8
 8002916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2220      	movs	r2, #32
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 808e 	beq.w	8002a56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8086 	beq.w	8002a56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2220      	movs	r2, #32
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b05      	cmp	r3, #5
 8002960:	d136      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0216 	bic.w	r2, r2, #22
 8002970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_DMA_IRQHandler+0x1da>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0208 	bic.w	r2, r2, #8
 80029a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	223f      	movs	r2, #63	; 0x3f
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d07d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
        }
        return;
 80029ce:	e078      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d108      	bne.n	80029fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d030      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
 80029fc:	e02b      	b.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
 8002a0e:	e022      	b.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
 8002a10:	20000010 	.word	0x20000010
 8002a14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0210 	bic.w	r2, r2, #16
 8002a34:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d032      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d022      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d307      	bcc.n	8002a9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f2      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x2ca>
 8002a9c:	e000      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a9e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ac2:	bf00      	nop
    }
  }
}
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop

08002acc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d108      	bne.n	8002b0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b0a:	e007      	b.n	8002b1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3b10      	subs	r3, #16
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <DMA_CalcBaseAndBitshift+0x64>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b42:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <DMA_CalcBaseAndBitshift+0x68>)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d909      	bls.n	8002b6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58
 8002b68:	e007      	b.n	8002b7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	aaaaaaab 	.word	0xaaaaaaab
 8002b90:	08005efc 	.word	0x08005efc

08002b94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11f      	bne.n	8002bee <DMA_CheckFifoParam+0x5a>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d856      	bhi.n	8002c62 <DMA_CheckFifoParam+0xce>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <DMA_CheckFifoParam+0x28>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bdf 	.word	0x08002bdf
 8002bc4:	08002bcd 	.word	0x08002bcd
 8002bc8:	08002c63 	.word	0x08002c63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d046      	beq.n	8002c66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e043      	b.n	8002c66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be6:	d140      	bne.n	8002c6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bec:	e03d      	b.n	8002c6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf6:	d121      	bne.n	8002c3c <DMA_CheckFifoParam+0xa8>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d837      	bhi.n	8002c6e <DMA_CheckFifoParam+0xda>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <DMA_CheckFifoParam+0x70>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c15 	.word	0x08002c15
 8002c08:	08002c1b 	.word	0x08002c1b
 8002c0c:	08002c15 	.word	0x08002c15
 8002c10:	08002c2d 	.word	0x08002c2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e030      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d025      	beq.n	8002c72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2a:	e022      	b.n	8002c72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c34:	d11f      	bne.n	8002c76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c3a:	e01c      	b.n	8002c76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d903      	bls.n	8002c4a <DMA_CheckFifoParam+0xb6>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d003      	beq.n	8002c50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c48:	e018      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4e:	e015      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c60:	e00b      	b.n	8002c7a <DMA_CheckFifoParam+0xe6>
      break;
 8002c62:	bf00      	nop
 8002c64:	e00a      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e008      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e006      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e004      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e002      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e165      	b.n	8002f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f040 8154 	bne.w	8002f6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d005      	beq.n	8002cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d130      	bne.n	8002d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 0201 	and.w	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d017      	beq.n	8002d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d123      	bne.n	8002dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80ae 	beq.w	8002f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_GPIO_Init+0x300>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a5c      	ldr	r2, [pc, #368]	; (8002f8c <HAL_GPIO_Init+0x300>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b5a      	ldr	r3, [pc, #360]	; (8002f8c <HAL_GPIO_Init+0x300>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2e:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4f      	ldr	r2, [pc, #316]	; (8002f94 <HAL_GPIO_Init+0x308>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d025      	beq.n	8002ea6 <HAL_GPIO_Init+0x21a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4e      	ldr	r2, [pc, #312]	; (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01f      	beq.n	8002ea2 <HAL_GPIO_Init+0x216>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4d      	ldr	r2, [pc, #308]	; (8002f9c <HAL_GPIO_Init+0x310>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_GPIO_Init+0x212>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <HAL_GPIO_Init+0x314>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_GPIO_Init+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <HAL_GPIO_Init+0x318>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_GPIO_Init+0x20a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_GPIO_Init+0x31c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <HAL_GPIO_Init+0x206>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a49      	ldr	r2, [pc, #292]	; (8002fac <HAL_GPIO_Init+0x320>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_GPIO_Init+0x202>
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	e00c      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e00a      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002e92:	2305      	movs	r3, #5
 8002e94:	e008      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x21c>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	f002 0203 	and.w	r2, r2, #3
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb8:	4935      	ldr	r1, [pc, #212]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eea:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ef0:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f14:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	f67f ae96 	bls.w	8002ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40021400 	.word	0x40021400
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40013c00 	.word	0x40013c00

08002fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0cc      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d90c      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b8      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a58      	ldr	r2, [pc, #352]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	494d      	ldr	r1, [pc, #308]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d044      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e07f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e067      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4934      	ldr	r1, [pc, #208]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe fcb0 	bl	8001a08 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fcac 	bl	8001a08 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e04f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d20c      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e032      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4916      	ldr	r1, [pc, #88]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	490e      	ldr	r1, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313a:	f000 f855 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 800313e:	4602      	mov	r2, r0
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	490a      	ldr	r1, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	5ccb      	ldrb	r3, [r1, r3]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fc10 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00
 8003170:	40023800 	.word	0x40023800
 8003174:	08005ee4 	.word	0x08005ee4
 8003178:	20000010 	.word	0x20000010
 800317c:	20000228 	.word	0x20000228

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000010 	.word	0x20000010

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08005ef4 	.word	0x08005ef4

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08005ef4 	.word	0x08005ef4

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031f0:	2600      	movs	r6, #0
 80031f2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80031f4:	2600      	movs	r6, #0
 80031f6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80031f8:	2600      	movs	r6, #0
 80031fa:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80031fc:	2600      	movs	r6, #0
 80031fe:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003200:	2600      	movs	r6, #0
 8003202:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003204:	4ea3      	ldr	r6, [pc, #652]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003206:	68b6      	ldr	r6, [r6, #8]
 8003208:	f006 060c 	and.w	r6, r6, #12
 800320c:	2e0c      	cmp	r6, #12
 800320e:	f200 8137 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x298>
 8003212:	f20f 0c08 	addw	ip, pc, #8
 8003216:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003251 	.word	0x08003251
 8003220:	08003481 	.word	0x08003481
 8003224:	08003481 	.word	0x08003481
 8003228:	08003481 	.word	0x08003481
 800322c:	08003257 	.word	0x08003257
 8003230:	08003481 	.word	0x08003481
 8003234:	08003481 	.word	0x08003481
 8003238:	08003481 	.word	0x08003481
 800323c:	0800325d 	.word	0x0800325d
 8003240:	08003481 	.word	0x08003481
 8003244:	08003481 	.word	0x08003481
 8003248:	08003481 	.word	0x08003481
 800324c:	08003373 	.word	0x08003373
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b91      	ldr	r3, [pc, #580]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003252:	613b      	str	r3, [r7, #16]
       break;
 8003254:	e117      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003258:	613b      	str	r3, [r7, #16]
      break;
 800325a:	e114      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003264:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003266:	4b8b      	ldr	r3, [pc, #556]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	461a      	mov	r2, r3
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003282:	f04f 0500 	mov.w	r5, #0
 8003286:	ea02 0004 	and.w	r0, r2, r4
 800328a:	ea03 0105 	and.w	r1, r3, r5
 800328e:	4b83      	ldr	r3, [pc, #524]	; (800349c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003290:	fb03 f201 	mul.w	r2, r3, r1
 8003294:	2300      	movs	r3, #0
 8003296:	fb03 f300 	mul.w	r3, r3, r0
 800329a:	4413      	add	r3, r2
 800329c:	4a7f      	ldr	r2, [pc, #508]	; (800349c <HAL_RCC_GetSysClockFreq+0x2b4>)
 800329e:	fba0 0102 	umull	r0, r1, r0, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	4619      	mov	r1, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	f7fc ffff 	bl	80002b0 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4613      	mov	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e04c      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032bc:	4b75      	ldr	r3, [pc, #468]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	461a      	mov	r2, r3
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	ea02 0800 	and.w	r8, r2, r0
 80032d4:	ea03 0901 	and.w	r9, r3, r1
 80032d8:	4640      	mov	r0, r8
 80032da:	4649      	mov	r1, r9
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	014b      	lsls	r3, r1, #5
 80032e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032ea:	0142      	lsls	r2, r0, #5
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	ebb0 0008 	subs.w	r0, r0, r8
 80032f4:	eb61 0109 	sbc.w	r1, r1, r9
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	018b      	lsls	r3, r1, #6
 8003302:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003306:	0182      	lsls	r2, r0, #6
 8003308:	1a12      	subs	r2, r2, r0
 800330a:	eb63 0301 	sbc.w	r3, r3, r1
 800330e:	f04f 0000 	mov.w	r0, #0
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	00d9      	lsls	r1, r3, #3
 8003318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800331c:	00d0      	lsls	r0, r2, #3
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	eb12 0208 	adds.w	r2, r2, r8
 8003326:	eb43 0309 	adc.w	r3, r3, r9
 800332a:	f04f 0000 	mov.w	r0, #0
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	0299      	lsls	r1, r3, #10
 8003334:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003338:	0290      	lsls	r0, r2, #10
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	461a      	mov	r2, r3
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	f7fc ffb1 	bl	80002b0 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4613      	mov	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003356:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	3301      	adds	r3, #1
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	613b      	str	r3, [r7, #16]
      break;
 8003370:	e089      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003372:	4948      	ldr	r1, [pc, #288]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003374:	6849      	ldr	r1, [r1, #4]
 8003376:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800337a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800337c:	4945      	ldr	r1, [pc, #276]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800337e:	6849      	ldr	r1, [r1, #4]
 8003380:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003384:	2900      	cmp	r1, #0
 8003386:	d024      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003388:	4942      	ldr	r1, [pc, #264]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800338a:	6849      	ldr	r1, [r1, #4]
 800338c:	0989      	lsrs	r1, r1, #6
 800338e:	4608      	mov	r0, r1
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003398:	f04f 0500 	mov.w	r5, #0
 800339c:	ea00 0204 	and.w	r2, r0, r4
 80033a0:	ea01 0305 	and.w	r3, r1, r5
 80033a4:	493d      	ldr	r1, [pc, #244]	; (800349c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80033a6:	fb01 f003 	mul.w	r0, r1, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	fb01 f102 	mul.w	r1, r1, r2
 80033b0:	1844      	adds	r4, r0, r1
 80033b2:	493a      	ldr	r1, [pc, #232]	; (800349c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80033b4:	fba2 0101 	umull	r0, r1, r2, r1
 80033b8:	1863      	adds	r3, r4, r1
 80033ba:	4619      	mov	r1, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f7fc ff74 	bl	80002b0 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e04a      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	461a      	mov	r2, r3
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	ea02 0400 	and.w	r4, r2, r0
 80033ea:	ea03 0501 	and.w	r5, r3, r1
 80033ee:	4620      	mov	r0, r4
 80033f0:	4629      	mov	r1, r5
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	014b      	lsls	r3, r1, #5
 80033fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003400:	0142      	lsls	r2, r0, #5
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	1b00      	subs	r0, r0, r4
 8003408:	eb61 0105 	sbc.w	r1, r1, r5
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	018b      	lsls	r3, r1, #6
 8003416:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800341a:	0182      	lsls	r2, r0, #6
 800341c:	1a12      	subs	r2, r2, r0
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	00d9      	lsls	r1, r3, #3
 800342c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003430:	00d0      	lsls	r0, r2, #3
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	1912      	adds	r2, r2, r4
 8003438:	eb45 0303 	adc.w	r3, r5, r3
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0299      	lsls	r1, r3, #10
 8003446:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800344a:	0290      	lsls	r0, r2, #10
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	461a      	mov	r2, r3
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	f7fc ff28 	bl	80002b0 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4613      	mov	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0f1b      	lsrs	r3, r3, #28
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	613b      	str	r3, [r7, #16]
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003482:	613b      	str	r3, [r7, #16]
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	693b      	ldr	r3, [r7, #16]
}
 8003488:	4618      	mov	r0, r3
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400
 800349c:	017d7840 	.word	0x017d7840

080034a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e28d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8083 	beq.w	80035c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034c0:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d019      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034cc:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034d8:	4b8e      	ldr	r3, [pc, #568]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	4b84      	ldr	r3, [pc, #528]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x124>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d157      	bne.n	80035c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e25a      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x90>
 8003522:	4b7c      	ldr	r3, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7b      	ldr	r2, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0xb4>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003554:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fa48 	bl	8001a08 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe fa44 	bl	8001a08 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e21f      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xdc>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fa34 	bl	8001a08 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fa30 	bl	8001a08 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e20b      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x104>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06f      	beq.n	80036b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035d2:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1d3      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x278>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe f9dd 	bl	8001a08 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003652:	f7fe f9d9 	bl	8001a08 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1b4      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4925      	ldr	r1, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_OscConfig+0x278>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe f9bc 	bl	8001a08 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe f9b8 	bl	8001a08 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e193      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x27c>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe f99c 	bl	8001a08 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe f998 	bl	8001a08 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e173      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x234>
 80036f2:	e01b      	b.n	800372c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_OscConfig+0x27c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe f985 	bl	8001a08 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00e      	b.n	8003720 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe f981 	bl	8001a08 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d907      	bls.n	8003720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e15c      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b8a      	ldr	r3, [pc, #552]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ea      	bne.n	8003702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b83      	ldr	r3, [pc, #524]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b7c      	ldr	r3, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fe f941 	bl	8001a08 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fe f93d 	bl	8001a08 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e118      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x31e>
 80037b0:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x340>
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a60      	ldr	r2, [pc, #384]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a5d      	ldr	r2, [pc, #372]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a59      	ldr	r2, [pc, #356]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a56      	ldr	r2, [pc, #344]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe f902 	bl	8001a08 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe f8fe 	bl	8001a08 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0d7      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCC_OscConfig+0x368>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe f8ec 	bl	8001a08 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe f8e8 	bl	8001a08 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0c1      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80ad 	beq.w	80039cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d060      	beq.n	8003940 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d145      	bne.n	8003912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe f8bc 	bl	8001a08 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe f8b8 	bl	8001a08 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e093      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe f88d 	bl	8001a08 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe f889 	bl	8001a08 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e064      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x452>
 8003910:	e05c      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f876 	bl	8001a08 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe f872 	bl	8001a08 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x480>
 800393e:	e045      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e040      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x538>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d119      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e041      	b.n	8003a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd f9fc 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 f9ce 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e04e      	b.n	8003b32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d01d      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x80>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d111      	bne.n	8003b20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b06      	cmp	r3, #6
 8003b0c:	d010      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	e007      	b.n	8003b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40010400 	.word	0x40010400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40001800 	.word	0x40001800

08003b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d122      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0202 	mvn.w	r2, #2
 8003b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8ee 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8e0 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f8f1 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d122      	bne.n	8003c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0204 	mvn.w	r2, #4
 8003bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8c4 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8b6 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8c7 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d122      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d11b      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0208 	mvn.w	r2, #8
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2204      	movs	r2, #4
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f89a 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f88c 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f89d 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d122      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0210 	mvn.w	r2, #16
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f870 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f862 	bl	8003d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f873 	bl	8003d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0201 	mvn.w	r2, #1
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fc feec 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f97e 	bl	8004008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f838 	bl	8003da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0220 	mvn.w	r2, #32
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f948 	bl	8003ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d00f      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3d      	ldr	r2, [pc, #244]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <TIM_Base_SetConfig+0x120>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d108      	bne.n	8003e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d02b      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d027      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2c      	ldr	r2, [pc, #176]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d023      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2b      	ldr	r2, [pc, #172]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01f      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <TIM_Base_SetConfig+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01b      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d017      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a28      	ldr	r2, [pc, #160]	; (8003ee4 <TIM_Base_SetConfig+0x128>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <TIM_Base_SetConfig+0x12c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00f      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <TIM_Base_SetConfig+0x130>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <TIM_Base_SetConfig+0x134>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <TIM_Base_SetConfig+0x138>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <TIM_Base_SetConfig+0x13c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <TIM_Base_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0xf8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d103      	bne.n	8003ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	615a      	str	r2, [r3, #20]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40000c00 	.word	0x40000c00
 8003ee0:	40010400 	.word	0x40010400
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40014400 	.word	0x40014400
 8003eec:	40014800 	.word	0x40014800
 8003ef0:	40001800 	.word	0x40001800
 8003ef4:	40001c00 	.word	0x40001c00
 8003ef8:	40002000 	.word	0x40002000

08003efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e05a      	b.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d01d      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a17      	ldr	r2, [pc, #92]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40001800 	.word	0x40001800

08003ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e03f      	b.n	80040ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc ff04 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	; 0x24
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800405e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fd15 	bl	8004a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	4613      	mov	r3, r2
 80040c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d130      	bne.n	8004132 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_Transmit_IT+0x26>
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e029      	b.n	8004134 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Transmit_IT+0x38>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e022      	b.n	8004134 <HAL_UART_Transmit_IT+0x7e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2221      	movs	r2, #33	; 0x21
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d11d      	bne.n	8004196 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Receive_IT+0x26>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e016      	b.n	8004198 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive_IT+0x38>
 8004174:	2302      	movs	r3, #2
 8004176:	e00f      	b.n	8004198 <HAL_UART_Receive_IT+0x58>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 faab 	bl	80046e8 <UART_Start_Receive_IT>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b0ba      	sub	sp, #232	; 0xe8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_UART_IRQHandler+0x66>
 80041f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fb8b 	bl	800491a <UART_Receive_IT>
      return;
 8004204:	e256      	b.n	80046b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80de 	beq.w	80043cc <HAL_UART_IRQHandler+0x22c>
 8004210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004220:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80d1 	beq.w	80043cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xae>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xd2>
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f043 0202 	orr.w	r2, r3, #2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_UART_IRQHandler+0xf6>
 800427e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0204 	orr.w	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d011      	beq.n	80042c6 <HAL_UART_IRQHandler+0x126>
 80042a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0208 	orr.w	r2, r3, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 81ed 	beq.w	80046aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_UART_IRQHandler+0x14e>
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fb16 	bl	800491a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_UART_IRQHandler+0x17a>
 8004312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d04f      	beq.n	80043ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa1e 	bl	800475c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d141      	bne.n	80043b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800435a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800435e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1d9      	bne.n	800432e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d013      	beq.n	80043aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	4a7d      	ldr	r2, [pc, #500]	; (800457c <HAL_UART_IRQHandler+0x3dc>)
 8004388:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe f9f0 	bl	8002774 <HAL_DMA_Abort_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043a4:	4610      	mov	r0, r2
 80043a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e00e      	b.n	80043c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f986 	bl	80046bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e00a      	b.n	80043c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f982 	bl	80046bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	e006      	b.n	80043c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f97e 	bl	80046bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043c6:	e170      	b.n	80046aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	bf00      	nop
    return;
 80043ca:	e16e      	b.n	80046aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 814a 	bne.w	800466a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8143 	beq.w	800466a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 813c 	beq.w	800466a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	f040 80b4 	bne.w	8004580 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8140 	beq.w	80046ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004436:	429a      	cmp	r2, r3
 8004438:	f080 8139 	bcs.w	80046ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004442:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	f000 8088 	beq.w	8004562 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800446c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800447e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800448a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1d9      	bne.n	8004452 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e1      	bne.n	800449e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800450c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e3      	bne.n	80044da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004532:	f023 0310 	bic.w	r3, r3, #16
 8004536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004544:	65ba      	str	r2, [r7, #88]	; 0x58
 8004546:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800454a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e3      	bne.n	8004520 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe f899 	bl	8002694 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800456a:	b29b      	uxth	r3, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	b29b      	uxth	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8ac 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004578:	e099      	b.n	80046ae <HAL_UART_IRQHandler+0x50e>
 800457a:	bf00      	nop
 800457c:	08004823 	.word	0x08004823
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004588:	b29b      	uxth	r3, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 808b 	beq.w	80046b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800459c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8086 	beq.w	80046b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045ca:	647a      	str	r2, [r7, #68]	; 0x44
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e3      	bne.n	80045a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	623b      	str	r3, [r7, #32]
   return(result);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004602:	633a      	str	r2, [r7, #48]	; 0x30
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e3      	bne.n	80045de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60fb      	str	r3, [r7, #12]
   return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0310 	bic.w	r3, r3, #16
 800463a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	617b      	str	r3, [r7, #20]
   return(result);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e3      	bne.n	8004624 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800465c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f834 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004668:	e023      	b.n	80046b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_UART_IRQHandler+0x4ea>
 8004676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8e1 	bl	800484a <UART_Transmit_IT>
    return;
 8004688:	e014      	b.n	80046b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00e      	beq.n	80046b4 <HAL_UART_IRQHandler+0x514>
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f921 	bl	80048ea <UART_EndTransmit_IT>
    return;
 80046a8:	e004      	b.n	80046b4 <HAL_UART_IRQHandler+0x514>
    return;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <HAL_UART_IRQHandler+0x514>
      return;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <HAL_UART_IRQHandler+0x514>
      return;
 80046b2:	bf00      	nop
  }
}
 80046b4:	37e8      	adds	r7, #232	; 0xe8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop

080046bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2222      	movs	r2, #34	; 0x22
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0220 	orr.w	r2, r2, #32
 800474c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b095      	sub	sp, #84	; 0x54
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004784:	643a      	str	r2, [r7, #64]	; 0x40
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800478a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d119      	bne.n	8004808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f4:	61ba      	str	r2, [r7, #24]
 80047f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6979      	ldr	r1, [r7, #20]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004816:	bf00      	nop
 8004818:	3754      	adds	r7, #84	; 0x54
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff ff3d 	bl	80046bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b21      	cmp	r3, #33	; 0x21
 800485c:	d13e      	bne.n	80048dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d114      	bne.n	8004892 <UART_Transmit_IT+0x48>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d110      	bne.n	8004892 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]
 8004890:	e008      	b.n	80048a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6211      	str	r1, [r2, #32]
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4619      	mov	r1, r3
 80048b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10f      	bne.n	80048d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fcb0 	bl	8001270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b08c      	sub	sp, #48	; 0x30
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b22      	cmp	r3, #34	; 0x22
 800492c:	f040 80ab 	bne.w	8004a86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	d117      	bne.n	800496a <UART_Receive_IT+0x50>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d113      	bne.n	800496a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004958:	b29a      	uxth	r2, r3
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	1c9a      	adds	r2, r3, #2
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
 8004968:	e026      	b.n	80049b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497c:	d007      	beq.n	800498e <UART_Receive_IT+0x74>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <UART_Receive_IT+0x82>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e008      	b.n	80049ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4619      	mov	r1, r3
 80049c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d15a      	bne.n	8004a82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0220 	bic.w	r2, r2, #32
 80049da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d135      	bne.n	8004a78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	613b      	str	r3, [r7, #16]
   return(result);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	623a      	str	r2, [r7, #32]
 8004a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	69f9      	ldr	r1, [r7, #28]
 8004a38:	6a3a      	ldr	r2, [r7, #32]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d10a      	bne.n	8004a6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fe2d 	bl	80046d0 <HAL_UARTEx_RxEventCallback>
 8004a76:	e002      	b.n	8004a7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fc fbd5 	bl	8001228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e002      	b.n	8004a88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e000      	b.n	8004a88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
  }
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3730      	adds	r7, #48	; 0x30
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	b09f      	sub	sp, #124	; 0x7c
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	68d9      	ldr	r1, [r3, #12]
 8004aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	ea40 0301 	orr.w	r3, r0, r1
 8004ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ad4:	f021 010c 	bic.w	r1, r1, #12
 8004ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aee:	6999      	ldr	r1, [r3, #24]
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	ea40 0301 	orr.w	r3, r0, r1
 8004af8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4bc5      	ldr	r3, [pc, #788]	; (8004e14 <UART_SetConfig+0x384>)
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d004      	beq.n	8004b0e <UART_SetConfig+0x7e>
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4bc3      	ldr	r3, [pc, #780]	; (8004e18 <UART_SetConfig+0x388>)
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d103      	bne.n	8004b16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b0e:	f7fe fb57 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8004b12:	6778      	str	r0, [r7, #116]	; 0x74
 8004b14:	e002      	b.n	8004b1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b16:	f7fe fb3f 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8004b1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	f040 80b6 	bne.w	8004c94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2a:	461c      	mov	r4, r3
 8004b2c:	f04f 0500 	mov.w	r5, #0
 8004b30:	4622      	mov	r2, r4
 8004b32:	462b      	mov	r3, r5
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	6439      	str	r1, [r7, #64]	; 0x40
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b40:	1912      	adds	r2, r2, r4
 8004b42:	eb45 0303 	adc.w	r3, r5, r3
 8004b46:	f04f 0000 	mov.w	r0, #0
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	00d9      	lsls	r1, r3, #3
 8004b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b54:	00d0      	lsls	r0, r2, #3
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	1911      	adds	r1, r2, r4
 8004b5c:	6639      	str	r1, [r7, #96]	; 0x60
 8004b5e:	416b      	adcs	r3, r5
 8004b60:	667b      	str	r3, [r7, #100]	; 0x64
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	1891      	adds	r1, r2, r2
 8004b6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b70:	415b      	adcs	r3, r3
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b7c:	f7fb fb98 	bl	80002b0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4ba5      	ldr	r3, [pc, #660]	; (8004e1c <UART_SetConfig+0x38c>)
 8004b86:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	011e      	lsls	r6, r3, #4
 8004b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b90:	461c      	mov	r4, r3
 8004b92:	f04f 0500 	mov.w	r5, #0
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ba6:	1912      	adds	r2, r2, r4
 8004ba8:	eb45 0303 	adc.w	r3, r5, r3
 8004bac:	f04f 0000 	mov.w	r0, #0
 8004bb0:	f04f 0100 	mov.w	r1, #0
 8004bb4:	00d9      	lsls	r1, r3, #3
 8004bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bba:	00d0      	lsls	r0, r2, #3
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	1911      	adds	r1, r2, r4
 8004bc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bc4:	416b      	adcs	r3, r5
 8004bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	1891      	adds	r1, r2, r2
 8004bd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004be2:	f7fb fb65 	bl	80002b0 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4b8c      	ldr	r3, [pc, #560]	; (8004e1c <UART_SetConfig+0x38c>)
 8004bec:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2164      	movs	r1, #100	; 0x64
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a87      	ldr	r2, [pc, #540]	; (8004e1c <UART_SetConfig+0x38c>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c0c:	441e      	add	r6, r3
 8004c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c10:	4618      	mov	r0, r3
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	1894      	adds	r4, r2, r2
 8004c1c:	623c      	str	r4, [r7, #32]
 8004c1e:	415b      	adcs	r3, r3
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c26:	1812      	adds	r2, r2, r0
 8004c28:	eb41 0303 	adc.w	r3, r1, r3
 8004c2c:	f04f 0400 	mov.w	r4, #0
 8004c30:	f04f 0500 	mov.w	r5, #0
 8004c34:	00dd      	lsls	r5, r3, #3
 8004c36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c3a:	00d4      	lsls	r4, r2, #3
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	462b      	mov	r3, r5
 8004c40:	1814      	adds	r4, r2, r0
 8004c42:	653c      	str	r4, [r7, #80]	; 0x50
 8004c44:	414b      	adcs	r3, r1
 8004c46:	657b      	str	r3, [r7, #84]	; 0x54
 8004c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	1891      	adds	r1, r2, r2
 8004c54:	61b9      	str	r1, [r7, #24]
 8004c56:	415b      	adcs	r3, r3
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c62:	f7fb fb25 	bl	80002b0 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4b6c      	ldr	r3, [pc, #432]	; (8004e1c <UART_SetConfig+0x38c>)
 8004c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	2164      	movs	r1, #100	; 0x64
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	3332      	adds	r3, #50	; 0x32
 8004c7e:	4a67      	ldr	r2, [pc, #412]	; (8004e1c <UART_SetConfig+0x38c>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	f003 0207 	and.w	r2, r3, #7
 8004c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4432      	add	r2, r6
 8004c90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c92:	e0b9      	b.n	8004e08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c96:	461c      	mov	r4, r3
 8004c98:	f04f 0500 	mov.w	r5, #0
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	6139      	str	r1, [r7, #16]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cac:	1912      	adds	r2, r2, r4
 8004cae:	eb45 0303 	adc.w	r3, r5, r3
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f04f 0100 	mov.w	r1, #0
 8004cba:	00d9      	lsls	r1, r3, #3
 8004cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cc0:	00d0      	lsls	r0, r2, #3
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	eb12 0804 	adds.w	r8, r2, r4
 8004cca:	eb43 0905 	adc.w	r9, r3, r5
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	008b      	lsls	r3, r1, #2
 8004ce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ce6:	0082      	lsls	r2, r0, #2
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	f7fb fae0 	bl	80002b0 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <UART_SetConfig+0x38c>)
 8004cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	011e      	lsls	r6, r3, #4
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d00:	4618      	mov	r0, r3
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	1894      	adds	r4, r2, r2
 8004d0c:	60bc      	str	r4, [r7, #8]
 8004d0e:	415b      	adcs	r3, r3
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d16:	1812      	adds	r2, r2, r0
 8004d18:	eb41 0303 	adc.w	r3, r1, r3
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	f04f 0500 	mov.w	r5, #0
 8004d24:	00dd      	lsls	r5, r3, #3
 8004d26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d2a:	00d4      	lsls	r4, r2, #3
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	462b      	mov	r3, r5
 8004d30:	1814      	adds	r4, r2, r0
 8004d32:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d34:	414b      	adcs	r3, r1
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	008b      	lsls	r3, r1, #2
 8004d4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d50:	0082      	lsls	r2, r0, #2
 8004d52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d56:	f7fb faab 	bl	80002b0 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <UART_SetConfig+0x38c>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <UART_SetConfig+0x38c>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7e:	441e      	add	r6, r3
 8004d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d82:	4618      	mov	r0, r3
 8004d84:	f04f 0100 	mov.w	r1, #0
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	1894      	adds	r4, r2, r2
 8004d8e:	603c      	str	r4, [r7, #0]
 8004d90:	415b      	adcs	r3, r3
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d98:	1812      	adds	r2, r2, r0
 8004d9a:	eb41 0303 	adc.w	r3, r1, r3
 8004d9e:	f04f 0400 	mov.w	r4, #0
 8004da2:	f04f 0500 	mov.w	r5, #0
 8004da6:	00dd      	lsls	r5, r3, #3
 8004da8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dac:	00d4      	lsls	r4, r2, #3
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	eb12 0a00 	adds.w	sl, r2, r0
 8004db6:	eb43 0b01 	adc.w	fp, r3, r1
 8004dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f04f 0100 	mov.w	r1, #0
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	008b      	lsls	r3, r1, #2
 8004dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dd2:	0082      	lsls	r2, r0, #2
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	4659      	mov	r1, fp
 8004dd8:	f7fb fa6a 	bl	80002b0 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <UART_SetConfig+0x38c>)
 8004de2:	fba3 1302 	umull	r1, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2164      	movs	r1, #100	; 0x64
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	3332      	adds	r3, #50	; 0x32
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <UART_SetConfig+0x38c>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4432      	add	r2, r6
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	377c      	adds	r7, #124	; 0x7c
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	bf00      	nop
 8004e14:	40011000 	.word	0x40011000
 8004e18:	40011400 	.word	0x40011400
 8004e1c:	51eb851f 	.word	0x51eb851f

08004e20 <__assert_func>:
 8004e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e22:	4614      	mov	r4, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <__assert_func+0x2c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	68d8      	ldr	r0, [r3, #12]
 8004e2e:	b14c      	cbz	r4, 8004e44 <__assert_func+0x24>
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <__assert_func+0x30>)
 8004e32:	9100      	str	r1, [sp, #0]
 8004e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e38:	4906      	ldr	r1, [pc, #24]	; (8004e54 <__assert_func+0x34>)
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	f000 f814 	bl	8004e68 <fiprintf>
 8004e40:	f000 fbfe 	bl	8005640 <abort>
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__assert_func+0x38>)
 8004e46:	461c      	mov	r4, r3
 8004e48:	e7f3      	b.n	8004e32 <__assert_func+0x12>
 8004e4a:	bf00      	nop
 8004e4c:	20000230 	.word	0x20000230
 8004e50:	08005f04 	.word	0x08005f04
 8004e54:	08005f11 	.word	0x08005f11
 8004e58:	08005f3f 	.word	0x08005f3f

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	; (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000230 	.word	0x20000230

08004e68 <fiprintf>:
 8004e68:	b40e      	push	{r1, r2, r3}
 8004e6a:	b503      	push	{r0, r1, lr}
 8004e6c:	4601      	mov	r1, r0
 8004e6e:	ab03      	add	r3, sp, #12
 8004e70:	4805      	ldr	r0, [pc, #20]	; (8004e88 <fiprintf+0x20>)
 8004e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e76:	6800      	ldr	r0, [r0, #0]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	f000 f85d 	bl	8004f38 <_vfiprintf_r>
 8004e7e:	b002      	add	sp, #8
 8004e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e84:	b003      	add	sp, #12
 8004e86:	4770      	bx	lr
 8004e88:	20000230 	.word	0x20000230

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4d0d      	ldr	r5, [pc, #52]	; (8004ec4 <__libc_init_array+0x38>)
 8004e90:	4c0d      	ldr	r4, [pc, #52]	; (8004ec8 <__libc_init_array+0x3c>)
 8004e92:	1b64      	subs	r4, r4, r5
 8004e94:	10a4      	asrs	r4, r4, #2
 8004e96:	2600      	movs	r6, #0
 8004e98:	42a6      	cmp	r6, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ecc <__libc_init_array+0x40>)
 8004e9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ed0 <__libc_init_array+0x44>)
 8004ea0:	f000 ffaa 	bl	8005df8 <_init>
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb4:	4798      	blx	r3
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebe:	4798      	blx	r3
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	08005fe0 	.word	0x08005fe0
 8004ec8:	08005fe0 	.word	0x08005fe0
 8004ecc:	08005fe0 	.word	0x08005fe0
 8004ed0:	08005fe4 	.word	0x08005fe4

08004ed4 <memset>:
 8004ed4:	4402      	add	r2, r0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d100      	bne.n	8004ede <memset+0xa>
 8004edc:	4770      	bx	lr
 8004ede:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee2:	e7f9      	b.n	8004ed8 <memset+0x4>

08004ee4 <__sfputc_r>:
 8004ee4:	6893      	ldr	r3, [r2, #8]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	b410      	push	{r4}
 8004eec:	6093      	str	r3, [r2, #8]
 8004eee:	da08      	bge.n	8004f02 <__sfputc_r+0x1e>
 8004ef0:	6994      	ldr	r4, [r2, #24]
 8004ef2:	42a3      	cmp	r3, r4
 8004ef4:	db01      	blt.n	8004efa <__sfputc_r+0x16>
 8004ef6:	290a      	cmp	r1, #10
 8004ef8:	d103      	bne.n	8004f02 <__sfputc_r+0x1e>
 8004efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efe:	f000 badf 	b.w	80054c0 <__swbuf_r>
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	1c58      	adds	r0, r3, #1
 8004f06:	6010      	str	r0, [r2, #0]
 8004f08:	7019      	strb	r1, [r3, #0]
 8004f0a:	4608      	mov	r0, r1
 8004f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <__sfputs_r>:
 8004f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f14:	4606      	mov	r6, r0
 8004f16:	460f      	mov	r7, r1
 8004f18:	4614      	mov	r4, r2
 8004f1a:	18d5      	adds	r5, r2, r3
 8004f1c:	42ac      	cmp	r4, r5
 8004f1e:	d101      	bne.n	8004f24 <__sfputs_r+0x12>
 8004f20:	2000      	movs	r0, #0
 8004f22:	e007      	b.n	8004f34 <__sfputs_r+0x22>
 8004f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f28:	463a      	mov	r2, r7
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7ff ffda 	bl	8004ee4 <__sfputc_r>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d1f3      	bne.n	8004f1c <__sfputs_r+0xa>
 8004f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f38 <_vfiprintf_r>:
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	460d      	mov	r5, r1
 8004f3e:	b09d      	sub	sp, #116	; 0x74
 8004f40:	4614      	mov	r4, r2
 8004f42:	4698      	mov	r8, r3
 8004f44:	4606      	mov	r6, r0
 8004f46:	b118      	cbz	r0, 8004f50 <_vfiprintf_r+0x18>
 8004f48:	6983      	ldr	r3, [r0, #24]
 8004f4a:	b90b      	cbnz	r3, 8004f50 <_vfiprintf_r+0x18>
 8004f4c:	f000 fc9a 	bl	8005884 <__sinit>
 8004f50:	4b89      	ldr	r3, [pc, #548]	; (8005178 <_vfiprintf_r+0x240>)
 8004f52:	429d      	cmp	r5, r3
 8004f54:	d11b      	bne.n	8004f8e <_vfiprintf_r+0x56>
 8004f56:	6875      	ldr	r5, [r6, #4]
 8004f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f5a:	07d9      	lsls	r1, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_vfiprintf_r+0x32>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	059a      	lsls	r2, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_vfiprintf_r+0x32>
 8004f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f66:	f000 fd2b 	bl	80059c0 <__retarget_lock_acquire_recursive>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	071b      	lsls	r3, r3, #28
 8004f6e:	d501      	bpl.n	8004f74 <_vfiprintf_r+0x3c>
 8004f70:	692b      	ldr	r3, [r5, #16]
 8004f72:	b9eb      	cbnz	r3, 8004fb0 <_vfiprintf_r+0x78>
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 faf4 	bl	8005564 <__swsetup_r>
 8004f7c:	b1c0      	cbz	r0, 8004fb0 <_vfiprintf_r+0x78>
 8004f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f80:	07dc      	lsls	r4, r3, #31
 8004f82:	d50e      	bpl.n	8004fa2 <_vfiprintf_r+0x6a>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	b01d      	add	sp, #116	; 0x74
 8004f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8e:	4b7b      	ldr	r3, [pc, #492]	; (800517c <_vfiprintf_r+0x244>)
 8004f90:	429d      	cmp	r5, r3
 8004f92:	d101      	bne.n	8004f98 <_vfiprintf_r+0x60>
 8004f94:	68b5      	ldr	r5, [r6, #8]
 8004f96:	e7df      	b.n	8004f58 <_vfiprintf_r+0x20>
 8004f98:	4b79      	ldr	r3, [pc, #484]	; (8005180 <_vfiprintf_r+0x248>)
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	bf08      	it	eq
 8004f9e:	68f5      	ldreq	r5, [r6, #12]
 8004fa0:	e7da      	b.n	8004f58 <_vfiprintf_r+0x20>
 8004fa2:	89ab      	ldrh	r3, [r5, #12]
 8004fa4:	0598      	lsls	r0, r3, #22
 8004fa6:	d4ed      	bmi.n	8004f84 <_vfiprintf_r+0x4c>
 8004fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004faa:	f000 fd0a 	bl	80059c2 <__retarget_lock_release_recursive>
 8004fae:	e7e9      	b.n	8004f84 <_vfiprintf_r+0x4c>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fbe:	2330      	movs	r3, #48	; 0x30
 8004fc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005184 <_vfiprintf_r+0x24c>
 8004fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc8:	f04f 0901 	mov.w	r9, #1
 8004fcc:	4623      	mov	r3, r4
 8004fce:	469a      	mov	sl, r3
 8004fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd4:	b10a      	cbz	r2, 8004fda <_vfiprintf_r+0xa2>
 8004fd6:	2a25      	cmp	r2, #37	; 0x25
 8004fd8:	d1f9      	bne.n	8004fce <_vfiprintf_r+0x96>
 8004fda:	ebba 0b04 	subs.w	fp, sl, r4
 8004fde:	d00b      	beq.n	8004ff8 <_vfiprintf_r+0xc0>
 8004fe0:	465b      	mov	r3, fp
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff ff93 	bl	8004f12 <__sfputs_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	f000 80aa 	beq.w	8005146 <_vfiprintf_r+0x20e>
 8004ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff4:	445a      	add	r2, fp
 8004ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a2 	beq.w	8005146 <_vfiprintf_r+0x20e>
 8005002:	2300      	movs	r3, #0
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800500c:	f10a 0a01 	add.w	sl, sl, #1
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	9307      	str	r3, [sp, #28]
 8005014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005018:	931a      	str	r3, [sp, #104]	; 0x68
 800501a:	4654      	mov	r4, sl
 800501c:	2205      	movs	r2, #5
 800501e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005022:	4858      	ldr	r0, [pc, #352]	; (8005184 <_vfiprintf_r+0x24c>)
 8005024:	f7fb f8f4 	bl	8000210 <memchr>
 8005028:	9a04      	ldr	r2, [sp, #16]
 800502a:	b9d8      	cbnz	r0, 8005064 <_vfiprintf_r+0x12c>
 800502c:	06d1      	lsls	r1, r2, #27
 800502e:	bf44      	itt	mi
 8005030:	2320      	movmi	r3, #32
 8005032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005036:	0713      	lsls	r3, r2, #28
 8005038:	bf44      	itt	mi
 800503a:	232b      	movmi	r3, #43	; 0x2b
 800503c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005040:	f89a 3000 	ldrb.w	r3, [sl]
 8005044:	2b2a      	cmp	r3, #42	; 0x2a
 8005046:	d015      	beq.n	8005074 <_vfiprintf_r+0x13c>
 8005048:	9a07      	ldr	r2, [sp, #28]
 800504a:	4654      	mov	r4, sl
 800504c:	2000      	movs	r0, #0
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	4621      	mov	r1, r4
 8005054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005058:	3b30      	subs	r3, #48	; 0x30
 800505a:	2b09      	cmp	r3, #9
 800505c:	d94e      	bls.n	80050fc <_vfiprintf_r+0x1c4>
 800505e:	b1b0      	cbz	r0, 800508e <_vfiprintf_r+0x156>
 8005060:	9207      	str	r2, [sp, #28]
 8005062:	e014      	b.n	800508e <_vfiprintf_r+0x156>
 8005064:	eba0 0308 	sub.w	r3, r0, r8
 8005068:	fa09 f303 	lsl.w	r3, r9, r3
 800506c:	4313      	orrs	r3, r2
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	46a2      	mov	sl, r4
 8005072:	e7d2      	b.n	800501a <_vfiprintf_r+0xe2>
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	1d19      	adds	r1, r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	9103      	str	r1, [sp, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	bfbb      	ittet	lt
 8005080:	425b      	neglt	r3, r3
 8005082:	f042 0202 	orrlt.w	r2, r2, #2
 8005086:	9307      	strge	r3, [sp, #28]
 8005088:	9307      	strlt	r3, [sp, #28]
 800508a:	bfb8      	it	lt
 800508c:	9204      	strlt	r2, [sp, #16]
 800508e:	7823      	ldrb	r3, [r4, #0]
 8005090:	2b2e      	cmp	r3, #46	; 0x2e
 8005092:	d10c      	bne.n	80050ae <_vfiprintf_r+0x176>
 8005094:	7863      	ldrb	r3, [r4, #1]
 8005096:	2b2a      	cmp	r3, #42	; 0x2a
 8005098:	d135      	bne.n	8005106 <_vfiprintf_r+0x1ce>
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	1d1a      	adds	r2, r3, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	9203      	str	r2, [sp, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bfb8      	it	lt
 80050a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80050aa:	3402      	adds	r4, #2
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005194 <_vfiprintf_r+0x25c>
 80050b2:	7821      	ldrb	r1, [r4, #0]
 80050b4:	2203      	movs	r2, #3
 80050b6:	4650      	mov	r0, sl
 80050b8:	f7fb f8aa 	bl	8000210 <memchr>
 80050bc:	b140      	cbz	r0, 80050d0 <_vfiprintf_r+0x198>
 80050be:	2340      	movs	r3, #64	; 0x40
 80050c0:	eba0 000a 	sub.w	r0, r0, sl
 80050c4:	fa03 f000 	lsl.w	r0, r3, r0
 80050c8:	9b04      	ldr	r3, [sp, #16]
 80050ca:	4303      	orrs	r3, r0
 80050cc:	3401      	adds	r4, #1
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d4:	482c      	ldr	r0, [pc, #176]	; (8005188 <_vfiprintf_r+0x250>)
 80050d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050da:	2206      	movs	r2, #6
 80050dc:	f7fb f898 	bl	8000210 <memchr>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d03f      	beq.n	8005164 <_vfiprintf_r+0x22c>
 80050e4:	4b29      	ldr	r3, [pc, #164]	; (800518c <_vfiprintf_r+0x254>)
 80050e6:	bb1b      	cbnz	r3, 8005130 <_vfiprintf_r+0x1f8>
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	3307      	adds	r3, #7
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	3308      	adds	r3, #8
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	443b      	add	r3, r7
 80050f8:	9309      	str	r3, [sp, #36]	; 0x24
 80050fa:	e767      	b.n	8004fcc <_vfiprintf_r+0x94>
 80050fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005100:	460c      	mov	r4, r1
 8005102:	2001      	movs	r0, #1
 8005104:	e7a5      	b.n	8005052 <_vfiprintf_r+0x11a>
 8005106:	2300      	movs	r3, #0
 8005108:	3401      	adds	r4, #1
 800510a:	9305      	str	r3, [sp, #20]
 800510c:	4619      	mov	r1, r3
 800510e:	f04f 0c0a 	mov.w	ip, #10
 8005112:	4620      	mov	r0, r4
 8005114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005118:	3a30      	subs	r2, #48	; 0x30
 800511a:	2a09      	cmp	r2, #9
 800511c:	d903      	bls.n	8005126 <_vfiprintf_r+0x1ee>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0c5      	beq.n	80050ae <_vfiprintf_r+0x176>
 8005122:	9105      	str	r1, [sp, #20]
 8005124:	e7c3      	b.n	80050ae <_vfiprintf_r+0x176>
 8005126:	fb0c 2101 	mla	r1, ip, r1, r2
 800512a:	4604      	mov	r4, r0
 800512c:	2301      	movs	r3, #1
 800512e:	e7f0      	b.n	8005112 <_vfiprintf_r+0x1da>
 8005130:	ab03      	add	r3, sp, #12
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	462a      	mov	r2, r5
 8005136:	4b16      	ldr	r3, [pc, #88]	; (8005190 <_vfiprintf_r+0x258>)
 8005138:	a904      	add	r1, sp, #16
 800513a:	4630      	mov	r0, r6
 800513c:	f3af 8000 	nop.w
 8005140:	4607      	mov	r7, r0
 8005142:	1c78      	adds	r0, r7, #1
 8005144:	d1d6      	bne.n	80050f4 <_vfiprintf_r+0x1bc>
 8005146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005148:	07d9      	lsls	r1, r3, #31
 800514a:	d405      	bmi.n	8005158 <_vfiprintf_r+0x220>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	059a      	lsls	r2, r3, #22
 8005150:	d402      	bmi.n	8005158 <_vfiprintf_r+0x220>
 8005152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005154:	f000 fc35 	bl	80059c2 <__retarget_lock_release_recursive>
 8005158:	89ab      	ldrh	r3, [r5, #12]
 800515a:	065b      	lsls	r3, r3, #25
 800515c:	f53f af12 	bmi.w	8004f84 <_vfiprintf_r+0x4c>
 8005160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005162:	e711      	b.n	8004f88 <_vfiprintf_r+0x50>
 8005164:	ab03      	add	r3, sp, #12
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	462a      	mov	r2, r5
 800516a:	4b09      	ldr	r3, [pc, #36]	; (8005190 <_vfiprintf_r+0x258>)
 800516c:	a904      	add	r1, sp, #16
 800516e:	4630      	mov	r0, r6
 8005170:	f000 f880 	bl	8005274 <_printf_i>
 8005174:	e7e4      	b.n	8005140 <_vfiprintf_r+0x208>
 8005176:	bf00      	nop
 8005178:	08005f98 	.word	0x08005f98
 800517c:	08005fb8 	.word	0x08005fb8
 8005180:	08005f78 	.word	0x08005f78
 8005184:	08005f44 	.word	0x08005f44
 8005188:	08005f4e 	.word	0x08005f4e
 800518c:	00000000 	.word	0x00000000
 8005190:	08004f13 	.word	0x08004f13
 8005194:	08005f4a 	.word	0x08005f4a

08005198 <_printf_common>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	4616      	mov	r6, r2
 800519e:	4699      	mov	r9, r3
 80051a0:	688a      	ldr	r2, [r1, #8]
 80051a2:	690b      	ldr	r3, [r1, #16]
 80051a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bfb8      	it	lt
 80051ac:	4613      	movlt	r3, r2
 80051ae:	6033      	str	r3, [r6, #0]
 80051b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051b4:	4607      	mov	r7, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	b10a      	cbz	r2, 80051be <_printf_common+0x26>
 80051ba:	3301      	adds	r3, #1
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	0699      	lsls	r1, r3, #26
 80051c2:	bf42      	ittt	mi
 80051c4:	6833      	ldrmi	r3, [r6, #0]
 80051c6:	3302      	addmi	r3, #2
 80051c8:	6033      	strmi	r3, [r6, #0]
 80051ca:	6825      	ldr	r5, [r4, #0]
 80051cc:	f015 0506 	ands.w	r5, r5, #6
 80051d0:	d106      	bne.n	80051e0 <_printf_common+0x48>
 80051d2:	f104 0a19 	add.w	sl, r4, #25
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	6832      	ldr	r2, [r6, #0]
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	42ab      	cmp	r3, r5
 80051de:	dc26      	bgt.n	800522e <_printf_common+0x96>
 80051e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051e4:	1e13      	subs	r3, r2, #0
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	bf18      	it	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	0692      	lsls	r2, r2, #26
 80051ee:	d42b      	bmi.n	8005248 <_printf_common+0xb0>
 80051f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d01e      	beq.n	800523c <_printf_common+0xa4>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	68e5      	ldr	r5, [r4, #12]
 8005202:	6832      	ldr	r2, [r6, #0]
 8005204:	f003 0306 	and.w	r3, r3, #6
 8005208:	2b04      	cmp	r3, #4
 800520a:	bf08      	it	eq
 800520c:	1aad      	subeq	r5, r5, r2
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	6922      	ldr	r2, [r4, #16]
 8005212:	bf0c      	ite	eq
 8005214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005218:	2500      	movne	r5, #0
 800521a:	4293      	cmp	r3, r2
 800521c:	bfc4      	itt	gt
 800521e:	1a9b      	subgt	r3, r3, r2
 8005220:	18ed      	addgt	r5, r5, r3
 8005222:	2600      	movs	r6, #0
 8005224:	341a      	adds	r4, #26
 8005226:	42b5      	cmp	r5, r6
 8005228:	d11a      	bne.n	8005260 <_printf_common+0xc8>
 800522a:	2000      	movs	r0, #0
 800522c:	e008      	b.n	8005240 <_printf_common+0xa8>
 800522e:	2301      	movs	r3, #1
 8005230:	4652      	mov	r2, sl
 8005232:	4649      	mov	r1, r9
 8005234:	4638      	mov	r0, r7
 8005236:	47c0      	blx	r8
 8005238:	3001      	adds	r0, #1
 800523a:	d103      	bne.n	8005244 <_printf_common+0xac>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005244:	3501      	adds	r5, #1
 8005246:	e7c6      	b.n	80051d6 <_printf_common+0x3e>
 8005248:	18e1      	adds	r1, r4, r3
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	2030      	movs	r0, #48	; 0x30
 800524e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005252:	4422      	add	r2, r4
 8005254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800525c:	3302      	adds	r3, #2
 800525e:	e7c7      	b.n	80051f0 <_printf_common+0x58>
 8005260:	2301      	movs	r3, #1
 8005262:	4622      	mov	r2, r4
 8005264:	4649      	mov	r1, r9
 8005266:	4638      	mov	r0, r7
 8005268:	47c0      	blx	r8
 800526a:	3001      	adds	r0, #1
 800526c:	d0e6      	beq.n	800523c <_printf_common+0xa4>
 800526e:	3601      	adds	r6, #1
 8005270:	e7d9      	b.n	8005226 <_printf_common+0x8e>
	...

08005274 <_printf_i>:
 8005274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	460c      	mov	r4, r1
 800527a:	4691      	mov	r9, r2
 800527c:	7e27      	ldrb	r7, [r4, #24]
 800527e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005280:	2f78      	cmp	r7, #120	; 0x78
 8005282:	4680      	mov	r8, r0
 8005284:	469a      	mov	sl, r3
 8005286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528a:	d807      	bhi.n	800529c <_printf_i+0x28>
 800528c:	2f62      	cmp	r7, #98	; 0x62
 800528e:	d80a      	bhi.n	80052a6 <_printf_i+0x32>
 8005290:	2f00      	cmp	r7, #0
 8005292:	f000 80d8 	beq.w	8005446 <_printf_i+0x1d2>
 8005296:	2f58      	cmp	r7, #88	; 0x58
 8005298:	f000 80a3 	beq.w	80053e2 <_printf_i+0x16e>
 800529c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052a4:	e03a      	b.n	800531c <_printf_i+0xa8>
 80052a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052aa:	2b15      	cmp	r3, #21
 80052ac:	d8f6      	bhi.n	800529c <_printf_i+0x28>
 80052ae:	a001      	add	r0, pc, #4	; (adr r0, 80052b4 <_printf_i+0x40>)
 80052b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052b4:	0800530d 	.word	0x0800530d
 80052b8:	08005321 	.word	0x08005321
 80052bc:	0800529d 	.word	0x0800529d
 80052c0:	0800529d 	.word	0x0800529d
 80052c4:	0800529d 	.word	0x0800529d
 80052c8:	0800529d 	.word	0x0800529d
 80052cc:	08005321 	.word	0x08005321
 80052d0:	0800529d 	.word	0x0800529d
 80052d4:	0800529d 	.word	0x0800529d
 80052d8:	0800529d 	.word	0x0800529d
 80052dc:	0800529d 	.word	0x0800529d
 80052e0:	0800542d 	.word	0x0800542d
 80052e4:	08005351 	.word	0x08005351
 80052e8:	0800540f 	.word	0x0800540f
 80052ec:	0800529d 	.word	0x0800529d
 80052f0:	0800529d 	.word	0x0800529d
 80052f4:	0800544f 	.word	0x0800544f
 80052f8:	0800529d 	.word	0x0800529d
 80052fc:	08005351 	.word	0x08005351
 8005300:	0800529d 	.word	0x0800529d
 8005304:	0800529d 	.word	0x0800529d
 8005308:	08005417 	.word	0x08005417
 800530c:	680b      	ldr	r3, [r1, #0]
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	600a      	str	r2, [r1, #0]
 8005314:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800531c:	2301      	movs	r3, #1
 800531e:	e0a3      	b.n	8005468 <_printf_i+0x1f4>
 8005320:	6825      	ldr	r5, [r4, #0]
 8005322:	6808      	ldr	r0, [r1, #0]
 8005324:	062e      	lsls	r6, r5, #24
 8005326:	f100 0304 	add.w	r3, r0, #4
 800532a:	d50a      	bpl.n	8005342 <_printf_i+0xce>
 800532c:	6805      	ldr	r5, [r0, #0]
 800532e:	600b      	str	r3, [r1, #0]
 8005330:	2d00      	cmp	r5, #0
 8005332:	da03      	bge.n	800533c <_printf_i+0xc8>
 8005334:	232d      	movs	r3, #45	; 0x2d
 8005336:	426d      	negs	r5, r5
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	485e      	ldr	r0, [pc, #376]	; (80054b8 <_printf_i+0x244>)
 800533e:	230a      	movs	r3, #10
 8005340:	e019      	b.n	8005376 <_printf_i+0x102>
 8005342:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005346:	6805      	ldr	r5, [r0, #0]
 8005348:	600b      	str	r3, [r1, #0]
 800534a:	bf18      	it	ne
 800534c:	b22d      	sxthne	r5, r5
 800534e:	e7ef      	b.n	8005330 <_printf_i+0xbc>
 8005350:	680b      	ldr	r3, [r1, #0]
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	1d18      	adds	r0, r3, #4
 8005356:	6008      	str	r0, [r1, #0]
 8005358:	0628      	lsls	r0, r5, #24
 800535a:	d501      	bpl.n	8005360 <_printf_i+0xec>
 800535c:	681d      	ldr	r5, [r3, #0]
 800535e:	e002      	b.n	8005366 <_printf_i+0xf2>
 8005360:	0669      	lsls	r1, r5, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0xe8>
 8005364:	881d      	ldrh	r5, [r3, #0]
 8005366:	4854      	ldr	r0, [pc, #336]	; (80054b8 <_printf_i+0x244>)
 8005368:	2f6f      	cmp	r7, #111	; 0x6f
 800536a:	bf0c      	ite	eq
 800536c:	2308      	moveq	r3, #8
 800536e:	230a      	movne	r3, #10
 8005370:	2100      	movs	r1, #0
 8005372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005376:	6866      	ldr	r6, [r4, #4]
 8005378:	60a6      	str	r6, [r4, #8]
 800537a:	2e00      	cmp	r6, #0
 800537c:	bfa2      	ittt	ge
 800537e:	6821      	ldrge	r1, [r4, #0]
 8005380:	f021 0104 	bicge.w	r1, r1, #4
 8005384:	6021      	strge	r1, [r4, #0]
 8005386:	b90d      	cbnz	r5, 800538c <_printf_i+0x118>
 8005388:	2e00      	cmp	r6, #0
 800538a:	d04d      	beq.n	8005428 <_printf_i+0x1b4>
 800538c:	4616      	mov	r6, r2
 800538e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005392:	fb03 5711 	mls	r7, r3, r1, r5
 8005396:	5dc7      	ldrb	r7, [r0, r7]
 8005398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800539c:	462f      	mov	r7, r5
 800539e:	42bb      	cmp	r3, r7
 80053a0:	460d      	mov	r5, r1
 80053a2:	d9f4      	bls.n	800538e <_printf_i+0x11a>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d10b      	bne.n	80053c0 <_printf_i+0x14c>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	07df      	lsls	r7, r3, #31
 80053ac:	d508      	bpl.n	80053c0 <_printf_i+0x14c>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	6861      	ldr	r1, [r4, #4]
 80053b2:	4299      	cmp	r1, r3
 80053b4:	bfde      	ittt	le
 80053b6:	2330      	movle	r3, #48	; 0x30
 80053b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053c0:	1b92      	subs	r2, r2, r6
 80053c2:	6122      	str	r2, [r4, #16]
 80053c4:	f8cd a000 	str.w	sl, [sp]
 80053c8:	464b      	mov	r3, r9
 80053ca:	aa03      	add	r2, sp, #12
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f7ff fee2 	bl	8005198 <_printf_common>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d14c      	bne.n	8005472 <_printf_i+0x1fe>
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	b004      	add	sp, #16
 80053de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e2:	4835      	ldr	r0, [pc, #212]	; (80054b8 <_printf_i+0x244>)
 80053e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	680e      	ldr	r6, [r1, #0]
 80053ec:	061f      	lsls	r7, r3, #24
 80053ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80053f2:	600e      	str	r6, [r1, #0]
 80053f4:	d514      	bpl.n	8005420 <_printf_i+0x1ac>
 80053f6:	07d9      	lsls	r1, r3, #31
 80053f8:	bf44      	itt	mi
 80053fa:	f043 0320 	orrmi.w	r3, r3, #32
 80053fe:	6023      	strmi	r3, [r4, #0]
 8005400:	b91d      	cbnz	r5, 800540a <_printf_i+0x196>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	f023 0320 	bic.w	r3, r3, #32
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	2310      	movs	r3, #16
 800540c:	e7b0      	b.n	8005370 <_printf_i+0xfc>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	2378      	movs	r3, #120	; 0x78
 8005418:	4828      	ldr	r0, [pc, #160]	; (80054bc <_printf_i+0x248>)
 800541a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800541e:	e7e3      	b.n	80053e8 <_printf_i+0x174>
 8005420:	065e      	lsls	r6, r3, #25
 8005422:	bf48      	it	mi
 8005424:	b2ad      	uxthmi	r5, r5
 8005426:	e7e6      	b.n	80053f6 <_printf_i+0x182>
 8005428:	4616      	mov	r6, r2
 800542a:	e7bb      	b.n	80053a4 <_printf_i+0x130>
 800542c:	680b      	ldr	r3, [r1, #0]
 800542e:	6826      	ldr	r6, [r4, #0]
 8005430:	6960      	ldr	r0, [r4, #20]
 8005432:	1d1d      	adds	r5, r3, #4
 8005434:	600d      	str	r5, [r1, #0]
 8005436:	0635      	lsls	r5, r6, #24
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	d501      	bpl.n	8005440 <_printf_i+0x1cc>
 800543c:	6018      	str	r0, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0x1d2>
 8005440:	0671      	lsls	r1, r6, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0x1c8>
 8005444:	8018      	strh	r0, [r3, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	4616      	mov	r6, r2
 800544c:	e7ba      	b.n	80053c4 <_printf_i+0x150>
 800544e:	680b      	ldr	r3, [r1, #0]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	600a      	str	r2, [r1, #0]
 8005454:	681e      	ldr	r6, [r3, #0]
 8005456:	6862      	ldr	r2, [r4, #4]
 8005458:	2100      	movs	r1, #0
 800545a:	4630      	mov	r0, r6
 800545c:	f7fa fed8 	bl	8000210 <memchr>
 8005460:	b108      	cbz	r0, 8005466 <_printf_i+0x1f2>
 8005462:	1b80      	subs	r0, r0, r6
 8005464:	6060      	str	r0, [r4, #4]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	2300      	movs	r3, #0
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	e7a8      	b.n	80053c4 <_printf_i+0x150>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d0ab      	beq.n	80053d8 <_printf_i+0x164>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	079b      	lsls	r3, r3, #30
 8005484:	d413      	bmi.n	80054ae <_printf_i+0x23a>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e7a4      	b.n	80053dc <_printf_i+0x168>
 8005492:	2301      	movs	r3, #1
 8005494:	4632      	mov	r2, r6
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d09b      	beq.n	80053d8 <_printf_i+0x164>
 80054a0:	3501      	adds	r5, #1
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	9903      	ldr	r1, [sp, #12]
 80054a6:	1a5b      	subs	r3, r3, r1
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	dcf2      	bgt.n	8005492 <_printf_i+0x21e>
 80054ac:	e7eb      	b.n	8005486 <_printf_i+0x212>
 80054ae:	2500      	movs	r5, #0
 80054b0:	f104 0619 	add.w	r6, r4, #25
 80054b4:	e7f5      	b.n	80054a2 <_printf_i+0x22e>
 80054b6:	bf00      	nop
 80054b8:	08005f55 	.word	0x08005f55
 80054bc:	08005f66 	.word	0x08005f66

080054c0 <__swbuf_r>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	460e      	mov	r6, r1
 80054c4:	4614      	mov	r4, r2
 80054c6:	4605      	mov	r5, r0
 80054c8:	b118      	cbz	r0, 80054d2 <__swbuf_r+0x12>
 80054ca:	6983      	ldr	r3, [r0, #24]
 80054cc:	b90b      	cbnz	r3, 80054d2 <__swbuf_r+0x12>
 80054ce:	f000 f9d9 	bl	8005884 <__sinit>
 80054d2:	4b21      	ldr	r3, [pc, #132]	; (8005558 <__swbuf_r+0x98>)
 80054d4:	429c      	cmp	r4, r3
 80054d6:	d12b      	bne.n	8005530 <__swbuf_r+0x70>
 80054d8:	686c      	ldr	r4, [r5, #4]
 80054da:	69a3      	ldr	r3, [r4, #24]
 80054dc:	60a3      	str	r3, [r4, #8]
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	071a      	lsls	r2, r3, #28
 80054e2:	d52f      	bpl.n	8005544 <__swbuf_r+0x84>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	b36b      	cbz	r3, 8005544 <__swbuf_r+0x84>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	1ac0      	subs	r0, r0, r3
 80054ee:	6963      	ldr	r3, [r4, #20]
 80054f0:	b2f6      	uxtb	r6, r6
 80054f2:	4283      	cmp	r3, r0
 80054f4:	4637      	mov	r7, r6
 80054f6:	dc04      	bgt.n	8005502 <__swbuf_r+0x42>
 80054f8:	4621      	mov	r1, r4
 80054fa:	4628      	mov	r0, r5
 80054fc:	f000 f92e 	bl	800575c <_fflush_r>
 8005500:	bb30      	cbnz	r0, 8005550 <__swbuf_r+0x90>
 8005502:	68a3      	ldr	r3, [r4, #8]
 8005504:	3b01      	subs	r3, #1
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	6022      	str	r2, [r4, #0]
 800550e:	701e      	strb	r6, [r3, #0]
 8005510:	6963      	ldr	r3, [r4, #20]
 8005512:	3001      	adds	r0, #1
 8005514:	4283      	cmp	r3, r0
 8005516:	d004      	beq.n	8005522 <__swbuf_r+0x62>
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	07db      	lsls	r3, r3, #31
 800551c:	d506      	bpl.n	800552c <__swbuf_r+0x6c>
 800551e:	2e0a      	cmp	r6, #10
 8005520:	d104      	bne.n	800552c <__swbuf_r+0x6c>
 8005522:	4621      	mov	r1, r4
 8005524:	4628      	mov	r0, r5
 8005526:	f000 f919 	bl	800575c <_fflush_r>
 800552a:	b988      	cbnz	r0, 8005550 <__swbuf_r+0x90>
 800552c:	4638      	mov	r0, r7
 800552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <__swbuf_r+0x9c>)
 8005532:	429c      	cmp	r4, r3
 8005534:	d101      	bne.n	800553a <__swbuf_r+0x7a>
 8005536:	68ac      	ldr	r4, [r5, #8]
 8005538:	e7cf      	b.n	80054da <__swbuf_r+0x1a>
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <__swbuf_r+0xa0>)
 800553c:	429c      	cmp	r4, r3
 800553e:	bf08      	it	eq
 8005540:	68ec      	ldreq	r4, [r5, #12]
 8005542:	e7ca      	b.n	80054da <__swbuf_r+0x1a>
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f000 f80c 	bl	8005564 <__swsetup_r>
 800554c:	2800      	cmp	r0, #0
 800554e:	d0cb      	beq.n	80054e8 <__swbuf_r+0x28>
 8005550:	f04f 37ff 	mov.w	r7, #4294967295
 8005554:	e7ea      	b.n	800552c <__swbuf_r+0x6c>
 8005556:	bf00      	nop
 8005558:	08005f98 	.word	0x08005f98
 800555c:	08005fb8 	.word	0x08005fb8
 8005560:	08005f78 	.word	0x08005f78

08005564 <__swsetup_r>:
 8005564:	4b32      	ldr	r3, [pc, #200]	; (8005630 <__swsetup_r+0xcc>)
 8005566:	b570      	push	{r4, r5, r6, lr}
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	4606      	mov	r6, r0
 800556c:	460c      	mov	r4, r1
 800556e:	b125      	cbz	r5, 800557a <__swsetup_r+0x16>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	b913      	cbnz	r3, 800557a <__swsetup_r+0x16>
 8005574:	4628      	mov	r0, r5
 8005576:	f000 f985 	bl	8005884 <__sinit>
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <__swsetup_r+0xd0>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d10f      	bne.n	80055a0 <__swsetup_r+0x3c>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005588:	0719      	lsls	r1, r3, #28
 800558a:	d42c      	bmi.n	80055e6 <__swsetup_r+0x82>
 800558c:	06dd      	lsls	r5, r3, #27
 800558e:	d411      	bmi.n	80055b4 <__swsetup_r+0x50>
 8005590:	2309      	movs	r3, #9
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	e03e      	b.n	800561e <__swsetup_r+0xba>
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <__swsetup_r+0xd4>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	d101      	bne.n	80055aa <__swsetup_r+0x46>
 80055a6:	68ac      	ldr	r4, [r5, #8]
 80055a8:	e7eb      	b.n	8005582 <__swsetup_r+0x1e>
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <__swsetup_r+0xd8>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	bf08      	it	eq
 80055b0:	68ec      	ldreq	r4, [r5, #12]
 80055b2:	e7e6      	b.n	8005582 <__swsetup_r+0x1e>
 80055b4:	0758      	lsls	r0, r3, #29
 80055b6:	d512      	bpl.n	80055de <__swsetup_r+0x7a>
 80055b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ba:	b141      	cbz	r1, 80055ce <__swsetup_r+0x6a>
 80055bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d002      	beq.n	80055ca <__swsetup_r+0x66>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 fa61 	bl	8005a8c <_free_r>
 80055ca:	2300      	movs	r3, #0
 80055cc:	6363      	str	r3, [r4, #52]	; 0x34
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	2300      	movs	r3, #0
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f043 0308 	orr.w	r3, r3, #8
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	b94b      	cbnz	r3, 80055fe <__swsetup_r+0x9a>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d003      	beq.n	80055fe <__swsetup_r+0x9a>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 fa07 	bl	8005a0c <__smakebuf_r>
 80055fe:	89a0      	ldrh	r0, [r4, #12]
 8005600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005604:	f010 0301 	ands.w	r3, r0, #1
 8005608:	d00a      	beq.n	8005620 <__swsetup_r+0xbc>
 800560a:	2300      	movs	r3, #0
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6963      	ldr	r3, [r4, #20]
 8005610:	425b      	negs	r3, r3
 8005612:	61a3      	str	r3, [r4, #24]
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	b943      	cbnz	r3, 800562a <__swsetup_r+0xc6>
 8005618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800561c:	d1ba      	bne.n	8005594 <__swsetup_r+0x30>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	0781      	lsls	r1, r0, #30
 8005622:	bf58      	it	pl
 8005624:	6963      	ldrpl	r3, [r4, #20]
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	e7f4      	b.n	8005614 <__swsetup_r+0xb0>
 800562a:	2000      	movs	r0, #0
 800562c:	e7f7      	b.n	800561e <__swsetup_r+0xba>
 800562e:	bf00      	nop
 8005630:	20000230 	.word	0x20000230
 8005634:	08005f98 	.word	0x08005f98
 8005638:	08005fb8 	.word	0x08005fb8
 800563c:	08005f78 	.word	0x08005f78

08005640 <abort>:
 8005640:	b508      	push	{r3, lr}
 8005642:	2006      	movs	r0, #6
 8005644:	f000 fb04 	bl	8005c50 <raise>
 8005648:	2001      	movs	r0, #1
 800564a:	f7fb fcd1 	bl	8000ff0 <_exit>
	...

08005650 <__sflush_r>:
 8005650:	898a      	ldrh	r2, [r1, #12]
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	0710      	lsls	r0, r2, #28
 800565a:	460c      	mov	r4, r1
 800565c:	d458      	bmi.n	8005710 <__sflush_r+0xc0>
 800565e:	684b      	ldr	r3, [r1, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dc05      	bgt.n	8005670 <__sflush_r+0x20>
 8005664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	dc02      	bgt.n	8005670 <__sflush_r+0x20>
 800566a:	2000      	movs	r0, #0
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005672:	2e00      	cmp	r6, #0
 8005674:	d0f9      	beq.n	800566a <__sflush_r+0x1a>
 8005676:	2300      	movs	r3, #0
 8005678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800567c:	682f      	ldr	r7, [r5, #0]
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	d032      	beq.n	80056e8 <__sflush_r+0x98>
 8005682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	075a      	lsls	r2, r3, #29
 8005688:	d505      	bpl.n	8005696 <__sflush_r+0x46>
 800568a:	6863      	ldr	r3, [r4, #4]
 800568c:	1ac0      	subs	r0, r0, r3
 800568e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005690:	b10b      	cbz	r3, 8005696 <__sflush_r+0x46>
 8005692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005694:	1ac0      	subs	r0, r0, r3
 8005696:	2300      	movs	r3, #0
 8005698:	4602      	mov	r2, r0
 800569a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569c:	6a21      	ldr	r1, [r4, #32]
 800569e:	4628      	mov	r0, r5
 80056a0:	47b0      	blx	r6
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	d106      	bne.n	80056b6 <__sflush_r+0x66>
 80056a8:	6829      	ldr	r1, [r5, #0]
 80056aa:	291d      	cmp	r1, #29
 80056ac:	d82c      	bhi.n	8005708 <__sflush_r+0xb8>
 80056ae:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <__sflush_r+0x108>)
 80056b0:	40ca      	lsrs	r2, r1
 80056b2:	07d6      	lsls	r6, r2, #31
 80056b4:	d528      	bpl.n	8005708 <__sflush_r+0xb8>
 80056b6:	2200      	movs	r2, #0
 80056b8:	6062      	str	r2, [r4, #4]
 80056ba:	04d9      	lsls	r1, r3, #19
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	d504      	bpl.n	80056cc <__sflush_r+0x7c>
 80056c2:	1c42      	adds	r2, r0, #1
 80056c4:	d101      	bne.n	80056ca <__sflush_r+0x7a>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	b903      	cbnz	r3, 80056cc <__sflush_r+0x7c>
 80056ca:	6560      	str	r0, [r4, #84]	; 0x54
 80056cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	2900      	cmp	r1, #0
 80056d2:	d0ca      	beq.n	800566a <__sflush_r+0x1a>
 80056d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d8:	4299      	cmp	r1, r3
 80056da:	d002      	beq.n	80056e2 <__sflush_r+0x92>
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f9d5 	bl	8005a8c <_free_r>
 80056e2:	2000      	movs	r0, #0
 80056e4:	6360      	str	r0, [r4, #52]	; 0x34
 80056e6:	e7c1      	b.n	800566c <__sflush_r+0x1c>
 80056e8:	6a21      	ldr	r1, [r4, #32]
 80056ea:	2301      	movs	r3, #1
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b0      	blx	r6
 80056f0:	1c41      	adds	r1, r0, #1
 80056f2:	d1c7      	bne.n	8005684 <__sflush_r+0x34>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c4      	beq.n	8005684 <__sflush_r+0x34>
 80056fa:	2b1d      	cmp	r3, #29
 80056fc:	d001      	beq.n	8005702 <__sflush_r+0xb2>
 80056fe:	2b16      	cmp	r3, #22
 8005700:	d101      	bne.n	8005706 <__sflush_r+0xb6>
 8005702:	602f      	str	r7, [r5, #0]
 8005704:	e7b1      	b.n	800566a <__sflush_r+0x1a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	e7ad      	b.n	800566c <__sflush_r+0x1c>
 8005710:	690f      	ldr	r7, [r1, #16]
 8005712:	2f00      	cmp	r7, #0
 8005714:	d0a9      	beq.n	800566a <__sflush_r+0x1a>
 8005716:	0793      	lsls	r3, r2, #30
 8005718:	680e      	ldr	r6, [r1, #0]
 800571a:	bf08      	it	eq
 800571c:	694b      	ldreq	r3, [r1, #20]
 800571e:	600f      	str	r7, [r1, #0]
 8005720:	bf18      	it	ne
 8005722:	2300      	movne	r3, #0
 8005724:	eba6 0807 	sub.w	r8, r6, r7
 8005728:	608b      	str	r3, [r1, #8]
 800572a:	f1b8 0f00 	cmp.w	r8, #0
 800572e:	dd9c      	ble.n	800566a <__sflush_r+0x1a>
 8005730:	6a21      	ldr	r1, [r4, #32]
 8005732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005734:	4643      	mov	r3, r8
 8005736:	463a      	mov	r2, r7
 8005738:	4628      	mov	r0, r5
 800573a:	47b0      	blx	r6
 800573c:	2800      	cmp	r0, #0
 800573e:	dc06      	bgt.n	800574e <__sflush_r+0xfe>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	e78e      	b.n	800566c <__sflush_r+0x1c>
 800574e:	4407      	add	r7, r0
 8005750:	eba8 0800 	sub.w	r8, r8, r0
 8005754:	e7e9      	b.n	800572a <__sflush_r+0xda>
 8005756:	bf00      	nop
 8005758:	20400001 	.word	0x20400001

0800575c <_fflush_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b913      	cbnz	r3, 800576c <_fflush_r+0x10>
 8005766:	2500      	movs	r5, #0
 8005768:	4628      	mov	r0, r5
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	b118      	cbz	r0, 8005776 <_fflush_r+0x1a>
 800576e:	6983      	ldr	r3, [r0, #24]
 8005770:	b90b      	cbnz	r3, 8005776 <_fflush_r+0x1a>
 8005772:	f000 f887 	bl	8005884 <__sinit>
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <_fflush_r+0x6c>)
 8005778:	429c      	cmp	r4, r3
 800577a:	d11b      	bne.n	80057b4 <_fflush_r+0x58>
 800577c:	686c      	ldr	r4, [r5, #4]
 800577e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0ef      	beq.n	8005766 <_fflush_r+0xa>
 8005786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005788:	07d0      	lsls	r0, r2, #31
 800578a:	d404      	bmi.n	8005796 <_fflush_r+0x3a>
 800578c:	0599      	lsls	r1, r3, #22
 800578e:	d402      	bmi.n	8005796 <_fflush_r+0x3a>
 8005790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005792:	f000 f915 	bl	80059c0 <__retarget_lock_acquire_recursive>
 8005796:	4628      	mov	r0, r5
 8005798:	4621      	mov	r1, r4
 800579a:	f7ff ff59 	bl	8005650 <__sflush_r>
 800579e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a0:	07da      	lsls	r2, r3, #31
 80057a2:	4605      	mov	r5, r0
 80057a4:	d4e0      	bmi.n	8005768 <_fflush_r+0xc>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	059b      	lsls	r3, r3, #22
 80057aa:	d4dd      	bmi.n	8005768 <_fflush_r+0xc>
 80057ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ae:	f000 f908 	bl	80059c2 <__retarget_lock_release_recursive>
 80057b2:	e7d9      	b.n	8005768 <_fflush_r+0xc>
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <_fflush_r+0x70>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d101      	bne.n	80057be <_fflush_r+0x62>
 80057ba:	68ac      	ldr	r4, [r5, #8]
 80057bc:	e7df      	b.n	800577e <_fflush_r+0x22>
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <_fflush_r+0x74>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	bf08      	it	eq
 80057c4:	68ec      	ldreq	r4, [r5, #12]
 80057c6:	e7da      	b.n	800577e <_fflush_r+0x22>
 80057c8:	08005f98 	.word	0x08005f98
 80057cc:	08005fb8 	.word	0x08005fb8
 80057d0:	08005f78 	.word	0x08005f78

080057d4 <std>:
 80057d4:	2300      	movs	r3, #0
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	e9c0 3300 	strd	r3, r3, [r0]
 80057de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e2:	6083      	str	r3, [r0, #8]
 80057e4:	8181      	strh	r1, [r0, #12]
 80057e6:	6643      	str	r3, [r0, #100]	; 0x64
 80057e8:	81c2      	strh	r2, [r0, #14]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2208      	movs	r2, #8
 80057f0:	305c      	adds	r0, #92	; 0x5c
 80057f2:	f7ff fb6f 	bl	8004ed4 <memset>
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std+0x38>)
 80057f8:	6263      	str	r3, [r4, #36]	; 0x24
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <std+0x3c>)
 80057fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <std+0x40>)
 8005800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <std+0x44>)
 8005804:	6224      	str	r4, [r4, #32]
 8005806:	6323      	str	r3, [r4, #48]	; 0x30
 8005808:	bd10      	pop	{r4, pc}
 800580a:	bf00      	nop
 800580c:	08005c89 	.word	0x08005c89
 8005810:	08005cab 	.word	0x08005cab
 8005814:	08005ce3 	.word	0x08005ce3
 8005818:	08005d07 	.word	0x08005d07

0800581c <_cleanup_r>:
 800581c:	4901      	ldr	r1, [pc, #4]	; (8005824 <_cleanup_r+0x8>)
 800581e:	f000 b8af 	b.w	8005980 <_fwalk_reent>
 8005822:	bf00      	nop
 8005824:	0800575d 	.word	0x0800575d

08005828 <__sfmoreglue>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	1e4a      	subs	r2, r1, #1
 800582c:	2568      	movs	r5, #104	; 0x68
 800582e:	4355      	muls	r5, r2
 8005830:	460e      	mov	r6, r1
 8005832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005836:	f000 f979 	bl	8005b2c <_malloc_r>
 800583a:	4604      	mov	r4, r0
 800583c:	b140      	cbz	r0, 8005850 <__sfmoreglue+0x28>
 800583e:	2100      	movs	r1, #0
 8005840:	e9c0 1600 	strd	r1, r6, [r0]
 8005844:	300c      	adds	r0, #12
 8005846:	60a0      	str	r0, [r4, #8]
 8005848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800584c:	f7ff fb42 	bl	8004ed4 <memset>
 8005850:	4620      	mov	r0, r4
 8005852:	bd70      	pop	{r4, r5, r6, pc}

08005854 <__sfp_lock_acquire>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sfp_lock_acquire+0x8>)
 8005856:	f000 b8b3 	b.w	80059c0 <__retarget_lock_acquire_recursive>
 800585a:	bf00      	nop
 800585c:	20000dec 	.word	0x20000dec

08005860 <__sfp_lock_release>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__sfp_lock_release+0x8>)
 8005862:	f000 b8ae 	b.w	80059c2 <__retarget_lock_release_recursive>
 8005866:	bf00      	nop
 8005868:	20000dec 	.word	0x20000dec

0800586c <__sinit_lock_acquire>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__sinit_lock_acquire+0x8>)
 800586e:	f000 b8a7 	b.w	80059c0 <__retarget_lock_acquire_recursive>
 8005872:	bf00      	nop
 8005874:	20000de7 	.word	0x20000de7

08005878 <__sinit_lock_release>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__sinit_lock_release+0x8>)
 800587a:	f000 b8a2 	b.w	80059c2 <__retarget_lock_release_recursive>
 800587e:	bf00      	nop
 8005880:	20000de7 	.word	0x20000de7

08005884 <__sinit>:
 8005884:	b510      	push	{r4, lr}
 8005886:	4604      	mov	r4, r0
 8005888:	f7ff fff0 	bl	800586c <__sinit_lock_acquire>
 800588c:	69a3      	ldr	r3, [r4, #24]
 800588e:	b11b      	cbz	r3, 8005898 <__sinit+0x14>
 8005890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005894:	f7ff bff0 	b.w	8005878 <__sinit_lock_release>
 8005898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800589c:	6523      	str	r3, [r4, #80]	; 0x50
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <__sinit+0x68>)
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <__sinit+0x6c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80058a6:	42a3      	cmp	r3, r4
 80058a8:	bf04      	itt	eq
 80058aa:	2301      	moveq	r3, #1
 80058ac:	61a3      	streq	r3, [r4, #24]
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 f820 	bl	80058f4 <__sfp>
 80058b4:	6060      	str	r0, [r4, #4]
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 f81c 	bl	80058f4 <__sfp>
 80058bc:	60a0      	str	r0, [r4, #8]
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f818 	bl	80058f4 <__sfp>
 80058c4:	2200      	movs	r2, #0
 80058c6:	60e0      	str	r0, [r4, #12]
 80058c8:	2104      	movs	r1, #4
 80058ca:	6860      	ldr	r0, [r4, #4]
 80058cc:	f7ff ff82 	bl	80057d4 <std>
 80058d0:	68a0      	ldr	r0, [r4, #8]
 80058d2:	2201      	movs	r2, #1
 80058d4:	2109      	movs	r1, #9
 80058d6:	f7ff ff7d 	bl	80057d4 <std>
 80058da:	68e0      	ldr	r0, [r4, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	2112      	movs	r1, #18
 80058e0:	f7ff ff78 	bl	80057d4 <std>
 80058e4:	2301      	movs	r3, #1
 80058e6:	61a3      	str	r3, [r4, #24]
 80058e8:	e7d2      	b.n	8005890 <__sinit+0xc>
 80058ea:	bf00      	nop
 80058ec:	08005f40 	.word	0x08005f40
 80058f0:	0800581d 	.word	0x0800581d

080058f4 <__sfp>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	4607      	mov	r7, r0
 80058f8:	f7ff ffac 	bl	8005854 <__sfp_lock_acquire>
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <__sfp+0x84>)
 80058fe:	681e      	ldr	r6, [r3, #0]
 8005900:	69b3      	ldr	r3, [r6, #24]
 8005902:	b913      	cbnz	r3, 800590a <__sfp+0x16>
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff ffbd 	bl	8005884 <__sinit>
 800590a:	3648      	adds	r6, #72	; 0x48
 800590c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005910:	3b01      	subs	r3, #1
 8005912:	d503      	bpl.n	800591c <__sfp+0x28>
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	b30b      	cbz	r3, 800595c <__sfp+0x68>
 8005918:	6836      	ldr	r6, [r6, #0]
 800591a:	e7f7      	b.n	800590c <__sfp+0x18>
 800591c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005920:	b9d5      	cbnz	r5, 8005958 <__sfp+0x64>
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <__sfp+0x88>)
 8005924:	60e3      	str	r3, [r4, #12]
 8005926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800592a:	6665      	str	r5, [r4, #100]	; 0x64
 800592c:	f000 f847 	bl	80059be <__retarget_lock_init_recursive>
 8005930:	f7ff ff96 	bl	8005860 <__sfp_lock_release>
 8005934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800593c:	6025      	str	r5, [r4, #0]
 800593e:	61a5      	str	r5, [r4, #24]
 8005940:	2208      	movs	r2, #8
 8005942:	4629      	mov	r1, r5
 8005944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005948:	f7ff fac4 	bl	8004ed4 <memset>
 800594c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005954:	4620      	mov	r0, r4
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005958:	3468      	adds	r4, #104	; 0x68
 800595a:	e7d9      	b.n	8005910 <__sfp+0x1c>
 800595c:	2104      	movs	r1, #4
 800595e:	4638      	mov	r0, r7
 8005960:	f7ff ff62 	bl	8005828 <__sfmoreglue>
 8005964:	4604      	mov	r4, r0
 8005966:	6030      	str	r0, [r6, #0]
 8005968:	2800      	cmp	r0, #0
 800596a:	d1d5      	bne.n	8005918 <__sfp+0x24>
 800596c:	f7ff ff78 	bl	8005860 <__sfp_lock_release>
 8005970:	230c      	movs	r3, #12
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	e7ee      	b.n	8005954 <__sfp+0x60>
 8005976:	bf00      	nop
 8005978:	08005f40 	.word	0x08005f40
 800597c:	ffff0001 	.word	0xffff0001

08005980 <_fwalk_reent>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	4606      	mov	r6, r0
 8005986:	4688      	mov	r8, r1
 8005988:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800598c:	2700      	movs	r7, #0
 800598e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005992:	f1b9 0901 	subs.w	r9, r9, #1
 8005996:	d505      	bpl.n	80059a4 <_fwalk_reent+0x24>
 8005998:	6824      	ldr	r4, [r4, #0]
 800599a:	2c00      	cmp	r4, #0
 800599c:	d1f7      	bne.n	800598e <_fwalk_reent+0xe>
 800599e:	4638      	mov	r0, r7
 80059a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a4:	89ab      	ldrh	r3, [r5, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d907      	bls.n	80059ba <_fwalk_reent+0x3a>
 80059aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059ae:	3301      	adds	r3, #1
 80059b0:	d003      	beq.n	80059ba <_fwalk_reent+0x3a>
 80059b2:	4629      	mov	r1, r5
 80059b4:	4630      	mov	r0, r6
 80059b6:	47c0      	blx	r8
 80059b8:	4307      	orrs	r7, r0
 80059ba:	3568      	adds	r5, #104	; 0x68
 80059bc:	e7e9      	b.n	8005992 <_fwalk_reent+0x12>

080059be <__retarget_lock_init_recursive>:
 80059be:	4770      	bx	lr

080059c0 <__retarget_lock_acquire_recursive>:
 80059c0:	4770      	bx	lr

080059c2 <__retarget_lock_release_recursive>:
 80059c2:	4770      	bx	lr

080059c4 <__swhatbuf_r>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	460e      	mov	r6, r1
 80059c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059cc:	2900      	cmp	r1, #0
 80059ce:	b096      	sub	sp, #88	; 0x58
 80059d0:	4614      	mov	r4, r2
 80059d2:	461d      	mov	r5, r3
 80059d4:	da07      	bge.n	80059e6 <__swhatbuf_r+0x22>
 80059d6:	2300      	movs	r3, #0
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	89b3      	ldrh	r3, [r6, #12]
 80059dc:	061a      	lsls	r2, r3, #24
 80059de:	d410      	bmi.n	8005a02 <__swhatbuf_r+0x3e>
 80059e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e4:	e00e      	b.n	8005a04 <__swhatbuf_r+0x40>
 80059e6:	466a      	mov	r2, sp
 80059e8:	f000 f9b4 	bl	8005d54 <_fstat_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	dbf2      	blt.n	80059d6 <__swhatbuf_r+0x12>
 80059f0:	9a01      	ldr	r2, [sp, #4]
 80059f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059fa:	425a      	negs	r2, r3
 80059fc:	415a      	adcs	r2, r3
 80059fe:	602a      	str	r2, [r5, #0]
 8005a00:	e7ee      	b.n	80059e0 <__swhatbuf_r+0x1c>
 8005a02:	2340      	movs	r3, #64	; 0x40
 8005a04:	2000      	movs	r0, #0
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	b016      	add	sp, #88	; 0x58
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}

08005a0c <__smakebuf_r>:
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a10:	079d      	lsls	r5, r3, #30
 8005a12:	4606      	mov	r6, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	d507      	bpl.n	8005a28 <__smakebuf_r+0x1c>
 8005a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	6123      	str	r3, [r4, #16]
 8005a20:	2301      	movs	r3, #1
 8005a22:	6163      	str	r3, [r4, #20]
 8005a24:	b002      	add	sp, #8
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	ab01      	add	r3, sp, #4
 8005a2a:	466a      	mov	r2, sp
 8005a2c:	f7ff ffca 	bl	80059c4 <__swhatbuf_r>
 8005a30:	9900      	ldr	r1, [sp, #0]
 8005a32:	4605      	mov	r5, r0
 8005a34:	4630      	mov	r0, r6
 8005a36:	f000 f879 	bl	8005b2c <_malloc_r>
 8005a3a:	b948      	cbnz	r0, 8005a50 <__smakebuf_r+0x44>
 8005a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a40:	059a      	lsls	r2, r3, #22
 8005a42:	d4ef      	bmi.n	8005a24 <__smakebuf_r+0x18>
 8005a44:	f023 0303 	bic.w	r3, r3, #3
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e7e3      	b.n	8005a18 <__smakebuf_r+0xc>
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <__smakebuf_r+0x7c>)
 8005a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	6020      	str	r0, [r4, #0]
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	9b00      	ldr	r3, [sp, #0]
 8005a60:	6163      	str	r3, [r4, #20]
 8005a62:	9b01      	ldr	r3, [sp, #4]
 8005a64:	6120      	str	r0, [r4, #16]
 8005a66:	b15b      	cbz	r3, 8005a80 <__smakebuf_r+0x74>
 8005a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f000 f983 	bl	8005d78 <_isatty_r>
 8005a72:	b128      	cbz	r0, 8005a80 <__smakebuf_r+0x74>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	89a0      	ldrh	r0, [r4, #12]
 8005a82:	4305      	orrs	r5, r0
 8005a84:	81a5      	strh	r5, [r4, #12]
 8005a86:	e7cd      	b.n	8005a24 <__smakebuf_r+0x18>
 8005a88:	0800581d 	.word	0x0800581d

08005a8c <_free_r>:
 8005a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	d048      	beq.n	8005b24 <_free_r+0x98>
 8005a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a96:	9001      	str	r0, [sp, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a9e:	bfb8      	it	lt
 8005aa0:	18e4      	addlt	r4, r4, r3
 8005aa2:	f000 f98b 	bl	8005dbc <__malloc_lock>
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <_free_r+0x9c>)
 8005aa8:	9801      	ldr	r0, [sp, #4]
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	4615      	mov	r5, r2
 8005aae:	b933      	cbnz	r3, 8005abe <_free_r+0x32>
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	6014      	str	r4, [r2, #0]
 8005ab4:	b003      	add	sp, #12
 8005ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aba:	f000 b985 	b.w	8005dc8 <__malloc_unlock>
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	d90b      	bls.n	8005ada <_free_r+0x4e>
 8005ac2:	6821      	ldr	r1, [r4, #0]
 8005ac4:	1862      	adds	r2, r4, r1
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	bf04      	itt	eq
 8005aca:	681a      	ldreq	r2, [r3, #0]
 8005acc:	685b      	ldreq	r3, [r3, #4]
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	bf04      	itt	eq
 8005ad2:	1852      	addeq	r2, r2, r1
 8005ad4:	6022      	streq	r2, [r4, #0]
 8005ad6:	602c      	str	r4, [r5, #0]
 8005ad8:	e7ec      	b.n	8005ab4 <_free_r+0x28>
 8005ada:	461a      	mov	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_free_r+0x58>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d9fa      	bls.n	8005ada <_free_r+0x4e>
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	1855      	adds	r5, r2, r1
 8005ae8:	42a5      	cmp	r5, r4
 8005aea:	d10b      	bne.n	8005b04 <_free_r+0x78>
 8005aec:	6824      	ldr	r4, [r4, #0]
 8005aee:	4421      	add	r1, r4
 8005af0:	1854      	adds	r4, r2, r1
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	d1dd      	bne.n	8005ab4 <_free_r+0x28>
 8005af8:	681c      	ldr	r4, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	6053      	str	r3, [r2, #4]
 8005afe:	4421      	add	r1, r4
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	e7d7      	b.n	8005ab4 <_free_r+0x28>
 8005b04:	d902      	bls.n	8005b0c <_free_r+0x80>
 8005b06:	230c      	movs	r3, #12
 8005b08:	6003      	str	r3, [r0, #0]
 8005b0a:	e7d3      	b.n	8005ab4 <_free_r+0x28>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	1961      	adds	r1, r4, r5
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf04      	itt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	bf04      	itt	eq
 8005b1c:	1949      	addeq	r1, r1, r5
 8005b1e:	6021      	streq	r1, [r4, #0]
 8005b20:	6054      	str	r4, [r2, #4]
 8005b22:	e7c7      	b.n	8005ab4 <_free_r+0x28>
 8005b24:	b003      	add	sp, #12
 8005b26:	bd30      	pop	{r4, r5, pc}
 8005b28:	20000bd4 	.word	0x20000bd4

08005b2c <_malloc_r>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	1ccd      	adds	r5, r1, #3
 8005b30:	f025 0503 	bic.w	r5, r5, #3
 8005b34:	3508      	adds	r5, #8
 8005b36:	2d0c      	cmp	r5, #12
 8005b38:	bf38      	it	cc
 8005b3a:	250c      	movcc	r5, #12
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	4606      	mov	r6, r0
 8005b40:	db01      	blt.n	8005b46 <_malloc_r+0x1a>
 8005b42:	42a9      	cmp	r1, r5
 8005b44:	d903      	bls.n	8005b4e <_malloc_r+0x22>
 8005b46:	230c      	movs	r3, #12
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4e:	f000 f935 	bl	8005dbc <__malloc_lock>
 8005b52:	4921      	ldr	r1, [pc, #132]	; (8005bd8 <_malloc_r+0xac>)
 8005b54:	680a      	ldr	r2, [r1, #0]
 8005b56:	4614      	mov	r4, r2
 8005b58:	b99c      	cbnz	r4, 8005b82 <_malloc_r+0x56>
 8005b5a:	4f20      	ldr	r7, [pc, #128]	; (8005bdc <_malloc_r+0xb0>)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	b923      	cbnz	r3, 8005b6a <_malloc_r+0x3e>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 f83c 	bl	8005be0 <_sbrk_r>
 8005b68:	6038      	str	r0, [r7, #0]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f837 	bl	8005be0 <_sbrk_r>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	d123      	bne.n	8005bbe <_malloc_r+0x92>
 8005b76:	230c      	movs	r3, #12
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f000 f924 	bl	8005dc8 <__malloc_unlock>
 8005b80:	e7e3      	b.n	8005b4a <_malloc_r+0x1e>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	1b5b      	subs	r3, r3, r5
 8005b86:	d417      	bmi.n	8005bb8 <_malloc_r+0x8c>
 8005b88:	2b0b      	cmp	r3, #11
 8005b8a:	d903      	bls.n	8005b94 <_malloc_r+0x68>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	441c      	add	r4, r3
 8005b90:	6025      	str	r5, [r4, #0]
 8005b92:	e004      	b.n	8005b9e <_malloc_r+0x72>
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	42a2      	cmp	r2, r4
 8005b98:	bf0c      	ite	eq
 8005b9a:	600b      	streq	r3, [r1, #0]
 8005b9c:	6053      	strne	r3, [r2, #4]
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f000 f912 	bl	8005dc8 <__malloc_unlock>
 8005ba4:	f104 000b 	add.w	r0, r4, #11
 8005ba8:	1d23      	adds	r3, r4, #4
 8005baa:	f020 0007 	bic.w	r0, r0, #7
 8005bae:	1ac2      	subs	r2, r0, r3
 8005bb0:	d0cc      	beq.n	8005b4c <_malloc_r+0x20>
 8005bb2:	1a1b      	subs	r3, r3, r0
 8005bb4:	50a3      	str	r3, [r4, r2]
 8005bb6:	e7c9      	b.n	8005b4c <_malloc_r+0x20>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	6864      	ldr	r4, [r4, #4]
 8005bbc:	e7cc      	b.n	8005b58 <_malloc_r+0x2c>
 8005bbe:	1cc4      	adds	r4, r0, #3
 8005bc0:	f024 0403 	bic.w	r4, r4, #3
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d0e3      	beq.n	8005b90 <_malloc_r+0x64>
 8005bc8:	1a21      	subs	r1, r4, r0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 f808 	bl	8005be0 <_sbrk_r>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d1dd      	bne.n	8005b90 <_malloc_r+0x64>
 8005bd4:	e7cf      	b.n	8005b76 <_malloc_r+0x4a>
 8005bd6:	bf00      	nop
 8005bd8:	20000bd4 	.word	0x20000bd4
 8005bdc:	20000bd8 	.word	0x20000bd8

08005be0 <_sbrk_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d06      	ldr	r5, [pc, #24]	; (8005bfc <_sbrk_r+0x1c>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	f7fb fa5c 	bl	80010a8 <_sbrk>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_sbrk_r+0x1a>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_sbrk_r+0x1a>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20000df0 	.word	0x20000df0

08005c00 <_raise_r>:
 8005c00:	291f      	cmp	r1, #31
 8005c02:	b538      	push	{r3, r4, r5, lr}
 8005c04:	4604      	mov	r4, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	d904      	bls.n	8005c14 <_raise_r+0x14>
 8005c0a:	2316      	movs	r3, #22
 8005c0c:	6003      	str	r3, [r0, #0]
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c16:	b112      	cbz	r2, 8005c1e <_raise_r+0x1e>
 8005c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c1c:	b94b      	cbnz	r3, 8005c32 <_raise_r+0x32>
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 f830 	bl	8005c84 <_getpid_r>
 8005c24:	462a      	mov	r2, r5
 8005c26:	4601      	mov	r1, r0
 8005c28:	4620      	mov	r0, r4
 8005c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c2e:	f000 b817 	b.w	8005c60 <_kill_r>
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d00a      	beq.n	8005c4c <_raise_r+0x4c>
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	d103      	bne.n	8005c42 <_raise_r+0x42>
 8005c3a:	2316      	movs	r3, #22
 8005c3c:	6003      	str	r3, [r0, #0]
 8005c3e:	2001      	movs	r0, #1
 8005c40:	e7e7      	b.n	8005c12 <_raise_r+0x12>
 8005c42:	2400      	movs	r4, #0
 8005c44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c48:	4628      	mov	r0, r5
 8005c4a:	4798      	blx	r3
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e7e0      	b.n	8005c12 <_raise_r+0x12>

08005c50 <raise>:
 8005c50:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <raise+0xc>)
 8005c52:	4601      	mov	r1, r0
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	f7ff bfd3 	b.w	8005c00 <_raise_r>
 8005c5a:	bf00      	nop
 8005c5c:	20000230 	.word	0x20000230

08005c60 <_kill_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	; (8005c80 <_kill_r+0x20>)
 8005c64:	2300      	movs	r3, #0
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	f7fb f9af 	bl	8000fd0 <_kill>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	d102      	bne.n	8005c7c <_kill_r+0x1c>
 8005c76:	682b      	ldr	r3, [r5, #0]
 8005c78:	b103      	cbz	r3, 8005c7c <_kill_r+0x1c>
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000df0 	.word	0x20000df0

08005c84 <_getpid_r>:
 8005c84:	f7fb b99c 	b.w	8000fc0 <_getpid>

08005c88 <__sread>:
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c90:	f000 f8a0 	bl	8005dd4 <_read_r>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	bfab      	itete	ge
 8005c98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c9c:	181b      	addge	r3, r3, r0
 8005c9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ca2:	bfac      	ite	ge
 8005ca4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ca6:	81a3      	strhlt	r3, [r4, #12]
 8005ca8:	bd10      	pop	{r4, pc}

08005caa <__swrite>:
 8005caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cae:	461f      	mov	r7, r3
 8005cb0:	898b      	ldrh	r3, [r1, #12]
 8005cb2:	05db      	lsls	r3, r3, #23
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4616      	mov	r6, r2
 8005cba:	d505      	bpl.n	8005cc8 <__swrite+0x1e>
 8005cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f000 f868 	bl	8005d98 <_lseek_r>
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	4632      	mov	r2, r6
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	4628      	mov	r0, r5
 8005cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cde:	f000 b817 	b.w	8005d10 <_write_r>

08005ce2 <__sseek>:
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cea:	f000 f855 	bl	8005d98 <_lseek_r>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	bf15      	itete	ne
 8005cf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cfe:	81a3      	strheq	r3, [r4, #12]
 8005d00:	bf18      	it	ne
 8005d02:	81a3      	strhne	r3, [r4, #12]
 8005d04:	bd10      	pop	{r4, pc}

08005d06 <__sclose>:
 8005d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0a:	f000 b813 	b.w	8005d34 <_close_r>
	...

08005d10 <_write_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d07      	ldr	r5, [pc, #28]	; (8005d30 <_write_r+0x20>)
 8005d14:	4604      	mov	r4, r0
 8005d16:	4608      	mov	r0, r1
 8005d18:	4611      	mov	r1, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f7fb fa0a 	bl	8001138 <_write>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_write_r+0x1e>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_write_r+0x1e>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	20000df0 	.word	0x20000df0

08005d34 <_close_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d06      	ldr	r5, [pc, #24]	; (8005d50 <_close_r+0x1c>)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7fb f97d 	bl	800103e <_close>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_close_r+0x1a>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_close_r+0x1a>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20000df0 	.word	0x20000df0

08005d54 <_fstat_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_fstat_r+0x20>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	f7fb f978 	bl	8001056 <_fstat>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d102      	bne.n	8005d70 <_fstat_r+0x1c>
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	b103      	cbz	r3, 8005d70 <_fstat_r+0x1c>
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	bf00      	nop
 8005d74:	20000df0 	.word	0x20000df0

08005d78 <_isatty_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_isatty_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb f977 	bl	8001076 <_isatty>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_isatty_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_isatty_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000df0 	.word	0x20000df0

08005d98 <_lseek_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_lseek_r+0x20>)
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fb f970 	bl	800108c <_lseek>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_lseek_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_lseek_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20000df0 	.word	0x20000df0

08005dbc <__malloc_lock>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	; (8005dc4 <__malloc_lock+0x8>)
 8005dbe:	f7ff bdff 	b.w	80059c0 <__retarget_lock_acquire_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	20000de8 	.word	0x20000de8

08005dc8 <__malloc_unlock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__malloc_unlock+0x8>)
 8005dca:	f7ff bdfa 	b.w	80059c2 <__retarget_lock_release_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000de8 	.word	0x20000de8

08005dd4 <_read_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_read_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb f90e 	bl	8001004 <_read>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_read_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_read_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20000df0 	.word	0x20000df0

08005df8 <_init>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr

08005e04 <_fini>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr
