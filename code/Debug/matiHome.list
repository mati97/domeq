
matiHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d4  080040d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  20000070  0800414c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  0800414c  000209f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4ed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002314  00000000  00000000  0002e58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c2a  00000000  00000000  000319b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8b7  00000000  00000000  000545e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca584  00000000  00000000  00060e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b41d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b30  00000000  00000000  0012b470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003ef4 	.word	0x08003ef4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003ef4 	.word	0x08003ef4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <BT_CommandDecodeInit>:

/*======================================*/
/*  function implemention       */
/*======================================*/
void BT_CommandDecodeInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
    BT_CmdDecodedFlag = 0;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <BT_CommandDecodeInit+0x1c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <BT_CommandDecodeInit+0x20>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]

}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	2000099c 	.word	0x2000099c
 80005c8:	2000008c 	.word	0x2000008c

080005cc <BT_CommandDecodeMain>:

void BT_CommandDecodeMain(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	BT_CommandHandler();
 80005d0:	f000 f80e 	bl	80005f0 <BT_CommandHandler>
	if(BT_CmdDecodedFlag)
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <BT_CommandDecodeMain+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <BT_CommandDecodeMain+0x1a>
	{
            BT_CommandDecode();
 80005dc:	f000 f894 	bl	8000708 <BT_CommandDecode>
            BT_CmdDecodedFlag = 0;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <BT_CommandDecodeMain+0x20>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	}
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000099c 	.word	0x2000099c

080005f0 <BT_CommandHandler>:


void BT_CommandHandler(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
    uint8_t current_byte;

    while (USART_GetChar((char*)(&current_byte))) {
 80005f6:	e06c      	b.n	80006d2 <BT_CommandHandler+0xe2>

//HAL_Delay(100);

        switch (BT_CmdDecodeState) {
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <BT_CommandHandler+0xfc>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d85f      	bhi.n	80006c0 <BT_CommandHandler+0xd0>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <BT_CommandHandler+0x18>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	0800061d 	.word	0x0800061d
 800060c:	0800062b 	.word	0x0800062b
 8000610:	08000641 	.word	0x08000641
 8000614:	08000667 	.word	0x08000667
 8000618:	080006a5 	.word	0x080006a5
            case RX_DECODE_CMD_SYNC_AA:
                if (current_byte == 0xaa)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2baa      	cmp	r3, #170	; 0xaa
 8000620:	d150      	bne.n	80006c4 <BT_CommandHandler+0xd4>
                    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_00;
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <BT_CommandHandler+0xfc>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
                break;
 8000628:	e04c      	b.n	80006c4 <BT_CommandHandler+0xd4>

            case RX_DECODE_CMD_SYNC_00:
                if (current_byte == 0x00)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d103      	bne.n	8000638 <BT_CommandHandler+0x48>
                    BT_CmdDecodeState = RX_DECODE_CMD_LENGTH;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <BT_CommandHandler+0xfc>)
 8000632:	2202      	movs	r2, #2
 8000634:	701a      	strb	r2, [r3, #0]
                else
                    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
                break;
 8000636:	e048      	b.n	80006ca <BT_CommandHandler+0xda>
                    BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <BT_CommandHandler+0xfc>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
                break;
 800063e:	e044      	b.n	80006ca <BT_CommandHandler+0xda>

            case RX_DECODE_CMD_LENGTH:
                BT_CmdDecodedFlag = 0; //command receive flag clear
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <BT_CommandHandler+0x100>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
                BT_CmdBufferPt = 0; //buffer reset for command parameter
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <BT_CommandHandler+0x104>)
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
                BT_CmdDecodeCmdLength = current_byte;
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <BT_CommandHandler+0x108>)
 8000650:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeChecksum = current_byte; //checksum calculation start!
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <BT_CommandHandler+0x10c>)
 8000656:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeDataCnt = current_byte; //save bytes number, use to check where is command end
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <BT_CommandHandler+0x110>)
 800065c:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeState = RX_DECODE_CMD_DATA; //next state
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <BT_CommandHandler+0xfc>)
 8000660:	2203      	movs	r2, #3
 8000662:	701a      	strb	r2, [r3, #0]
                break;
 8000664:	e031      	b.n	80006ca <BT_CommandHandler+0xda>

            case RX_DECODE_CMD_DATA:
                BT_CmdDecodeChecksum += current_byte;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <BT_CommandHandler+0x10c>)
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4413      	add	r3, r2
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <BT_CommandHandler+0x10c>)
 8000672:	701a      	strb	r2, [r3, #0]
                BT_CmdDecodeDataCnt--;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <BT_CommandHandler+0x110>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <BT_CommandHandler+0x110>)
 800067e:	701a      	strb	r2, [r3, #0]
                BT_CmdBuffer[BT_CmdBufferPt++] = current_byte;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <BT_CommandHandler+0x104>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	b291      	uxth	r1, r2
 8000688:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <BT_CommandHandler+0x104>)
 800068a:	8011      	strh	r1, [r2, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	79f9      	ldrb	r1, [r7, #7]
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <BT_CommandHandler+0x114>)
 8000692:	5499      	strb	r1, [r3, r2]
                if (BT_CmdDecodeDataCnt == 0) //no data remained?
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <BT_CommandHandler+0x110>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d115      	bne.n	80006c8 <BT_CommandHandler+0xd8>
                    BT_CmdDecodeState = RX_DECODE_CMD_CHECKSUM; //yes, next mode: checksum
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <BT_CommandHandler+0xfc>)
 800069e:	2204      	movs	r2, #4
 80006a0:	701a      	strb	r2, [r3, #0]
                break;
 80006a2:	e011      	b.n	80006c8 <BT_CommandHandler+0xd8>

            case RX_DECODE_CMD_CHECKSUM:
                if ((uint8_t) (BT_CmdDecodeChecksum + current_byte) == 0) {
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <BT_CommandHandler+0x10c>)
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4413      	add	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <BT_CommandHandler+0xc8>
                    BT_CmdDecodedFlag = 1;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <BT_CommandHandler+0x100>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
                } else {
                }
                BT_CmdDecodeState = RX_DECODE_CMD_SYNC_AA;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <BT_CommandHandler+0xfc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
                break;
 80006be:	e004      	b.n	80006ca <BT_CommandHandler+0xda>
            default:
                break;
 80006c0:	bf00      	nop
 80006c2:	e002      	b.n	80006ca <BT_CommandHandler+0xda>
                break;
 80006c4:	bf00      	nop
 80006c6:	e000      	b.n	80006ca <BT_CommandHandler+0xda>
                break;
 80006c8:	bf00      	nop
        }

        if (BT_CmdDecodedFlag) {
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <BT_CommandHandler+0x100>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d107      	bne.n	80006e2 <BT_CommandHandler+0xf2>
    while (USART_GetChar((char*)(&current_byte))) {
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fb9f 	bl	8000e18 <USART_GetChar>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d18b      	bne.n	80005f8 <BT_CommandHandler+0x8>
            break;
        }
    }
}
 80006e0:	e000      	b.n	80006e4 <BT_CommandHandler+0xf4>
            break;
 80006e2:	bf00      	nop
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	2000099c 	.word	0x2000099c
 80006f4:	20000090 	.word	0x20000090
 80006f8:	2000008d 	.word	0x2000008d
 80006fc:	2000008e 	.word	0x2000008e
 8000700:	2000008f 	.word	0x2000008f
 8000704:	200008d4 	.word	0x200008d4

08000708 <BT_CommandDecode>:

void BT_CommandDecode( void )
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
    switch(BT_CmdBuffer[0])
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <BT_CommandDecode+0x34>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b29      	cmp	r3, #41	; 0x29
 8000712:	d006      	beq.n	8000722 <BT_CommandDecode+0x1a>
 8000714:	2b29      	cmp	r3, #41	; 0x29
 8000716:	dc06      	bgt.n	8000726 <BT_CommandDecode+0x1e>
 8000718:	2b02      	cmp	r3, #2
 800071a:	d006      	beq.n	800072a <BT_CommandDecode+0x22>
 800071c:	2b24      	cmp	r3, #36	; 0x24
 800071e:	d006      	beq.n	800072e <BT_CommandDecode+0x26>

            //BTAPP_EventHandler(BT_EVENT_AVRCP_ABS_VOLUME_CHANGED, (uint16_t)(BT_CmdBuffer[2]), &BT_CmdBuffer[1]);
            break;

        default:
        	break;
 8000720:	e001      	b.n	8000726 <BT_CommandDecode+0x1e>
            break;
 8000722:	bf00      	nop
 8000724:	e004      	b.n	8000730 <BT_CommandDecode+0x28>
        	break;
 8000726:	bf00      	nop
 8000728:	e002      	b.n	8000730 <BT_CommandDecode+0x28>
    		break;
 800072a:	bf00      	nop
 800072c:	e000      	b.n	8000730 <BT_CommandDecode+0x28>
            break;
 800072e:	bf00      	nop
    }

}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200008d4 	.word	0x200008d4

08000740 <CORE_EnterCriticalSection>:
/* Includes ------------------------------------------------------------------*/
#include "core.h"
#include "stm32f4xx_hal.h"


void CORE_EnterCriticalSection(void){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
	__disable_irq();
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <CORE_ExitCriticalSection>:

void CORE_ExitCriticalSection(void) {
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000756:	b662      	cpsie	i
}
 8000758:	bf00      	nop
	__enable_irq();
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fc18 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f80e 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f896 	bl	80008a0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000774:	f000 f86a 	bl	800084c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  BT_CommandDecodeInit();
 8000778:	f7ff ff16 	bl	80005a8 <BT_CommandDecodeInit>
  USART_Init(&huart4);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <main+0x24>)
 800077e:	f000 fbb9 	bl	8000ef4 <USART_Init>
  while (1)
  {

	  //BTAPP_EnterBTPairingMode();
	  //HAL_Delay(1);
	  BT_CommandDecodeMain();
 8000782:	f7ff ff23 	bl	80005cc <BT_CommandDecodeMain>
 8000786:	e7fc      	b.n	8000782 <main+0x1e>
 8000788:	200009a0 	.word	0x200009a0

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fc18 	bl	8002fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xb8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a22      	ldr	r2, [pc, #136]	; (8000844 <SystemClock_Config+0xb8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <SystemClock_Config+0xb8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <SystemClock_Config+0xbc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <SystemClock_Config+0xbc>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <SystemClock_Config+0xbc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f9eb 	bl	8001bdc <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800080c:	f000 f862 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f000 ff60 	bl	80016f0 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000836:	f000 f84d 	bl	80008d4 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_UART4_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_UART4_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_UART4_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_UART4_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_UART4_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_UART4_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_UART4_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_UART4_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_UART4_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_UART4_Init+0x4c>)
 8000884:	f001 fc48 	bl	8002118 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f821 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200009a0 	.word	0x200009a0
 800089c:	40004c00 	.word	0x40004c00

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_GPIO_Init+0x30>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <MX_GPIO_Init+0x30>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_GPIO_Init+0x30>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <RingBuffer_Init>:
        ;
    }
}

bool RingBuffer_Init(RingBuffer *ringBuffer, char *dataBuffer, size_t dataBufferSize)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	assert(ringBuffer);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d105      	bne.n	80008fe <RingBuffer_Init+0x1e>
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <RingBuffer_Init+0x80>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <RingBuffer_Init+0x84>)
 80008f6:	210f      	movs	r1, #15
 80008f8:	481b      	ldr	r0, [pc, #108]	; (8000968 <RingBuffer_Init+0x88>)
 80008fa:	f002 fb0f 	bl	8002f1c <__assert_func>
	assert(dataBuffer);
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d105      	bne.n	8000910 <RingBuffer_Init+0x30>
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <RingBuffer_Init+0x8c>)
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <RingBuffer_Init+0x84>)
 8000908:	2110      	movs	r1, #16
 800090a:	4817      	ldr	r0, [pc, #92]	; (8000968 <RingBuffer_Init+0x88>)
 800090c:	f002 fb06 	bl	8002f1c <__assert_func>
	assert(dataBufferSize > 0);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d105      	bne.n	8000922 <RingBuffer_Init+0x42>
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <RingBuffer_Init+0x90>)
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <RingBuffer_Init+0x84>)
 800091a:	2111      	movs	r1, #17
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <RingBuffer_Init+0x88>)
 800091e:	f002 fafd 	bl	8002f1c <__assert_func>

	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d016      	beq.n	8000956 <RingBuffer_Init+0x76>
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d013      	beq.n	8000956 <RingBuffer_Init+0x76>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d010      	beq.n	8000956 <RingBuffer_Init+0x76>

	  ringBuffer->ptr=dataBuffer;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	605a      	str	r2, [r3, #4]
	  ringBuffer->size=dataBufferSize;
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	601a      	str	r2, [r3, #0]
	  ringBuffer->head=0;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
	  ringBuffer->tail=0;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
	  ringBuffer->count=0;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
	  return true;
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <RingBuffer_Init+0x78>
	}

	return false;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	08003f5c 	.word	0x08003f5c
 8000964:	08003fa8 	.word	0x08003fa8
 8000968:	08003f68 	.word	0x08003f68
 800096c:	08003f84 	.word	0x08003f84
 8000970:	08003f90 	.word	0x08003f90

08000974 <RingBuffer_PutChar>:
	return 0;
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	assert(ringBuffer);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d105      	bne.n	8000992 <RingBuffer_PutChar+0x1e>
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <RingBuffer_PutChar+0x78>)
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <RingBuffer_PutChar+0x7c>)
 800098a:	214f      	movs	r1, #79	; 0x4f
 800098c:	4819      	ldr	r0, [pc, #100]	; (80009f4 <RingBuffer_PutChar+0x80>)
 800098e:	f002 fac5 	bl	8002f1c <__assert_func>

	if (ringBuffer) {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d023      	beq.n	80009e0 <RingBuffer_PutChar+0x6c>
		if (ringBuffer->count < ringBuffer->size)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	da1d      	bge.n	80009e0 <RingBuffer_PutChar+0x6c>
        {
          ringBuffer->ptr[ringBuffer->head] = c;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	6892      	ldr	r2, [r2, #8]
 80009ac:	4413      	add	r3, r2
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	701a      	strb	r2, [r3, #0]
          if(ringBuffer->head==ringBuffer->size-1) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	429a      	cmp	r2, r3
 80009be:	d103      	bne.n	80009c8 <RingBuffer_PutChar+0x54>
						ringBuffer->head=0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	e004      	b.n	80009d2 <RingBuffer_PutChar+0x5e>
					} else {
						ringBuffer->head++;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	609a      	str	r2, [r3, #8]
					}
          ++ringBuffer->count;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	611a      	str	r2, [r3, #16]
          return true;
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <RingBuffer_PutChar+0x6e>
        }
	}
	return false;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08003f5c 	.word	0x08003f5c
 80009f0:	08003fb8 	.word	0x08003fb8
 80009f4:	08003f68 	.word	0x08003f68

080009f8 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	assert(ringBuffer);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d105      	bne.n	8000a14 <RingBuffer_GetChar+0x1c>
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <RingBuffer_GetChar+0x8c>)
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <RingBuffer_GetChar+0x90>)
 8000a0c:	2163      	movs	r1, #99	; 0x63
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <RingBuffer_GetChar+0x94>)
 8000a10:	f002 fa84 	bl	8002f1c <__assert_func>
	assert(c);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d105      	bne.n	8000a26 <RingBuffer_GetChar+0x2e>
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <RingBuffer_GetChar+0x98>)
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <RingBuffer_GetChar+0x90>)
 8000a1e:	2164      	movs	r1, #100	; 0x64
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <RingBuffer_GetChar+0x94>)
 8000a22:	f002 fa7b 	bl	8002f1c <__assert_func>

  if ((ringBuffer) && (c)) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d025      	beq.n	8000a78 <RingBuffer_GetChar+0x80>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d022      	beq.n	8000a78 <RingBuffer_GetChar+0x80>
    if (ringBuffer->count>0)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dd1e      	ble.n	8000a78 <RingBuffer_GetChar+0x80>
    {
      *c = ringBuffer->ptr[ringBuffer->tail];
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68d2      	ldr	r2, [r2, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	701a      	strb	r2, [r3, #0]
       if(ringBuffer->tail==ringBuffer->size-1) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d103      	bne.n	8000a60 <RingBuffer_GetChar+0x68>
				 ringBuffer->tail=0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	e004      	b.n	8000a6a <RingBuffer_GetChar+0x72>
			 } else {
				 ringBuffer->tail++;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60da      	str	r2, [r3, #12]
			 }
      --ringBuffer->count;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	611a      	str	r2, [r3, #16]
			return true;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <RingBuffer_GetChar+0x82>
    }
	}
	return false;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	08003f5c 	.word	0x08003f5c
 8000a88:	08003fcc 	.word	0x08003fcc
 8000a8c:	08003f68 	.word	0x08003f68
 8000a90:	08003fa4 	.word	0x08003fa4

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_UART_MspInit+0x94>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d133      	bne.n	8000b6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <HAL_UART_MspInit+0x9c>)
 8000b5a:	f000 fc35 	bl	80013c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2034      	movs	r0, #52	; 0x34
 8000b64:	f000 fb67 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b68:	2034      	movs	r0, #52	; 0x34
 8000b6a:	f000 fb80 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004c00 	.word	0x40004c00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 fa36 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <UART4_IRQHandler+0x10>)
 8000bde:	f001 fb5d 	bl	800229c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200009a0 	.word	0x200009a0

08000bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	return 1;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_kill>:

int _kill(int pid, int sig)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c06:	f002 f9a7 	bl	8002f58 <__errno>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2216      	movs	r2, #22
 8000c0e:	601a      	str	r2, [r3, #0]
	return -1;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_exit>:

void _exit (int status)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ffe7 	bl	8000bfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c2e:	e7fe      	b.n	8000c2e <_exit+0x12>

08000c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
	}

return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
	return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f002 f928 	bl	8002f58 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	200009f8 	.word	0x200009f8

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <_write>:
// UART receive buffer descriptor
static RingBuffer USART_RingBuffer_Rx;
// UART receive buffer memory pool
static char RingBufferData_Rx[1024];

int _write(int file, char *ptr, int len) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	USART_WriteData(ptr,len);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4619      	mov	r1, r3
 8000d74:	68b8      	ldr	r0, [r7, #8]
 8000d76:	f000 f805 	bl	8000d84 <USART_WriteData>
	return len;
 8000d7a:	687b      	ldr	r3, [r7, #4]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <USART_WriteData>:

size_t USART_WriteData(const void *data, size_t dataSize){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	size_t i = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]

	static char c;


	for(;i<dataSize;i++)
 8000d92:	e018      	b.n	8000dc6 <USART_WriteData+0x42>
	{

		CORE_EnterCriticalSection();
 8000d94:	f7ff fcd4 	bl	8000740 <CORE_EnterCriticalSection>
		if(!RingBuffer_PutChar(&USART_RingBuffer_Tx, *((char*)data+i)) ) {
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4819      	ldr	r0, [pc, #100]	; (8000e08 <USART_WriteData+0x84>)
 8000da4:	f7ff fde6 	bl	8000974 <RingBuffer_PutChar>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f083 0301 	eor.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <USART_WriteData+0x38>
			CORE_ExitCriticalSection();
 8000db4:	f7ff fccd 	bl	8000752 <CORE_ExitCriticalSection>
			return false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e020      	b.n	8000dfe <USART_WriteData+0x7a>
		}
		CORE_ExitCriticalSection();
 8000dbc:	f7ff fcc9 	bl	8000752 <CORE_ExitCriticalSection>
	for(;i<dataSize;i++)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3e2      	bcc.n	8000d94 <USART_WriteData+0x10>
	}
	CORE_EnterCriticalSection();
 8000dce:	f7ff fcb7 	bl	8000740 <CORE_EnterCriticalSection>
	if(!flag){
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <USART_WriteData+0x88>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10d      	bne.n	8000df8 <USART_WriteData+0x74>
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <USART_WriteData+0x8c>)
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <USART_WriteData+0x84>)
 8000de0:	f7ff fe0a 	bl	80009f8 <RingBuffer_GetChar>
		HAL_UART_Transmit_IT(huart_ptr, &c,1);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <USART_WriteData+0x90>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2201      	movs	r2, #1
 8000dea:	4909      	ldr	r1, [pc, #36]	; (8000e10 <USART_WriteData+0x8c>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f9e0 	bl	80021b2 <HAL_UART_Transmit_IT>
		flag=1;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <USART_WriteData+0x88>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
	}
	CORE_ExitCriticalSection();
 8000df8:	f7ff fcab 	bl	8000752 <CORE_ExitCriticalSection>
	return i;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000a0 	.word	0x200000a0
 8000e0c:	20000099 	.word	0x20000099
 8000e10:	200008c8 	.word	0x200008c8
 8000e14:	2000009c 	.word	0x2000009c

08000e18 <USART_GetChar>:
size_t USART_WriteString(const char *string){
	return USART_WriteData(string, strlen(string));
}


bool USART_GetChar(char *c){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	CORE_EnterCriticalSection();
 8000e20:	f7ff fc8e 	bl	8000740 <CORE_EnterCriticalSection>
	if(!RingBuffer_GetChar(&USART_RingBuffer_Rx, c )) {
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <USART_GetChar+0x38>)
 8000e28:	f7ff fde6 	bl	80009f8 <RingBuffer_GetChar>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <USART_GetChar+0x28>
		CORE_ExitCriticalSection();
 8000e38:	f7ff fc8b 	bl	8000752 <CORE_ExitCriticalSection>
		return false;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e002      	b.n	8000e46 <USART_GetChar+0x2e>
	}
	CORE_ExitCriticalSection();
 8000e40:	f7ff fc87 	bl	8000752 <CORE_ExitCriticalSection>

	return true;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200004b4 	.word	0x200004b4

08000e54 <HAL_UART_RxCpltCallback>:
		CORE_ExitCriticalSection();
	}
	return i;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart_ptr->Instance){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_UART_RxCpltCallback+0x3c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d10d      	bne.n	8000e86 <HAL_UART_RxCpltCallback+0x32>

		RingBuffer_PutChar(&USART_RingBuffer_Rx, rcv_char);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_UART_RxCpltCallback+0x40>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_UART_RxCpltCallback+0x44>)
 8000e74:	f7ff fd7e 	bl	8000974 <RingBuffer_PutChar>
		HAL_UART_Receive_IT(huart_ptr,&rcv_char,1);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_UART_RxCpltCallback+0x3c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4905      	ldr	r1, [pc, #20]	; (8000e94 <HAL_UART_RxCpltCallback+0x40>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 f9db 	bl	800223c <HAL_UART_Receive_IT>

	}

}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000009c 	.word	0x2000009c
 8000e94:	20000098 	.word	0x20000098
 8000e98:	200004b4 	.word	0x200004b4

08000e9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

	if(huart->Instance==huart_ptr->Instance){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_UART_TxCpltCallback+0x48>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d114      	bne.n	8000edc <HAL_UART_TxCpltCallback+0x40>
		static char c;

		if(RingBuffer_GetChar(&USART_RingBuffer_Tx, &c) == true)
 8000eb2:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <HAL_UART_TxCpltCallback+0x4c>)
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <HAL_UART_TxCpltCallback+0x50>)
 8000eb6:	f7ff fd9f 	bl	80009f8 <RingBuffer_GetChar>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00a      	beq.n	8000ed6 <HAL_UART_TxCpltCallback+0x3a>
		{
			//c=*"a";
			HAL_UART_Transmit_IT(huart_ptr, &c,1);
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_UART_TxCpltCallback+0x48>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <HAL_UART_TxCpltCallback+0x4c>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 f972 	bl	80021b2 <HAL_UART_Transmit_IT>
			flag=1;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_UART_TxCpltCallback+0x54>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
		}else flag=0;

	}

}
 8000ed4:	e002      	b.n	8000edc <HAL_UART_TxCpltCallback+0x40>
		}else flag=0;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_UART_TxCpltCallback+0x54>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000009c 	.word	0x2000009c
 8000ee8:	200008c9 	.word	0x200008c9
 8000eec:	200000a0 	.word	0x200000a0
 8000ef0:	20000099 	.word	0x20000099

08000ef4 <USART_Init>:


/**
  * This function initialize ring buffers, USART device and enable receive interrupt.
  */
void USART_Init(UART_HandleTypeDef* huart){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	huart_ptr = huart;
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <USART_Init+0x3c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
	// initialize ring buffers
	RingBuffer_Init(&USART_RingBuffer_Tx, RingBufferData_Tx, sizeof(RingBufferData_Tx));
 8000f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f06:	490b      	ldr	r1, [pc, #44]	; (8000f34 <USART_Init+0x40>)
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <USART_Init+0x44>)
 8000f0a:	f7ff fce9 	bl	80008e0 <RingBuffer_Init>
	RingBuffer_Init(&USART_RingBuffer_Rx, RingBufferData_Rx, sizeof(RingBufferData_Rx));
 8000f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f12:	490a      	ldr	r1, [pc, #40]	; (8000f3c <USART_Init+0x48>)
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <USART_Init+0x4c>)
 8000f16:	f7ff fce3 	bl	80008e0 <RingBuffer_Init>

	HAL_UART_Receive_IT(huart_ptr,&rcv_char,1);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <USART_Init+0x3c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4908      	ldr	r1, [pc, #32]	; (8000f44 <USART_Init+0x50>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 f98a 	bl	800223c <HAL_UART_Receive_IT>


}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000009c 	.word	0x2000009c
 8000f34:	200000b4 	.word	0x200000b4
 8000f38:	200000a0 	.word	0x200000a0
 8000f3c:	200004c8 	.word	0x200004c8
 8000f40:	200004b4 	.word	0x200004b4
 8000f44:	20000098 	.word	0x20000098

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f72:	f7ff fee5 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 f807 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fbf3 	bl	8000764 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f8c:	080040dc 	.word	0x080040dc
  ldr r2, =_sbss
 8000f90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f94:	200009f8 	.word	0x200009f8

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f92b 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fd60 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f943 	bl	800128a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f90b 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	200009e4 	.word	0x200009e4

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200009e4 	.word	0x200009e4

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff feda 	bl	8001068 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d008      	beq.n	80012d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e052      	b.n	800137a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0216 	bic.w	r2, r2, #22
 80012e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <HAL_DMA_Abort+0x62>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0208 	bic.w	r2, r2, #8
 8001312:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001324:	e013      	b.n	800134e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001326:	f7ff fe9f 	bl	8001068 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b05      	cmp	r3, #5
 8001332:	d90c      	bls.n	800134e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e015      	b.n	800137a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e4      	bne.n	8001326 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	223f      	movs	r2, #63	; 0x3f
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e00c      	b.n	80013ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2205      	movs	r2, #5
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e165      	b.n	80016b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8154 	bne.w	80016aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	2b02      	cmp	r3, #2
 8001418:	d130      	bne.n	800147c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80ae 	beq.w	80016aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a5c      	ldr	r2, [pc, #368]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_GPIO_Init+0x304>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_GPIO_Init+0x308>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4e      	ldr	r2, [pc, #312]	; (80016d4 <HAL_GPIO_Init+0x30c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x216>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_GPIO_Init+0x310>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x212>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x314>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x318>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x20a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x31c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x206>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x320>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x202>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x304>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001626:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x324>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_GPIO_Init+0x324>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x324>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_GPIO_Init+0x324>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f ae96 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fc42 	bl	8001068 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fc3e 	bl	8001068 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f855 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fba2 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08003fe0 	.word	0x08003fe0
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d8:	f7ff fff0 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0a9b      	lsrs	r3, r3, #10
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08003ff0 	.word	0x08003ff0

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001900:	f7ff ffdc 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0b5b      	lsrs	r3, r3, #13
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	08003ff0 	.word	0x08003ff0

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001928:	b087      	sub	sp, #28
 800192a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800192c:	2600      	movs	r6, #0
 800192e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001930:	2600      	movs	r6, #0
 8001932:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001934:	2600      	movs	r6, #0
 8001936:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001938:	2600      	movs	r6, #0
 800193a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800193c:	2600      	movs	r6, #0
 800193e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4ea3      	ldr	r6, [pc, #652]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001942:	68b6      	ldr	r6, [r6, #8]
 8001944:	f006 060c 	and.w	r6, r6, #12
 8001948:	2e0c      	cmp	r6, #12
 800194a:	f200 8137 	bhi.w	8001bbc <HAL_RCC_GetSysClockFreq+0x298>
 800194e:	f20f 0c08 	addw	ip, pc, #8
 8001952:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001956:	bf00      	nop
 8001958:	0800198d 	.word	0x0800198d
 800195c:	08001bbd 	.word	0x08001bbd
 8001960:	08001bbd 	.word	0x08001bbd
 8001964:	08001bbd 	.word	0x08001bbd
 8001968:	08001993 	.word	0x08001993
 800196c:	08001bbd 	.word	0x08001bbd
 8001970:	08001bbd 	.word	0x08001bbd
 8001974:	08001bbd 	.word	0x08001bbd
 8001978:	08001999 	.word	0x08001999
 800197c:	08001bbd 	.word	0x08001bbd
 8001980:	08001bbd 	.word	0x08001bbd
 8001984:	08001bbd 	.word	0x08001bbd
 8001988:	08001aaf 	.word	0x08001aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800198c:	4b91      	ldr	r3, [pc, #580]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800198e:	613b      	str	r3, [r7, #16]
       break;
 8001990:	e117      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001992:	4b91      	ldr	r3, [pc, #580]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001994:	613b      	str	r3, [r7, #16]
      break;
 8001996:	e114      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	4b8d      	ldr	r3, [pc, #564]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d024      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	461a      	mov	r2, r3
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f240 14ff 	movw	r4, #511	; 0x1ff
 80019be:	f04f 0500 	mov.w	r5, #0
 80019c2:	ea02 0004 	and.w	r0, r2, r4
 80019c6:	ea03 0105 	and.w	r1, r3, r5
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80019cc:	fb03 f201 	mul.w	r2, r3, r1
 80019d0:	2300      	movs	r3, #0
 80019d2:	fb03 f300 	mul.w	r3, r3, r0
 80019d6:	4413      	add	r3, r2
 80019d8:	4a7f      	ldr	r2, [pc, #508]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80019da:	fba0 0102 	umull	r0, r1, r0, r2
 80019de:	440b      	add	r3, r1
 80019e0:	4619      	mov	r1, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f7fe fc61 	bl	80002b0 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e04c      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	461a      	mov	r2, r3
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	ea02 0800 	and.w	r8, r2, r0
 8001a10:	ea03 0901 	and.w	r9, r3, r1
 8001a14:	4640      	mov	r0, r8
 8001a16:	4649      	mov	r1, r9
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	014b      	lsls	r3, r1, #5
 8001a22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a26:	0142      	lsls	r2, r0, #5
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	ebb0 0008 	subs.w	r0, r0, r8
 8001a30:	eb61 0109 	sbc.w	r1, r1, r9
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	018b      	lsls	r3, r1, #6
 8001a3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a42:	0182      	lsls	r2, r0, #6
 8001a44:	1a12      	subs	r2, r2, r0
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	00d9      	lsls	r1, r3, #3
 8001a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a58:	00d0      	lsls	r0, r2, #3
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	eb12 0208 	adds.w	r2, r2, r8
 8001a62:	eb43 0309 	adc.w	r3, r3, r9
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0299      	lsls	r1, r3, #10
 8001a70:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a74:	0290      	lsls	r0, r2, #10
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	461a      	mov	r2, r3
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f7fe fc13 	bl	80002b0 <__aeabi_uldivmod>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4613      	mov	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a92:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	613b      	str	r3, [r7, #16]
      break;
 8001aac:	e089      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aae:	4948      	ldr	r1, [pc, #288]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ab0:	6849      	ldr	r1, [r1, #4]
 8001ab2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ab6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab8:	4945      	ldr	r1, [pc, #276]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001aba:	6849      	ldr	r1, [r1, #4]
 8001abc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d024      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4942      	ldr	r1, [pc, #264]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ac6:	6849      	ldr	r1, [r1, #4]
 8001ac8:	0989      	lsrs	r1, r1, #6
 8001aca:	4608      	mov	r0, r1
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ad4:	f04f 0500 	mov.w	r5, #0
 8001ad8:	ea00 0204 	and.w	r2, r0, r4
 8001adc:	ea01 0305 	and.w	r3, r1, r5
 8001ae0:	493d      	ldr	r1, [pc, #244]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001ae2:	fb01 f003 	mul.w	r0, r1, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	fb01 f102 	mul.w	r1, r1, r2
 8001aec:	1844      	adds	r4, r0, r1
 8001aee:	493a      	ldr	r1, [pc, #232]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001af0:	fba2 0101 	umull	r0, r1, r2, r1
 8001af4:	1863      	adds	r3, r4, r1
 8001af6:	4619      	mov	r1, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f7fe fbd6 	bl	80002b0 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e04a      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	461a      	mov	r2, r3
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	ea02 0400 	and.w	r4, r2, r0
 8001b26:	ea03 0501 	and.w	r5, r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	014b      	lsls	r3, r1, #5
 8001b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b3c:	0142      	lsls	r2, r0, #5
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	1b00      	subs	r0, r0, r4
 8001b44:	eb61 0105 	sbc.w	r1, r1, r5
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	018b      	lsls	r3, r1, #6
 8001b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b56:	0182      	lsls	r2, r0, #6
 8001b58:	1a12      	subs	r2, r2, r0
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	00d9      	lsls	r1, r3, #3
 8001b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b6c:	00d0      	lsls	r0, r2, #3
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	1912      	adds	r2, r2, r4
 8001b74:	eb45 0303 	adc.w	r3, r5, r3
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0299      	lsls	r1, r3, #10
 8001b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b86:	0290      	lsls	r0, r2, #10
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f7fe fb8a 	bl	80002b0 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0f1b      	lsrs	r3, r3, #28
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	613b      	str	r3, [r7, #16]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001bbe:	613b      	str	r3, [r7, #16]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	693b      	ldr	r3, [r7, #16]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	017d7840 	.word	0x017d7840

08001bdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e28d      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8083 	beq.w	8001d02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bfc:	4b94      	ldr	r3, [pc, #592]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d019      	beq.n	8001c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c08:	4b91      	ldr	r3, [pc, #580]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c20:	d00c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d112      	bne.n	8001c54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c3a:	d10b      	bne.n	8001c54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4b84      	ldr	r3, [pc, #528]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05b      	beq.n	8001d00 <HAL_RCC_OscConfig+0x124>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d157      	bne.n	8001d00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e25a      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x90>
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7b      	ldr	r2, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xcc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xb4>
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a72      	ldr	r2, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xcc>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f9da 	bl	8001068 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f9d6 	bl	8001068 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e21f      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xdc>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f9c6 	bl	8001068 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f9c2 	bl	8001068 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e20b      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x104>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d06f      	beq.n	8001dee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d017      	beq.n	8001d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x186>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1d3      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff f96f 	bl	8001068 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff f96b 	bl	8001068 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1b4      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4925      	ldr	r1, [pc, #148]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f94e 	bl	8001068 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff f94a 	bl	8001068 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e193      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d036      	beq.n	8001e68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f92e 	bl	8001068 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff f92a 	bl	8001068 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e173      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x234>
 8001e2e:	e01b      	b.n	8001e68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff f917 	bl	8001068 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e00e      	b.n	8001e5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f913 	bl	8001068 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d907      	bls.n	8001e5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e15c      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470000 	.word	0x42470000
 8001e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ea      	bne.n	8001e3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8097 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b79      	ldr	r3, [pc, #484]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f8d3 	bl	8001068 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f8cf 	bl	8001068 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e118      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x4b0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x31e>
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a65      	ldr	r2, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x358>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x340>
 8001f02:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a60      	ldr	r2, [pc, #384]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0x358>
 8001f1c:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f2e:	f023 0304 	bic.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f894 	bl	8001068 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7ff f890 	bl	8001068 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0d7      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ee      	beq.n	8001f44 <HAL_RCC_OscConfig+0x368>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff f87e 	bl	8001068 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff f87a 	bl	8001068 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0c1      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ee      	bne.n	8001f70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ad 	beq.w	8002108 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d060      	beq.n	800207c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d145      	bne.n	800204e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_OscConfig+0x4b4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f84e 	bl	8001068 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f84a 	bl	8001068 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e093      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	071b      	lsls	r3, r3, #28
 800201a:	491b      	ldr	r1, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x4b4>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f81f 	bl	8001068 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff f81b 	bl	8001068 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e064      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x452>
 800204c:	e05c      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_RCC_OscConfig+0x4b4>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f808 	bl	8001068 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff f804 	bl	8001068 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04d      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x480>
 800207a:	e045      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e040      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000
 8002090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_RCC_OscConfig+0x538>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d030      	beq.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d129      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d122      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d119      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d10f      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e03f      	b.n	80021aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fcd0 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fd15 	bl	8002b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	4613      	mov	r3, r2
 80021be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d130      	bne.n	800222e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_UART_Transmit_IT+0x26>
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e029      	b.n	8002230 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Transmit_IT+0x38>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e022      	b.n	8002230 <HAL_UART_Transmit_IT+0x7e>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2221      	movs	r2, #33	; 0x21
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002228:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b20      	cmp	r3, #32
 8002254:	d11d      	bne.n	8002292 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_UART_Receive_IT+0x26>
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e016      	b.n	8002294 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_UART_Receive_IT+0x38>
 8002270:	2302      	movs	r3, #2
 8002272:	e00f      	b.n	8002294 <HAL_UART_Receive_IT+0x58>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	461a      	mov	r2, r3
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 faab 	bl	80027e4 <UART_Start_Receive_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	e000      	b.n	8002294 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
  }
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b0ba      	sub	sp, #232	; 0xe8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_UART_IRQHandler+0x66>
 80022ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fb8b 	bl	8002a16 <UART_Receive_IT>
      return;
 8002300:	e256      	b.n	80027b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80de 	beq.w	80024c8 <HAL_UART_IRQHandler+0x22c>
 800230c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80d1 	beq.w	80024c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_UART_IRQHandler+0xae>
 8002332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800234a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_UART_IRQHandler+0xd2>
 8002356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f043 0202 	orr.w	r2, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_UART_IRQHandler+0xf6>
 800237a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f043 0204 	orr.w	r2, r3, #4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d011      	beq.n	80023c2 <HAL_UART_IRQHandler+0x126>
 800239e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f043 0208 	orr.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 81ed 	beq.w	80027a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_UART_IRQHandler+0x14e>
 80023d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fb16 	bl	8002a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <HAL_UART_IRQHandler+0x17a>
 800240e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d04f      	beq.n	80024b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa1e 	bl	8002858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d141      	bne.n	80024ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3314      	adds	r3, #20
 8002452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002456:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800245a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002466:	e841 2300 	strex	r3, r2, [r1]
 800246a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800246e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1d9      	bne.n	800242a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	2b00      	cmp	r3, #0
 800247c:	d013      	beq.n	80024a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	4a7d      	ldr	r2, [pc, #500]	; (8002678 <HAL_UART_IRQHandler+0x3dc>)
 8002484:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe ff79 	bl	8001382 <HAL_DMA_Abort_IT>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a0:	4610      	mov	r0, r2
 80024a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a4:	e00e      	b.n	80024c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f986 	bl	80027b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	e00a      	b.n	80024c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f982 	bl	80027b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b4:	e006      	b.n	80024c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f97e 	bl	80027b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024c2:	e170      	b.n	80027a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c4:	bf00      	nop
    return;
 80024c6:	e16e      	b.n	80027a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	f040 814a 	bne.w	8002766 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8143 	beq.w	8002766 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 813c 	beq.w	8002766 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	f040 80b4 	bne.w	800267c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8140 	beq.w	80027aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800252e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002532:	429a      	cmp	r2, r3
 8002534:	f080 8139 	bcs.w	80027aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800253e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254a:	f000 8088 	beq.w	800265e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800256c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800257a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800257e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002582:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800258a:	e841 2300 	strex	r3, r2, [r1]
 800258e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1d9      	bne.n	800254e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3314      	adds	r3, #20
 80025a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ca:	e841 2300 	strex	r3, r2, [r1]
 80025ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e1      	bne.n	800259a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3314      	adds	r3, #20
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e0:	e853 3f00 	ldrex	r3, [r3]
 80025e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3314      	adds	r3, #20
 80025f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002600:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e3      	bne.n	80025d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002626:	e853 3f00 	ldrex	r3, [r3]
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800262c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262e:	f023 0310 	bic.w	r3, r3, #16
 8002632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002640:	65ba      	str	r2, [r7, #88]	; 0x58
 8002642:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800264e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e3      	bne.n	800261c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fe22 	bl	80012a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002666:	b29b      	uxth	r3, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8ac 	bl	80027cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002674:	e099      	b.n	80027aa <HAL_UART_IRQHandler+0x50e>
 8002676:	bf00      	nop
 8002678:	0800291f 	.word	0x0800291f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002684:	b29b      	uxth	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 808b 	beq.w	80027ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8086 	beq.w	80027ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026c6:	647a      	str	r2, [r7, #68]	; 0x44
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3314      	adds	r3, #20
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e3      	bne.n	80026da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	e853 3f00 	ldrex	r3, [r3]
 800272e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0310 	bic.w	r3, r3, #16
 8002736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002744:	61fa      	str	r2, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	617b      	str	r3, [r7, #20]
   return(result);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e3      	bne.n	8002720 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f834 	bl	80027cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002764:	e023      	b.n	80027ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_UART_IRQHandler+0x4ea>
 8002772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8e1 	bl	8002946 <UART_Transmit_IT>
    return;
 8002784:	e014      	b.n	80027b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00e      	beq.n	80027b0 <HAL_UART_IRQHandler+0x514>
 8002792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f921 	bl	80029e6 <UART_EndTransmit_IT>
    return;
 80027a4:	e004      	b.n	80027b0 <HAL_UART_IRQHandler+0x514>
    return;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <HAL_UART_IRQHandler+0x514>
      return;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <HAL_UART_IRQHandler+0x514>
      return;
 80027ae:	bf00      	nop
  }
}
 80027b0:	37e8      	adds	r7, #232	; 0xe8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2222      	movs	r2, #34	; 0x22
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002828:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b095      	sub	sp, #84	; 0x54
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002880:	643a      	str	r2, [r7, #64]	; 0x40
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e5      	bne.n	8002860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0310 	bic.w	r3, r3, #16
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028f0:	61ba      	str	r2, [r7, #24]
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	e841 2300 	strex	r3, r2, [r1]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e5      	bne.n	80028d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002912:	bf00      	nop
 8002914:	3754      	adds	r7, #84	; 0x54
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff ff3d 	bl	80027b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b21      	cmp	r3, #33	; 0x21
 8002958:	d13e      	bne.n	80029d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002962:	d114      	bne.n	800298e <UART_Transmit_IT+0x48>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d110      	bne.n	800298e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	621a      	str	r2, [r3, #32]
 800298c:	e008      	b.n	80029a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6211      	str	r1, [r2, #32]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4619      	mov	r1, r3
 80029ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10f      	bne.n	80029d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fa48 	bl	8000e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08c      	sub	sp, #48	; 0x30
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b22      	cmp	r3, #34	; 0x22
 8002a28:	f040 80ab 	bne.w	8002b82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d117      	bne.n	8002a66 <UART_Receive_IT+0x50>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d113      	bne.n	8002a66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
 8002a64:	e026      	b.n	8002ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	d007      	beq.n	8002a8a <UART_Receive_IT+0x74>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <UART_Receive_IT+0x82>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e008      	b.n	8002aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d15a      	bne.n	8002b7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0220 	bic.w	r2, r2, #32
 8002ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d135      	bne.n	8002b74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f023 0310 	bic.w	r3, r3, #16
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2e:	623a      	str	r2, [r7, #32]
 8002b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	69f9      	ldr	r1, [r7, #28]
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e5      	bne.n	8002b0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d10a      	bne.n	8002b66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fe2d 	bl	80027cc <HAL_UARTEx_RxEventCallback>
 8002b72:	e002      	b.n	8002b7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fe f96d 	bl	8000e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e002      	b.n	8002b84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3730      	adds	r7, #48	; 0x30
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b90:	b09f      	sub	sp, #124	; 0x7c
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	ea40 0301 	orr.w	r3, r0, r1
 8002bac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bd0:	f021 010c 	bic.w	r1, r1, #12
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bea:	6999      	ldr	r1, [r3, #24]
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	ea40 0301 	orr.w	r3, r0, r1
 8002bf4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4bc5      	ldr	r3, [pc, #788]	; (8002f10 <UART_SetConfig+0x384>)
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d004      	beq.n	8002c0a <UART_SetConfig+0x7e>
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4bc3      	ldr	r3, [pc, #780]	; (8002f14 <UART_SetConfig+0x388>)
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d103      	bne.n	8002c12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c0a:	f7fe fe77 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 8002c0e:	6778      	str	r0, [r7, #116]	; 0x74
 8002c10:	e002      	b.n	8002c18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c12:	f7fe fe5f 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 8002c16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c20:	f040 80b6 	bne.w	8002d90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c26:	461c      	mov	r4, r3
 8002c28:	f04f 0500 	mov.w	r5, #0
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	1891      	adds	r1, r2, r2
 8002c32:	6439      	str	r1, [r7, #64]	; 0x40
 8002c34:	415b      	adcs	r3, r3
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
 8002c38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c3c:	1912      	adds	r2, r2, r4
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	00d9      	lsls	r1, r3, #3
 8002c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c50:	00d0      	lsls	r0, r2, #3
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	1911      	adds	r1, r2, r4
 8002c58:	6639      	str	r1, [r7, #96]	; 0x60
 8002c5a:	416b      	adcs	r3, r5
 8002c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	1891      	adds	r1, r2, r2
 8002c6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c6c:	415b      	adcs	r3, r3
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c78:	f7fd fb1a 	bl	80002b0 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4ba5      	ldr	r3, [pc, #660]	; (8002f18 <UART_SetConfig+0x38c>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011e      	lsls	r6, r3, #4
 8002c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8c:	461c      	mov	r4, r3
 8002c8e:	f04f 0500 	mov.w	r5, #0
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	1891      	adds	r1, r2, r2
 8002c98:	6339      	str	r1, [r7, #48]	; 0x30
 8002c9a:	415b      	adcs	r3, r3
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ca2:	1912      	adds	r2, r2, r4
 8002ca4:	eb45 0303 	adc.w	r3, r5, r3
 8002ca8:	f04f 0000 	mov.w	r0, #0
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	00d9      	lsls	r1, r3, #3
 8002cb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cb6:	00d0      	lsls	r0, r2, #3
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	1911      	adds	r1, r2, r4
 8002cbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc0:	416b      	adcs	r3, r5
 8002cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	1891      	adds	r1, r2, r2
 8002cd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cd2:	415b      	adcs	r3, r3
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cde:	f7fd fae7 	bl	80002b0 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <UART_SetConfig+0x38c>)
 8002ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	2164      	movs	r1, #100	; 0x64
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	3332      	adds	r3, #50	; 0x32
 8002cfa:	4a87      	ldr	r2, [pc, #540]	; (8002f18 <UART_SetConfig+0x38c>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d08:	441e      	add	r6, r3
 8002d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	1894      	adds	r4, r2, r2
 8002d18:	623c      	str	r4, [r7, #32]
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d22:	1812      	adds	r2, r2, r0
 8002d24:	eb41 0303 	adc.w	r3, r1, r3
 8002d28:	f04f 0400 	mov.w	r4, #0
 8002d2c:	f04f 0500 	mov.w	r5, #0
 8002d30:	00dd      	lsls	r5, r3, #3
 8002d32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d36:	00d4      	lsls	r4, r2, #3
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	1814      	adds	r4, r2, r0
 8002d3e:	653c      	str	r4, [r7, #80]	; 0x50
 8002d40:	414b      	adcs	r3, r1
 8002d42:	657b      	str	r3, [r7, #84]	; 0x54
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	1891      	adds	r1, r2, r2
 8002d50:	61b9      	str	r1, [r7, #24]
 8002d52:	415b      	adcs	r3, r3
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d5e:	f7fd faa7 	bl	80002b0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <UART_SetConfig+0x38c>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a67      	ldr	r2, [pc, #412]	; (8002f18 <UART_SetConfig+0x38c>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4432      	add	r2, r6
 8002d8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d8e:	e0b9      	b.n	8002f04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d92:	461c      	mov	r4, r3
 8002d94:	f04f 0500 	mov.w	r5, #0
 8002d98:	4622      	mov	r2, r4
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	6139      	str	r1, [r7, #16]
 8002da0:	415b      	adcs	r3, r3
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002da8:	1912      	adds	r2, r2, r4
 8002daa:	eb45 0303 	adc.w	r3, r5, r3
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	00d9      	lsls	r1, r3, #3
 8002db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dbc:	00d0      	lsls	r0, r2, #3
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	eb12 0804 	adds.w	r8, r2, r4
 8002dc6:	eb43 0905 	adc.w	r9, r3, r5
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	008b      	lsls	r3, r1, #2
 8002dde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002de2:	0082      	lsls	r2, r0, #2
 8002de4:	4640      	mov	r0, r8
 8002de6:	4649      	mov	r1, r9
 8002de8:	f7fd fa62 	bl	80002b0 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <UART_SetConfig+0x38c>)
 8002df2:	fba3 2302 	umull	r2, r3, r3, r2
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	011e      	lsls	r6, r3, #4
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	1894      	adds	r4, r2, r2
 8002e08:	60bc      	str	r4, [r7, #8]
 8002e0a:	415b      	adcs	r3, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e12:	1812      	adds	r2, r2, r0
 8002e14:	eb41 0303 	adc.w	r3, r1, r3
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	f04f 0500 	mov.w	r5, #0
 8002e20:	00dd      	lsls	r5, r3, #3
 8002e22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e26:	00d4      	lsls	r4, r2, #3
 8002e28:	4622      	mov	r2, r4
 8002e2a:	462b      	mov	r3, r5
 8002e2c:	1814      	adds	r4, r2, r0
 8002e2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e30:	414b      	adcs	r3, r1
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	008b      	lsls	r3, r1, #2
 8002e48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e4c:	0082      	lsls	r2, r0, #2
 8002e4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e52:	f7fd fa2d 	bl	80002b0 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <UART_SetConfig+0x38c>)
 8002e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	2164      	movs	r1, #100	; 0x64
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	3332      	adds	r3, #50	; 0x32
 8002e6e:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <UART_SetConfig+0x38c>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7a:	441e      	add	r6, r3
 8002e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	1894      	adds	r4, r2, r2
 8002e8a:	603c      	str	r4, [r7, #0]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e94:	1812      	adds	r2, r2, r0
 8002e96:	eb41 0303 	adc.w	r3, r1, r3
 8002e9a:	f04f 0400 	mov.w	r4, #0
 8002e9e:	f04f 0500 	mov.w	r5, #0
 8002ea2:	00dd      	lsls	r5, r3, #3
 8002ea4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ea8:	00d4      	lsls	r4, r2, #3
 8002eaa:	4622      	mov	r2, r4
 8002eac:	462b      	mov	r3, r5
 8002eae:	eb12 0a00 	adds.w	sl, r2, r0
 8002eb2:	eb43 0b01 	adc.w	fp, r3, r1
 8002eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	008b      	lsls	r3, r1, #2
 8002eca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ece:	0082      	lsls	r2, r0, #2
 8002ed0:	4650      	mov	r0, sl
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	f7fd f9ec 	bl	80002b0 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <UART_SetConfig+0x38c>)
 8002ede:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2164      	movs	r1, #100	; 0x64
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	; 0x32
 8002ef0:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <UART_SetConfig+0x38c>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4432      	add	r2, r6
 8002f02:	609a      	str	r2, [r3, #8]
}
 8002f04:	bf00      	nop
 8002f06:	377c      	adds	r7, #124	; 0x7c
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	51eb851f 	.word	0x51eb851f

08002f1c <__assert_func>:
 8002f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f1e:	4614      	mov	r4, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__assert_func+0x2c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4605      	mov	r5, r0
 8002f28:	68d8      	ldr	r0, [r3, #12]
 8002f2a:	b14c      	cbz	r4, 8002f40 <__assert_func+0x24>
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <__assert_func+0x30>)
 8002f2e:	9100      	str	r1, [sp, #0]
 8002f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <__assert_func+0x34>)
 8002f36:	462b      	mov	r3, r5
 8002f38:	f000 f814 	bl	8002f64 <fiprintf>
 8002f3c:	f000 fbfe 	bl	800373c <abort>
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <__assert_func+0x38>)
 8002f42:	461c      	mov	r4, r3
 8002f44:	e7f3      	b.n	8002f2e <__assert_func+0x12>
 8002f46:	bf00      	nop
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	08003ff8 	.word	0x08003ff8
 8002f50:	08004005 	.word	0x08004005
 8002f54:	08004033 	.word	0x08004033

08002f58 <__errno>:
 8002f58:	4b01      	ldr	r3, [pc, #4]	; (8002f60 <__errno+0x8>)
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	2000000c 	.word	0x2000000c

08002f64 <fiprintf>:
 8002f64:	b40e      	push	{r1, r2, r3}
 8002f66:	b503      	push	{r0, r1, lr}
 8002f68:	4601      	mov	r1, r0
 8002f6a:	ab03      	add	r3, sp, #12
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <fiprintf+0x20>)
 8002f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f72:	6800      	ldr	r0, [r0, #0]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	f000 f85d 	bl	8003034 <_vfiprintf_r>
 8002f7a:	b002      	add	sp, #8
 8002f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f80:	b003      	add	sp, #12
 8002f82:	4770      	bx	lr
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4d0d      	ldr	r5, [pc, #52]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8c:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	2600      	movs	r6, #0
 8002f94:	42a6      	cmp	r6, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	4d0b      	ldr	r5, [pc, #44]	; (8002fc8 <__libc_init_array+0x40>)
 8002f9a:	4c0c      	ldr	r4, [pc, #48]	; (8002fcc <__libc_init_array+0x44>)
 8002f9c:	f000 ffaa 	bl	8003ef4 <_init>
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb0:	4798      	blx	r3
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fba:	4798      	blx	r3
 8002fbc:	3601      	adds	r6, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	080040d4 	.word	0x080040d4
 8002fc4:	080040d4 	.word	0x080040d4
 8002fc8:	080040d4 	.word	0x080040d4
 8002fcc:	080040d8 	.word	0x080040d8

08002fd0 <memset>:
 8002fd0:	4402      	add	r2, r0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	f803 1b01 	strb.w	r1, [r3], #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <__sfputc_r>:
 8002fe0:	6893      	ldr	r3, [r2, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	b410      	push	{r4}
 8002fe8:	6093      	str	r3, [r2, #8]
 8002fea:	da08      	bge.n	8002ffe <__sfputc_r+0x1e>
 8002fec:	6994      	ldr	r4, [r2, #24]
 8002fee:	42a3      	cmp	r3, r4
 8002ff0:	db01      	blt.n	8002ff6 <__sfputc_r+0x16>
 8002ff2:	290a      	cmp	r1, #10
 8002ff4:	d103      	bne.n	8002ffe <__sfputc_r+0x1e>
 8002ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffa:	f000 badf 	b.w	80035bc <__swbuf_r>
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	1c58      	adds	r0, r3, #1
 8003002:	6010      	str	r0, [r2, #0]
 8003004:	7019      	strb	r1, [r3, #0]
 8003006:	4608      	mov	r0, r1
 8003008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800300c:	4770      	bx	lr

0800300e <__sfputs_r>:
 800300e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003010:	4606      	mov	r6, r0
 8003012:	460f      	mov	r7, r1
 8003014:	4614      	mov	r4, r2
 8003016:	18d5      	adds	r5, r2, r3
 8003018:	42ac      	cmp	r4, r5
 800301a:	d101      	bne.n	8003020 <__sfputs_r+0x12>
 800301c:	2000      	movs	r0, #0
 800301e:	e007      	b.n	8003030 <__sfputs_r+0x22>
 8003020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003024:	463a      	mov	r2, r7
 8003026:	4630      	mov	r0, r6
 8003028:	f7ff ffda 	bl	8002fe0 <__sfputc_r>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d1f3      	bne.n	8003018 <__sfputs_r+0xa>
 8003030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003034 <_vfiprintf_r>:
 8003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003038:	460d      	mov	r5, r1
 800303a:	b09d      	sub	sp, #116	; 0x74
 800303c:	4614      	mov	r4, r2
 800303e:	4698      	mov	r8, r3
 8003040:	4606      	mov	r6, r0
 8003042:	b118      	cbz	r0, 800304c <_vfiprintf_r+0x18>
 8003044:	6983      	ldr	r3, [r0, #24]
 8003046:	b90b      	cbnz	r3, 800304c <_vfiprintf_r+0x18>
 8003048:	f000 fc9a 	bl	8003980 <__sinit>
 800304c:	4b89      	ldr	r3, [pc, #548]	; (8003274 <_vfiprintf_r+0x240>)
 800304e:	429d      	cmp	r5, r3
 8003050:	d11b      	bne.n	800308a <_vfiprintf_r+0x56>
 8003052:	6875      	ldr	r5, [r6, #4]
 8003054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003056:	07d9      	lsls	r1, r3, #31
 8003058:	d405      	bmi.n	8003066 <_vfiprintf_r+0x32>
 800305a:	89ab      	ldrh	r3, [r5, #12]
 800305c:	059a      	lsls	r2, r3, #22
 800305e:	d402      	bmi.n	8003066 <_vfiprintf_r+0x32>
 8003060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003062:	f000 fd2b 	bl	8003abc <__retarget_lock_acquire_recursive>
 8003066:	89ab      	ldrh	r3, [r5, #12]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	d501      	bpl.n	8003070 <_vfiprintf_r+0x3c>
 800306c:	692b      	ldr	r3, [r5, #16]
 800306e:	b9eb      	cbnz	r3, 80030ac <_vfiprintf_r+0x78>
 8003070:	4629      	mov	r1, r5
 8003072:	4630      	mov	r0, r6
 8003074:	f000 faf4 	bl	8003660 <__swsetup_r>
 8003078:	b1c0      	cbz	r0, 80030ac <_vfiprintf_r+0x78>
 800307a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800307c:	07dc      	lsls	r4, r3, #31
 800307e:	d50e      	bpl.n	800309e <_vfiprintf_r+0x6a>
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	b01d      	add	sp, #116	; 0x74
 8003086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308a:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <_vfiprintf_r+0x244>)
 800308c:	429d      	cmp	r5, r3
 800308e:	d101      	bne.n	8003094 <_vfiprintf_r+0x60>
 8003090:	68b5      	ldr	r5, [r6, #8]
 8003092:	e7df      	b.n	8003054 <_vfiprintf_r+0x20>
 8003094:	4b79      	ldr	r3, [pc, #484]	; (800327c <_vfiprintf_r+0x248>)
 8003096:	429d      	cmp	r5, r3
 8003098:	bf08      	it	eq
 800309a:	68f5      	ldreq	r5, [r6, #12]
 800309c:	e7da      	b.n	8003054 <_vfiprintf_r+0x20>
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	0598      	lsls	r0, r3, #22
 80030a2:	d4ed      	bmi.n	8003080 <_vfiprintf_r+0x4c>
 80030a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030a6:	f000 fd0a 	bl	8003abe <__retarget_lock_release_recursive>
 80030aa:	e7e9      	b.n	8003080 <_vfiprintf_r+0x4c>
 80030ac:	2300      	movs	r3, #0
 80030ae:	9309      	str	r3, [sp, #36]	; 0x24
 80030b0:	2320      	movs	r3, #32
 80030b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ba:	2330      	movs	r3, #48	; 0x30
 80030bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003280 <_vfiprintf_r+0x24c>
 80030c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030c4:	f04f 0901 	mov.w	r9, #1
 80030c8:	4623      	mov	r3, r4
 80030ca:	469a      	mov	sl, r3
 80030cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030d0:	b10a      	cbz	r2, 80030d6 <_vfiprintf_r+0xa2>
 80030d2:	2a25      	cmp	r2, #37	; 0x25
 80030d4:	d1f9      	bne.n	80030ca <_vfiprintf_r+0x96>
 80030d6:	ebba 0b04 	subs.w	fp, sl, r4
 80030da:	d00b      	beq.n	80030f4 <_vfiprintf_r+0xc0>
 80030dc:	465b      	mov	r3, fp
 80030de:	4622      	mov	r2, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	4630      	mov	r0, r6
 80030e4:	f7ff ff93 	bl	800300e <__sfputs_r>
 80030e8:	3001      	adds	r0, #1
 80030ea:	f000 80aa 	beq.w	8003242 <_vfiprintf_r+0x20e>
 80030ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030f0:	445a      	add	r2, fp
 80030f2:	9209      	str	r2, [sp, #36]	; 0x24
 80030f4:	f89a 3000 	ldrb.w	r3, [sl]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a2 	beq.w	8003242 <_vfiprintf_r+0x20e>
 80030fe:	2300      	movs	r3, #0
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003108:	f10a 0a01 	add.w	sl, sl, #1
 800310c:	9304      	str	r3, [sp, #16]
 800310e:	9307      	str	r3, [sp, #28]
 8003110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003114:	931a      	str	r3, [sp, #104]	; 0x68
 8003116:	4654      	mov	r4, sl
 8003118:	2205      	movs	r2, #5
 800311a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800311e:	4858      	ldr	r0, [pc, #352]	; (8003280 <_vfiprintf_r+0x24c>)
 8003120:	f7fd f876 	bl	8000210 <memchr>
 8003124:	9a04      	ldr	r2, [sp, #16]
 8003126:	b9d8      	cbnz	r0, 8003160 <_vfiprintf_r+0x12c>
 8003128:	06d1      	lsls	r1, r2, #27
 800312a:	bf44      	itt	mi
 800312c:	2320      	movmi	r3, #32
 800312e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003132:	0713      	lsls	r3, r2, #28
 8003134:	bf44      	itt	mi
 8003136:	232b      	movmi	r3, #43	; 0x2b
 8003138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800313c:	f89a 3000 	ldrb.w	r3, [sl]
 8003140:	2b2a      	cmp	r3, #42	; 0x2a
 8003142:	d015      	beq.n	8003170 <_vfiprintf_r+0x13c>
 8003144:	9a07      	ldr	r2, [sp, #28]
 8003146:	4654      	mov	r4, sl
 8003148:	2000      	movs	r0, #0
 800314a:	f04f 0c0a 	mov.w	ip, #10
 800314e:	4621      	mov	r1, r4
 8003150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003154:	3b30      	subs	r3, #48	; 0x30
 8003156:	2b09      	cmp	r3, #9
 8003158:	d94e      	bls.n	80031f8 <_vfiprintf_r+0x1c4>
 800315a:	b1b0      	cbz	r0, 800318a <_vfiprintf_r+0x156>
 800315c:	9207      	str	r2, [sp, #28]
 800315e:	e014      	b.n	800318a <_vfiprintf_r+0x156>
 8003160:	eba0 0308 	sub.w	r3, r0, r8
 8003164:	fa09 f303 	lsl.w	r3, r9, r3
 8003168:	4313      	orrs	r3, r2
 800316a:	9304      	str	r3, [sp, #16]
 800316c:	46a2      	mov	sl, r4
 800316e:	e7d2      	b.n	8003116 <_vfiprintf_r+0xe2>
 8003170:	9b03      	ldr	r3, [sp, #12]
 8003172:	1d19      	adds	r1, r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	9103      	str	r1, [sp, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	bfbb      	ittet	lt
 800317c:	425b      	neglt	r3, r3
 800317e:	f042 0202 	orrlt.w	r2, r2, #2
 8003182:	9307      	strge	r3, [sp, #28]
 8003184:	9307      	strlt	r3, [sp, #28]
 8003186:	bfb8      	it	lt
 8003188:	9204      	strlt	r2, [sp, #16]
 800318a:	7823      	ldrb	r3, [r4, #0]
 800318c:	2b2e      	cmp	r3, #46	; 0x2e
 800318e:	d10c      	bne.n	80031aa <_vfiprintf_r+0x176>
 8003190:	7863      	ldrb	r3, [r4, #1]
 8003192:	2b2a      	cmp	r3, #42	; 0x2a
 8003194:	d135      	bne.n	8003202 <_vfiprintf_r+0x1ce>
 8003196:	9b03      	ldr	r3, [sp, #12]
 8003198:	1d1a      	adds	r2, r3, #4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	9203      	str	r2, [sp, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bfb8      	it	lt
 80031a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80031a6:	3402      	adds	r4, #2
 80031a8:	9305      	str	r3, [sp, #20]
 80031aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003290 <_vfiprintf_r+0x25c>
 80031ae:	7821      	ldrb	r1, [r4, #0]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4650      	mov	r0, sl
 80031b4:	f7fd f82c 	bl	8000210 <memchr>
 80031b8:	b140      	cbz	r0, 80031cc <_vfiprintf_r+0x198>
 80031ba:	2340      	movs	r3, #64	; 0x40
 80031bc:	eba0 000a 	sub.w	r0, r0, sl
 80031c0:	fa03 f000 	lsl.w	r0, r3, r0
 80031c4:	9b04      	ldr	r3, [sp, #16]
 80031c6:	4303      	orrs	r3, r0
 80031c8:	3401      	adds	r4, #1
 80031ca:	9304      	str	r3, [sp, #16]
 80031cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d0:	482c      	ldr	r0, [pc, #176]	; (8003284 <_vfiprintf_r+0x250>)
 80031d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031d6:	2206      	movs	r2, #6
 80031d8:	f7fd f81a 	bl	8000210 <memchr>
 80031dc:	2800      	cmp	r0, #0
 80031de:	d03f      	beq.n	8003260 <_vfiprintf_r+0x22c>
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <_vfiprintf_r+0x254>)
 80031e2:	bb1b      	cbnz	r3, 800322c <_vfiprintf_r+0x1f8>
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	3307      	adds	r3, #7
 80031e8:	f023 0307 	bic.w	r3, r3, #7
 80031ec:	3308      	adds	r3, #8
 80031ee:	9303      	str	r3, [sp, #12]
 80031f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f2:	443b      	add	r3, r7
 80031f4:	9309      	str	r3, [sp, #36]	; 0x24
 80031f6:	e767      	b.n	80030c8 <_vfiprintf_r+0x94>
 80031f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80031fc:	460c      	mov	r4, r1
 80031fe:	2001      	movs	r0, #1
 8003200:	e7a5      	b.n	800314e <_vfiprintf_r+0x11a>
 8003202:	2300      	movs	r3, #0
 8003204:	3401      	adds	r4, #1
 8003206:	9305      	str	r3, [sp, #20]
 8003208:	4619      	mov	r1, r3
 800320a:	f04f 0c0a 	mov.w	ip, #10
 800320e:	4620      	mov	r0, r4
 8003210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003214:	3a30      	subs	r2, #48	; 0x30
 8003216:	2a09      	cmp	r2, #9
 8003218:	d903      	bls.n	8003222 <_vfiprintf_r+0x1ee>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0c5      	beq.n	80031aa <_vfiprintf_r+0x176>
 800321e:	9105      	str	r1, [sp, #20]
 8003220:	e7c3      	b.n	80031aa <_vfiprintf_r+0x176>
 8003222:	fb0c 2101 	mla	r1, ip, r1, r2
 8003226:	4604      	mov	r4, r0
 8003228:	2301      	movs	r3, #1
 800322a:	e7f0      	b.n	800320e <_vfiprintf_r+0x1da>
 800322c:	ab03      	add	r3, sp, #12
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	462a      	mov	r2, r5
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <_vfiprintf_r+0x258>)
 8003234:	a904      	add	r1, sp, #16
 8003236:	4630      	mov	r0, r6
 8003238:	f3af 8000 	nop.w
 800323c:	4607      	mov	r7, r0
 800323e:	1c78      	adds	r0, r7, #1
 8003240:	d1d6      	bne.n	80031f0 <_vfiprintf_r+0x1bc>
 8003242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003244:	07d9      	lsls	r1, r3, #31
 8003246:	d405      	bmi.n	8003254 <_vfiprintf_r+0x220>
 8003248:	89ab      	ldrh	r3, [r5, #12]
 800324a:	059a      	lsls	r2, r3, #22
 800324c:	d402      	bmi.n	8003254 <_vfiprintf_r+0x220>
 800324e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003250:	f000 fc35 	bl	8003abe <__retarget_lock_release_recursive>
 8003254:	89ab      	ldrh	r3, [r5, #12]
 8003256:	065b      	lsls	r3, r3, #25
 8003258:	f53f af12 	bmi.w	8003080 <_vfiprintf_r+0x4c>
 800325c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800325e:	e711      	b.n	8003084 <_vfiprintf_r+0x50>
 8003260:	ab03      	add	r3, sp, #12
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	462a      	mov	r2, r5
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <_vfiprintf_r+0x258>)
 8003268:	a904      	add	r1, sp, #16
 800326a:	4630      	mov	r0, r6
 800326c:	f000 f880 	bl	8003370 <_printf_i>
 8003270:	e7e4      	b.n	800323c <_vfiprintf_r+0x208>
 8003272:	bf00      	nop
 8003274:	0800408c 	.word	0x0800408c
 8003278:	080040ac 	.word	0x080040ac
 800327c:	0800406c 	.word	0x0800406c
 8003280:	08004038 	.word	0x08004038
 8003284:	08004042 	.word	0x08004042
 8003288:	00000000 	.word	0x00000000
 800328c:	0800300f 	.word	0x0800300f
 8003290:	0800403e 	.word	0x0800403e

08003294 <_printf_common>:
 8003294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	4616      	mov	r6, r2
 800329a:	4699      	mov	r9, r3
 800329c:	688a      	ldr	r2, [r1, #8]
 800329e:	690b      	ldr	r3, [r1, #16]
 80032a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bfb8      	it	lt
 80032a8:	4613      	movlt	r3, r2
 80032aa:	6033      	str	r3, [r6, #0]
 80032ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032b0:	4607      	mov	r7, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	b10a      	cbz	r2, 80032ba <_printf_common+0x26>
 80032b6:	3301      	adds	r3, #1
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	0699      	lsls	r1, r3, #26
 80032be:	bf42      	ittt	mi
 80032c0:	6833      	ldrmi	r3, [r6, #0]
 80032c2:	3302      	addmi	r3, #2
 80032c4:	6033      	strmi	r3, [r6, #0]
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	f015 0506 	ands.w	r5, r5, #6
 80032cc:	d106      	bne.n	80032dc <_printf_common+0x48>
 80032ce:	f104 0a19 	add.w	sl, r4, #25
 80032d2:	68e3      	ldr	r3, [r4, #12]
 80032d4:	6832      	ldr	r2, [r6, #0]
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	42ab      	cmp	r3, r5
 80032da:	dc26      	bgt.n	800332a <_printf_common+0x96>
 80032dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032e0:	1e13      	subs	r3, r2, #0
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	bf18      	it	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	0692      	lsls	r2, r2, #26
 80032ea:	d42b      	bmi.n	8003344 <_printf_common+0xb0>
 80032ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f0:	4649      	mov	r1, r9
 80032f2:	4638      	mov	r0, r7
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d01e      	beq.n	8003338 <_printf_common+0xa4>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	68e5      	ldr	r5, [r4, #12]
 80032fe:	6832      	ldr	r2, [r6, #0]
 8003300:	f003 0306 	and.w	r3, r3, #6
 8003304:	2b04      	cmp	r3, #4
 8003306:	bf08      	it	eq
 8003308:	1aad      	subeq	r5, r5, r2
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	6922      	ldr	r2, [r4, #16]
 800330e:	bf0c      	ite	eq
 8003310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003314:	2500      	movne	r5, #0
 8003316:	4293      	cmp	r3, r2
 8003318:	bfc4      	itt	gt
 800331a:	1a9b      	subgt	r3, r3, r2
 800331c:	18ed      	addgt	r5, r5, r3
 800331e:	2600      	movs	r6, #0
 8003320:	341a      	adds	r4, #26
 8003322:	42b5      	cmp	r5, r6
 8003324:	d11a      	bne.n	800335c <_printf_common+0xc8>
 8003326:	2000      	movs	r0, #0
 8003328:	e008      	b.n	800333c <_printf_common+0xa8>
 800332a:	2301      	movs	r3, #1
 800332c:	4652      	mov	r2, sl
 800332e:	4649      	mov	r1, r9
 8003330:	4638      	mov	r0, r7
 8003332:	47c0      	blx	r8
 8003334:	3001      	adds	r0, #1
 8003336:	d103      	bne.n	8003340 <_printf_common+0xac>
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	3501      	adds	r5, #1
 8003342:	e7c6      	b.n	80032d2 <_printf_common+0x3e>
 8003344:	18e1      	adds	r1, r4, r3
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	2030      	movs	r0, #48	; 0x30
 800334a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800334e:	4422      	add	r2, r4
 8003350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003358:	3302      	adds	r3, #2
 800335a:	e7c7      	b.n	80032ec <_printf_common+0x58>
 800335c:	2301      	movs	r3, #1
 800335e:	4622      	mov	r2, r4
 8003360:	4649      	mov	r1, r9
 8003362:	4638      	mov	r0, r7
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d0e6      	beq.n	8003338 <_printf_common+0xa4>
 800336a:	3601      	adds	r6, #1
 800336c:	e7d9      	b.n	8003322 <_printf_common+0x8e>
	...

08003370 <_printf_i>:
 8003370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003374:	460c      	mov	r4, r1
 8003376:	4691      	mov	r9, r2
 8003378:	7e27      	ldrb	r7, [r4, #24]
 800337a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800337c:	2f78      	cmp	r7, #120	; 0x78
 800337e:	4680      	mov	r8, r0
 8003380:	469a      	mov	sl, r3
 8003382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003386:	d807      	bhi.n	8003398 <_printf_i+0x28>
 8003388:	2f62      	cmp	r7, #98	; 0x62
 800338a:	d80a      	bhi.n	80033a2 <_printf_i+0x32>
 800338c:	2f00      	cmp	r7, #0
 800338e:	f000 80d8 	beq.w	8003542 <_printf_i+0x1d2>
 8003392:	2f58      	cmp	r7, #88	; 0x58
 8003394:	f000 80a3 	beq.w	80034de <_printf_i+0x16e>
 8003398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800339c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033a0:	e03a      	b.n	8003418 <_printf_i+0xa8>
 80033a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033a6:	2b15      	cmp	r3, #21
 80033a8:	d8f6      	bhi.n	8003398 <_printf_i+0x28>
 80033aa:	a001      	add	r0, pc, #4	; (adr r0, 80033b0 <_printf_i+0x40>)
 80033ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033b0:	08003409 	.word	0x08003409
 80033b4:	0800341d 	.word	0x0800341d
 80033b8:	08003399 	.word	0x08003399
 80033bc:	08003399 	.word	0x08003399
 80033c0:	08003399 	.word	0x08003399
 80033c4:	08003399 	.word	0x08003399
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	08003399 	.word	0x08003399
 80033d0:	08003399 	.word	0x08003399
 80033d4:	08003399 	.word	0x08003399
 80033d8:	08003399 	.word	0x08003399
 80033dc:	08003529 	.word	0x08003529
 80033e0:	0800344d 	.word	0x0800344d
 80033e4:	0800350b 	.word	0x0800350b
 80033e8:	08003399 	.word	0x08003399
 80033ec:	08003399 	.word	0x08003399
 80033f0:	0800354b 	.word	0x0800354b
 80033f4:	08003399 	.word	0x08003399
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	08003399 	.word	0x08003399
 8003400:	08003399 	.word	0x08003399
 8003404:	08003513 	.word	0x08003513
 8003408:	680b      	ldr	r3, [r1, #0]
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	600a      	str	r2, [r1, #0]
 8003410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003418:	2301      	movs	r3, #1
 800341a:	e0a3      	b.n	8003564 <_printf_i+0x1f4>
 800341c:	6825      	ldr	r5, [r4, #0]
 800341e:	6808      	ldr	r0, [r1, #0]
 8003420:	062e      	lsls	r6, r5, #24
 8003422:	f100 0304 	add.w	r3, r0, #4
 8003426:	d50a      	bpl.n	800343e <_printf_i+0xce>
 8003428:	6805      	ldr	r5, [r0, #0]
 800342a:	600b      	str	r3, [r1, #0]
 800342c:	2d00      	cmp	r5, #0
 800342e:	da03      	bge.n	8003438 <_printf_i+0xc8>
 8003430:	232d      	movs	r3, #45	; 0x2d
 8003432:	426d      	negs	r5, r5
 8003434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003438:	485e      	ldr	r0, [pc, #376]	; (80035b4 <_printf_i+0x244>)
 800343a:	230a      	movs	r3, #10
 800343c:	e019      	b.n	8003472 <_printf_i+0x102>
 800343e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003442:	6805      	ldr	r5, [r0, #0]
 8003444:	600b      	str	r3, [r1, #0]
 8003446:	bf18      	it	ne
 8003448:	b22d      	sxthne	r5, r5
 800344a:	e7ef      	b.n	800342c <_printf_i+0xbc>
 800344c:	680b      	ldr	r3, [r1, #0]
 800344e:	6825      	ldr	r5, [r4, #0]
 8003450:	1d18      	adds	r0, r3, #4
 8003452:	6008      	str	r0, [r1, #0]
 8003454:	0628      	lsls	r0, r5, #24
 8003456:	d501      	bpl.n	800345c <_printf_i+0xec>
 8003458:	681d      	ldr	r5, [r3, #0]
 800345a:	e002      	b.n	8003462 <_printf_i+0xf2>
 800345c:	0669      	lsls	r1, r5, #25
 800345e:	d5fb      	bpl.n	8003458 <_printf_i+0xe8>
 8003460:	881d      	ldrh	r5, [r3, #0]
 8003462:	4854      	ldr	r0, [pc, #336]	; (80035b4 <_printf_i+0x244>)
 8003464:	2f6f      	cmp	r7, #111	; 0x6f
 8003466:	bf0c      	ite	eq
 8003468:	2308      	moveq	r3, #8
 800346a:	230a      	movne	r3, #10
 800346c:	2100      	movs	r1, #0
 800346e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003472:	6866      	ldr	r6, [r4, #4]
 8003474:	60a6      	str	r6, [r4, #8]
 8003476:	2e00      	cmp	r6, #0
 8003478:	bfa2      	ittt	ge
 800347a:	6821      	ldrge	r1, [r4, #0]
 800347c:	f021 0104 	bicge.w	r1, r1, #4
 8003480:	6021      	strge	r1, [r4, #0]
 8003482:	b90d      	cbnz	r5, 8003488 <_printf_i+0x118>
 8003484:	2e00      	cmp	r6, #0
 8003486:	d04d      	beq.n	8003524 <_printf_i+0x1b4>
 8003488:	4616      	mov	r6, r2
 800348a:	fbb5 f1f3 	udiv	r1, r5, r3
 800348e:	fb03 5711 	mls	r7, r3, r1, r5
 8003492:	5dc7      	ldrb	r7, [r0, r7]
 8003494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003498:	462f      	mov	r7, r5
 800349a:	42bb      	cmp	r3, r7
 800349c:	460d      	mov	r5, r1
 800349e:	d9f4      	bls.n	800348a <_printf_i+0x11a>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d10b      	bne.n	80034bc <_printf_i+0x14c>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	07df      	lsls	r7, r3, #31
 80034a8:	d508      	bpl.n	80034bc <_printf_i+0x14c>
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	6861      	ldr	r1, [r4, #4]
 80034ae:	4299      	cmp	r1, r3
 80034b0:	bfde      	ittt	le
 80034b2:	2330      	movle	r3, #48	; 0x30
 80034b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034bc:	1b92      	subs	r2, r2, r6
 80034be:	6122      	str	r2, [r4, #16]
 80034c0:	f8cd a000 	str.w	sl, [sp]
 80034c4:	464b      	mov	r3, r9
 80034c6:	aa03      	add	r2, sp, #12
 80034c8:	4621      	mov	r1, r4
 80034ca:	4640      	mov	r0, r8
 80034cc:	f7ff fee2 	bl	8003294 <_printf_common>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d14c      	bne.n	800356e <_printf_i+0x1fe>
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	b004      	add	sp, #16
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	4835      	ldr	r0, [pc, #212]	; (80035b4 <_printf_i+0x244>)
 80034e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	680e      	ldr	r6, [r1, #0]
 80034e8:	061f      	lsls	r7, r3, #24
 80034ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80034ee:	600e      	str	r6, [r1, #0]
 80034f0:	d514      	bpl.n	800351c <_printf_i+0x1ac>
 80034f2:	07d9      	lsls	r1, r3, #31
 80034f4:	bf44      	itt	mi
 80034f6:	f043 0320 	orrmi.w	r3, r3, #32
 80034fa:	6023      	strmi	r3, [r4, #0]
 80034fc:	b91d      	cbnz	r5, 8003506 <_printf_i+0x196>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	f023 0320 	bic.w	r3, r3, #32
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	2310      	movs	r3, #16
 8003508:	e7b0      	b.n	800346c <_printf_i+0xfc>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f043 0320 	orr.w	r3, r3, #32
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	2378      	movs	r3, #120	; 0x78
 8003514:	4828      	ldr	r0, [pc, #160]	; (80035b8 <_printf_i+0x248>)
 8003516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800351a:	e7e3      	b.n	80034e4 <_printf_i+0x174>
 800351c:	065e      	lsls	r6, r3, #25
 800351e:	bf48      	it	mi
 8003520:	b2ad      	uxthmi	r5, r5
 8003522:	e7e6      	b.n	80034f2 <_printf_i+0x182>
 8003524:	4616      	mov	r6, r2
 8003526:	e7bb      	b.n	80034a0 <_printf_i+0x130>
 8003528:	680b      	ldr	r3, [r1, #0]
 800352a:	6826      	ldr	r6, [r4, #0]
 800352c:	6960      	ldr	r0, [r4, #20]
 800352e:	1d1d      	adds	r5, r3, #4
 8003530:	600d      	str	r5, [r1, #0]
 8003532:	0635      	lsls	r5, r6, #24
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	d501      	bpl.n	800353c <_printf_i+0x1cc>
 8003538:	6018      	str	r0, [r3, #0]
 800353a:	e002      	b.n	8003542 <_printf_i+0x1d2>
 800353c:	0671      	lsls	r1, r6, #25
 800353e:	d5fb      	bpl.n	8003538 <_printf_i+0x1c8>
 8003540:	8018      	strh	r0, [r3, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	6123      	str	r3, [r4, #16]
 8003546:	4616      	mov	r6, r2
 8003548:	e7ba      	b.n	80034c0 <_printf_i+0x150>
 800354a:	680b      	ldr	r3, [r1, #0]
 800354c:	1d1a      	adds	r2, r3, #4
 800354e:	600a      	str	r2, [r1, #0]
 8003550:	681e      	ldr	r6, [r3, #0]
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	2100      	movs	r1, #0
 8003556:	4630      	mov	r0, r6
 8003558:	f7fc fe5a 	bl	8000210 <memchr>
 800355c:	b108      	cbz	r0, 8003562 <_printf_i+0x1f2>
 800355e:	1b80      	subs	r0, r0, r6
 8003560:	6060      	str	r0, [r4, #4]
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	2300      	movs	r3, #0
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800356c:	e7a8      	b.n	80034c0 <_printf_i+0x150>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	4632      	mov	r2, r6
 8003572:	4649      	mov	r1, r9
 8003574:	4640      	mov	r0, r8
 8003576:	47d0      	blx	sl
 8003578:	3001      	adds	r0, #1
 800357a:	d0ab      	beq.n	80034d4 <_printf_i+0x164>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	079b      	lsls	r3, r3, #30
 8003580:	d413      	bmi.n	80035aa <_printf_i+0x23a>
 8003582:	68e0      	ldr	r0, [r4, #12]
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	4298      	cmp	r0, r3
 8003588:	bfb8      	it	lt
 800358a:	4618      	movlt	r0, r3
 800358c:	e7a4      	b.n	80034d8 <_printf_i+0x168>
 800358e:	2301      	movs	r3, #1
 8003590:	4632      	mov	r2, r6
 8003592:	4649      	mov	r1, r9
 8003594:	4640      	mov	r0, r8
 8003596:	47d0      	blx	sl
 8003598:	3001      	adds	r0, #1
 800359a:	d09b      	beq.n	80034d4 <_printf_i+0x164>
 800359c:	3501      	adds	r5, #1
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	9903      	ldr	r1, [sp, #12]
 80035a2:	1a5b      	subs	r3, r3, r1
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	dcf2      	bgt.n	800358e <_printf_i+0x21e>
 80035a8:	e7eb      	b.n	8003582 <_printf_i+0x212>
 80035aa:	2500      	movs	r5, #0
 80035ac:	f104 0619 	add.w	r6, r4, #25
 80035b0:	e7f5      	b.n	800359e <_printf_i+0x22e>
 80035b2:	bf00      	nop
 80035b4:	08004049 	.word	0x08004049
 80035b8:	0800405a 	.word	0x0800405a

080035bc <__swbuf_r>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	460e      	mov	r6, r1
 80035c0:	4614      	mov	r4, r2
 80035c2:	4605      	mov	r5, r0
 80035c4:	b118      	cbz	r0, 80035ce <__swbuf_r+0x12>
 80035c6:	6983      	ldr	r3, [r0, #24]
 80035c8:	b90b      	cbnz	r3, 80035ce <__swbuf_r+0x12>
 80035ca:	f000 f9d9 	bl	8003980 <__sinit>
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <__swbuf_r+0x98>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d12b      	bne.n	800362c <__swbuf_r+0x70>
 80035d4:	686c      	ldr	r4, [r5, #4]
 80035d6:	69a3      	ldr	r3, [r4, #24]
 80035d8:	60a3      	str	r3, [r4, #8]
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	071a      	lsls	r2, r3, #28
 80035de:	d52f      	bpl.n	8003640 <__swbuf_r+0x84>
 80035e0:	6923      	ldr	r3, [r4, #16]
 80035e2:	b36b      	cbz	r3, 8003640 <__swbuf_r+0x84>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	1ac0      	subs	r0, r0, r3
 80035ea:	6963      	ldr	r3, [r4, #20]
 80035ec:	b2f6      	uxtb	r6, r6
 80035ee:	4283      	cmp	r3, r0
 80035f0:	4637      	mov	r7, r6
 80035f2:	dc04      	bgt.n	80035fe <__swbuf_r+0x42>
 80035f4:	4621      	mov	r1, r4
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 f92e 	bl	8003858 <_fflush_r>
 80035fc:	bb30      	cbnz	r0, 800364c <__swbuf_r+0x90>
 80035fe:	68a3      	ldr	r3, [r4, #8]
 8003600:	3b01      	subs	r3, #1
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	6022      	str	r2, [r4, #0]
 800360a:	701e      	strb	r6, [r3, #0]
 800360c:	6963      	ldr	r3, [r4, #20]
 800360e:	3001      	adds	r0, #1
 8003610:	4283      	cmp	r3, r0
 8003612:	d004      	beq.n	800361e <__swbuf_r+0x62>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	07db      	lsls	r3, r3, #31
 8003618:	d506      	bpl.n	8003628 <__swbuf_r+0x6c>
 800361a:	2e0a      	cmp	r6, #10
 800361c:	d104      	bne.n	8003628 <__swbuf_r+0x6c>
 800361e:	4621      	mov	r1, r4
 8003620:	4628      	mov	r0, r5
 8003622:	f000 f919 	bl	8003858 <_fflush_r>
 8003626:	b988      	cbnz	r0, 800364c <__swbuf_r+0x90>
 8003628:	4638      	mov	r0, r7
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <__swbuf_r+0x9c>)
 800362e:	429c      	cmp	r4, r3
 8003630:	d101      	bne.n	8003636 <__swbuf_r+0x7a>
 8003632:	68ac      	ldr	r4, [r5, #8]
 8003634:	e7cf      	b.n	80035d6 <__swbuf_r+0x1a>
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <__swbuf_r+0xa0>)
 8003638:	429c      	cmp	r4, r3
 800363a:	bf08      	it	eq
 800363c:	68ec      	ldreq	r4, [r5, #12]
 800363e:	e7ca      	b.n	80035d6 <__swbuf_r+0x1a>
 8003640:	4621      	mov	r1, r4
 8003642:	4628      	mov	r0, r5
 8003644:	f000 f80c 	bl	8003660 <__swsetup_r>
 8003648:	2800      	cmp	r0, #0
 800364a:	d0cb      	beq.n	80035e4 <__swbuf_r+0x28>
 800364c:	f04f 37ff 	mov.w	r7, #4294967295
 8003650:	e7ea      	b.n	8003628 <__swbuf_r+0x6c>
 8003652:	bf00      	nop
 8003654:	0800408c 	.word	0x0800408c
 8003658:	080040ac 	.word	0x080040ac
 800365c:	0800406c 	.word	0x0800406c

08003660 <__swsetup_r>:
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <__swsetup_r+0xcc>)
 8003662:	b570      	push	{r4, r5, r6, lr}
 8003664:	681d      	ldr	r5, [r3, #0]
 8003666:	4606      	mov	r6, r0
 8003668:	460c      	mov	r4, r1
 800366a:	b125      	cbz	r5, 8003676 <__swsetup_r+0x16>
 800366c:	69ab      	ldr	r3, [r5, #24]
 800366e:	b913      	cbnz	r3, 8003676 <__swsetup_r+0x16>
 8003670:	4628      	mov	r0, r5
 8003672:	f000 f985 	bl	8003980 <__sinit>
 8003676:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <__swsetup_r+0xd0>)
 8003678:	429c      	cmp	r4, r3
 800367a:	d10f      	bne.n	800369c <__swsetup_r+0x3c>
 800367c:	686c      	ldr	r4, [r5, #4]
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003684:	0719      	lsls	r1, r3, #28
 8003686:	d42c      	bmi.n	80036e2 <__swsetup_r+0x82>
 8003688:	06dd      	lsls	r5, r3, #27
 800368a:	d411      	bmi.n	80036b0 <__swsetup_r+0x50>
 800368c:	2309      	movs	r3, #9
 800368e:	6033      	str	r3, [r6, #0]
 8003690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
 800369a:	e03e      	b.n	800371a <__swsetup_r+0xba>
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <__swsetup_r+0xd4>)
 800369e:	429c      	cmp	r4, r3
 80036a0:	d101      	bne.n	80036a6 <__swsetup_r+0x46>
 80036a2:	68ac      	ldr	r4, [r5, #8]
 80036a4:	e7eb      	b.n	800367e <__swsetup_r+0x1e>
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <__swsetup_r+0xd8>)
 80036a8:	429c      	cmp	r4, r3
 80036aa:	bf08      	it	eq
 80036ac:	68ec      	ldreq	r4, [r5, #12]
 80036ae:	e7e6      	b.n	800367e <__swsetup_r+0x1e>
 80036b0:	0758      	lsls	r0, r3, #29
 80036b2:	d512      	bpl.n	80036da <__swsetup_r+0x7a>
 80036b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036b6:	b141      	cbz	r1, 80036ca <__swsetup_r+0x6a>
 80036b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036bc:	4299      	cmp	r1, r3
 80036be:	d002      	beq.n	80036c6 <__swsetup_r+0x66>
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 fa61 	bl	8003b88 <_free_r>
 80036c6:	2300      	movs	r3, #0
 80036c8:	6363      	str	r3, [r4, #52]	; 0x34
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	2300      	movs	r3, #0
 80036d4:	6063      	str	r3, [r4, #4]
 80036d6:	6923      	ldr	r3, [r4, #16]
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	b94b      	cbnz	r3, 80036fa <__swsetup_r+0x9a>
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f0:	d003      	beq.n	80036fa <__swsetup_r+0x9a>
 80036f2:	4621      	mov	r1, r4
 80036f4:	4630      	mov	r0, r6
 80036f6:	f000 fa07 	bl	8003b08 <__smakebuf_r>
 80036fa:	89a0      	ldrh	r0, [r4, #12]
 80036fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003700:	f010 0301 	ands.w	r3, r0, #1
 8003704:	d00a      	beq.n	800371c <__swsetup_r+0xbc>
 8003706:	2300      	movs	r3, #0
 8003708:	60a3      	str	r3, [r4, #8]
 800370a:	6963      	ldr	r3, [r4, #20]
 800370c:	425b      	negs	r3, r3
 800370e:	61a3      	str	r3, [r4, #24]
 8003710:	6923      	ldr	r3, [r4, #16]
 8003712:	b943      	cbnz	r3, 8003726 <__swsetup_r+0xc6>
 8003714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003718:	d1ba      	bne.n	8003690 <__swsetup_r+0x30>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	0781      	lsls	r1, r0, #30
 800371e:	bf58      	it	pl
 8003720:	6963      	ldrpl	r3, [r4, #20]
 8003722:	60a3      	str	r3, [r4, #8]
 8003724:	e7f4      	b.n	8003710 <__swsetup_r+0xb0>
 8003726:	2000      	movs	r0, #0
 8003728:	e7f7      	b.n	800371a <__swsetup_r+0xba>
 800372a:	bf00      	nop
 800372c:	2000000c 	.word	0x2000000c
 8003730:	0800408c 	.word	0x0800408c
 8003734:	080040ac 	.word	0x080040ac
 8003738:	0800406c 	.word	0x0800406c

0800373c <abort>:
 800373c:	b508      	push	{r3, lr}
 800373e:	2006      	movs	r0, #6
 8003740:	f000 fb04 	bl	8003d4c <raise>
 8003744:	2001      	movs	r0, #1
 8003746:	f7fd fa69 	bl	8000c1c <_exit>
	...

0800374c <__sflush_r>:
 800374c:	898a      	ldrh	r2, [r1, #12]
 800374e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003752:	4605      	mov	r5, r0
 8003754:	0710      	lsls	r0, r2, #28
 8003756:	460c      	mov	r4, r1
 8003758:	d458      	bmi.n	800380c <__sflush_r+0xc0>
 800375a:	684b      	ldr	r3, [r1, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	dc05      	bgt.n	800376c <__sflush_r+0x20>
 8003760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	dc02      	bgt.n	800376c <__sflush_r+0x20>
 8003766:	2000      	movs	r0, #0
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800376e:	2e00      	cmp	r6, #0
 8003770:	d0f9      	beq.n	8003766 <__sflush_r+0x1a>
 8003772:	2300      	movs	r3, #0
 8003774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003778:	682f      	ldr	r7, [r5, #0]
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	d032      	beq.n	80037e4 <__sflush_r+0x98>
 800377e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	075a      	lsls	r2, r3, #29
 8003784:	d505      	bpl.n	8003792 <__sflush_r+0x46>
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	1ac0      	subs	r0, r0, r3
 800378a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800378c:	b10b      	cbz	r3, 8003792 <__sflush_r+0x46>
 800378e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	2300      	movs	r3, #0
 8003794:	4602      	mov	r2, r0
 8003796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003798:	6a21      	ldr	r1, [r4, #32]
 800379a:	4628      	mov	r0, r5
 800379c:	47b0      	blx	r6
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	d106      	bne.n	80037b2 <__sflush_r+0x66>
 80037a4:	6829      	ldr	r1, [r5, #0]
 80037a6:	291d      	cmp	r1, #29
 80037a8:	d82c      	bhi.n	8003804 <__sflush_r+0xb8>
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <__sflush_r+0x108>)
 80037ac:	40ca      	lsrs	r2, r1
 80037ae:	07d6      	lsls	r6, r2, #31
 80037b0:	d528      	bpl.n	8003804 <__sflush_r+0xb8>
 80037b2:	2200      	movs	r2, #0
 80037b4:	6062      	str	r2, [r4, #4]
 80037b6:	04d9      	lsls	r1, r3, #19
 80037b8:	6922      	ldr	r2, [r4, #16]
 80037ba:	6022      	str	r2, [r4, #0]
 80037bc:	d504      	bpl.n	80037c8 <__sflush_r+0x7c>
 80037be:	1c42      	adds	r2, r0, #1
 80037c0:	d101      	bne.n	80037c6 <__sflush_r+0x7a>
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	b903      	cbnz	r3, 80037c8 <__sflush_r+0x7c>
 80037c6:	6560      	str	r0, [r4, #84]	; 0x54
 80037c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ca:	602f      	str	r7, [r5, #0]
 80037cc:	2900      	cmp	r1, #0
 80037ce:	d0ca      	beq.n	8003766 <__sflush_r+0x1a>
 80037d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037d4:	4299      	cmp	r1, r3
 80037d6:	d002      	beq.n	80037de <__sflush_r+0x92>
 80037d8:	4628      	mov	r0, r5
 80037da:	f000 f9d5 	bl	8003b88 <_free_r>
 80037de:	2000      	movs	r0, #0
 80037e0:	6360      	str	r0, [r4, #52]	; 0x34
 80037e2:	e7c1      	b.n	8003768 <__sflush_r+0x1c>
 80037e4:	6a21      	ldr	r1, [r4, #32]
 80037e6:	2301      	movs	r3, #1
 80037e8:	4628      	mov	r0, r5
 80037ea:	47b0      	blx	r6
 80037ec:	1c41      	adds	r1, r0, #1
 80037ee:	d1c7      	bne.n	8003780 <__sflush_r+0x34>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0c4      	beq.n	8003780 <__sflush_r+0x34>
 80037f6:	2b1d      	cmp	r3, #29
 80037f8:	d001      	beq.n	80037fe <__sflush_r+0xb2>
 80037fa:	2b16      	cmp	r3, #22
 80037fc:	d101      	bne.n	8003802 <__sflush_r+0xb6>
 80037fe:	602f      	str	r7, [r5, #0]
 8003800:	e7b1      	b.n	8003766 <__sflush_r+0x1a>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	e7ad      	b.n	8003768 <__sflush_r+0x1c>
 800380c:	690f      	ldr	r7, [r1, #16]
 800380e:	2f00      	cmp	r7, #0
 8003810:	d0a9      	beq.n	8003766 <__sflush_r+0x1a>
 8003812:	0793      	lsls	r3, r2, #30
 8003814:	680e      	ldr	r6, [r1, #0]
 8003816:	bf08      	it	eq
 8003818:	694b      	ldreq	r3, [r1, #20]
 800381a:	600f      	str	r7, [r1, #0]
 800381c:	bf18      	it	ne
 800381e:	2300      	movne	r3, #0
 8003820:	eba6 0807 	sub.w	r8, r6, r7
 8003824:	608b      	str	r3, [r1, #8]
 8003826:	f1b8 0f00 	cmp.w	r8, #0
 800382a:	dd9c      	ble.n	8003766 <__sflush_r+0x1a>
 800382c:	6a21      	ldr	r1, [r4, #32]
 800382e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003830:	4643      	mov	r3, r8
 8003832:	463a      	mov	r2, r7
 8003834:	4628      	mov	r0, r5
 8003836:	47b0      	blx	r6
 8003838:	2800      	cmp	r0, #0
 800383a:	dc06      	bgt.n	800384a <__sflush_r+0xfe>
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	e78e      	b.n	8003768 <__sflush_r+0x1c>
 800384a:	4407      	add	r7, r0
 800384c:	eba8 0800 	sub.w	r8, r8, r0
 8003850:	e7e9      	b.n	8003826 <__sflush_r+0xda>
 8003852:	bf00      	nop
 8003854:	20400001 	.word	0x20400001

08003858 <_fflush_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	690b      	ldr	r3, [r1, #16]
 800385c:	4605      	mov	r5, r0
 800385e:	460c      	mov	r4, r1
 8003860:	b913      	cbnz	r3, 8003868 <_fflush_r+0x10>
 8003862:	2500      	movs	r5, #0
 8003864:	4628      	mov	r0, r5
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	b118      	cbz	r0, 8003872 <_fflush_r+0x1a>
 800386a:	6983      	ldr	r3, [r0, #24]
 800386c:	b90b      	cbnz	r3, 8003872 <_fflush_r+0x1a>
 800386e:	f000 f887 	bl	8003980 <__sinit>
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <_fflush_r+0x6c>)
 8003874:	429c      	cmp	r4, r3
 8003876:	d11b      	bne.n	80038b0 <_fflush_r+0x58>
 8003878:	686c      	ldr	r4, [r5, #4]
 800387a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ef      	beq.n	8003862 <_fflush_r+0xa>
 8003882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003884:	07d0      	lsls	r0, r2, #31
 8003886:	d404      	bmi.n	8003892 <_fflush_r+0x3a>
 8003888:	0599      	lsls	r1, r3, #22
 800388a:	d402      	bmi.n	8003892 <_fflush_r+0x3a>
 800388c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800388e:	f000 f915 	bl	8003abc <__retarget_lock_acquire_recursive>
 8003892:	4628      	mov	r0, r5
 8003894:	4621      	mov	r1, r4
 8003896:	f7ff ff59 	bl	800374c <__sflush_r>
 800389a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800389c:	07da      	lsls	r2, r3, #31
 800389e:	4605      	mov	r5, r0
 80038a0:	d4e0      	bmi.n	8003864 <_fflush_r+0xc>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	059b      	lsls	r3, r3, #22
 80038a6:	d4dd      	bmi.n	8003864 <_fflush_r+0xc>
 80038a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038aa:	f000 f908 	bl	8003abe <__retarget_lock_release_recursive>
 80038ae:	e7d9      	b.n	8003864 <_fflush_r+0xc>
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <_fflush_r+0x70>)
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d101      	bne.n	80038ba <_fflush_r+0x62>
 80038b6:	68ac      	ldr	r4, [r5, #8]
 80038b8:	e7df      	b.n	800387a <_fflush_r+0x22>
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <_fflush_r+0x74>)
 80038bc:	429c      	cmp	r4, r3
 80038be:	bf08      	it	eq
 80038c0:	68ec      	ldreq	r4, [r5, #12]
 80038c2:	e7da      	b.n	800387a <_fflush_r+0x22>
 80038c4:	0800408c 	.word	0x0800408c
 80038c8:	080040ac 	.word	0x080040ac
 80038cc:	0800406c 	.word	0x0800406c

080038d0 <std>:
 80038d0:	2300      	movs	r3, #0
 80038d2:	b510      	push	{r4, lr}
 80038d4:	4604      	mov	r4, r0
 80038d6:	e9c0 3300 	strd	r3, r3, [r0]
 80038da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038de:	6083      	str	r3, [r0, #8]
 80038e0:	8181      	strh	r1, [r0, #12]
 80038e2:	6643      	str	r3, [r0, #100]	; 0x64
 80038e4:	81c2      	strh	r2, [r0, #14]
 80038e6:	6183      	str	r3, [r0, #24]
 80038e8:	4619      	mov	r1, r3
 80038ea:	2208      	movs	r2, #8
 80038ec:	305c      	adds	r0, #92	; 0x5c
 80038ee:	f7ff fb6f 	bl	8002fd0 <memset>
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <std+0x38>)
 80038f4:	6263      	str	r3, [r4, #36]	; 0x24
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <std+0x3c>)
 80038f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <std+0x40>)
 80038fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std+0x44>)
 8003900:	6224      	str	r4, [r4, #32]
 8003902:	6323      	str	r3, [r4, #48]	; 0x30
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	08003d85 	.word	0x08003d85
 800390c:	08003da7 	.word	0x08003da7
 8003910:	08003ddf 	.word	0x08003ddf
 8003914:	08003e03 	.word	0x08003e03

08003918 <_cleanup_r>:
 8003918:	4901      	ldr	r1, [pc, #4]	; (8003920 <_cleanup_r+0x8>)
 800391a:	f000 b8af 	b.w	8003a7c <_fwalk_reent>
 800391e:	bf00      	nop
 8003920:	08003859 	.word	0x08003859

08003924 <__sfmoreglue>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	1e4a      	subs	r2, r1, #1
 8003928:	2568      	movs	r5, #104	; 0x68
 800392a:	4355      	muls	r5, r2
 800392c:	460e      	mov	r6, r1
 800392e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003932:	f000 f979 	bl	8003c28 <_malloc_r>
 8003936:	4604      	mov	r4, r0
 8003938:	b140      	cbz	r0, 800394c <__sfmoreglue+0x28>
 800393a:	2100      	movs	r1, #0
 800393c:	e9c0 1600 	strd	r1, r6, [r0]
 8003940:	300c      	adds	r0, #12
 8003942:	60a0      	str	r0, [r4, #8]
 8003944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003948:	f7ff fb42 	bl	8002fd0 <memset>
 800394c:	4620      	mov	r0, r4
 800394e:	bd70      	pop	{r4, r5, r6, pc}

08003950 <__sfp_lock_acquire>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__sfp_lock_acquire+0x8>)
 8003952:	f000 b8b3 	b.w	8003abc <__retarget_lock_acquire_recursive>
 8003956:	bf00      	nop
 8003958:	200009f0 	.word	0x200009f0

0800395c <__sfp_lock_release>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__sfp_lock_release+0x8>)
 800395e:	f000 b8ae 	b.w	8003abe <__retarget_lock_release_recursive>
 8003962:	bf00      	nop
 8003964:	200009f0 	.word	0x200009f0

08003968 <__sinit_lock_acquire>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sinit_lock_acquire+0x8>)
 800396a:	f000 b8a7 	b.w	8003abc <__retarget_lock_acquire_recursive>
 800396e:	bf00      	nop
 8003970:	200009eb 	.word	0x200009eb

08003974 <__sinit_lock_release>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__sinit_lock_release+0x8>)
 8003976:	f000 b8a2 	b.w	8003abe <__retarget_lock_release_recursive>
 800397a:	bf00      	nop
 800397c:	200009eb 	.word	0x200009eb

08003980 <__sinit>:
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	f7ff fff0 	bl	8003968 <__sinit_lock_acquire>
 8003988:	69a3      	ldr	r3, [r4, #24]
 800398a:	b11b      	cbz	r3, 8003994 <__sinit+0x14>
 800398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003990:	f7ff bff0 	b.w	8003974 <__sinit_lock_release>
 8003994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003998:	6523      	str	r3, [r4, #80]	; 0x50
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <__sinit+0x68>)
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <__sinit+0x6c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80039a2:	42a3      	cmp	r3, r4
 80039a4:	bf04      	itt	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	61a3      	streq	r3, [r4, #24]
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 f820 	bl	80039f0 <__sfp>
 80039b0:	6060      	str	r0, [r4, #4]
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 f81c 	bl	80039f0 <__sfp>
 80039b8:	60a0      	str	r0, [r4, #8]
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 f818 	bl	80039f0 <__sfp>
 80039c0:	2200      	movs	r2, #0
 80039c2:	60e0      	str	r0, [r4, #12]
 80039c4:	2104      	movs	r1, #4
 80039c6:	6860      	ldr	r0, [r4, #4]
 80039c8:	f7ff ff82 	bl	80038d0 <std>
 80039cc:	68a0      	ldr	r0, [r4, #8]
 80039ce:	2201      	movs	r2, #1
 80039d0:	2109      	movs	r1, #9
 80039d2:	f7ff ff7d 	bl	80038d0 <std>
 80039d6:	68e0      	ldr	r0, [r4, #12]
 80039d8:	2202      	movs	r2, #2
 80039da:	2112      	movs	r1, #18
 80039dc:	f7ff ff78 	bl	80038d0 <std>
 80039e0:	2301      	movs	r3, #1
 80039e2:	61a3      	str	r3, [r4, #24]
 80039e4:	e7d2      	b.n	800398c <__sinit+0xc>
 80039e6:	bf00      	nop
 80039e8:	08004034 	.word	0x08004034
 80039ec:	08003919 	.word	0x08003919

080039f0 <__sfp>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	4607      	mov	r7, r0
 80039f4:	f7ff ffac 	bl	8003950 <__sfp_lock_acquire>
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <__sfp+0x84>)
 80039fa:	681e      	ldr	r6, [r3, #0]
 80039fc:	69b3      	ldr	r3, [r6, #24]
 80039fe:	b913      	cbnz	r3, 8003a06 <__sfp+0x16>
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7ff ffbd 	bl	8003980 <__sinit>
 8003a06:	3648      	adds	r6, #72	; 0x48
 8003a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	d503      	bpl.n	8003a18 <__sfp+0x28>
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	b30b      	cbz	r3, 8003a58 <__sfp+0x68>
 8003a14:	6836      	ldr	r6, [r6, #0]
 8003a16:	e7f7      	b.n	8003a08 <__sfp+0x18>
 8003a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a1c:	b9d5      	cbnz	r5, 8003a54 <__sfp+0x64>
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <__sfp+0x88>)
 8003a20:	60e3      	str	r3, [r4, #12]
 8003a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a26:	6665      	str	r5, [r4, #100]	; 0x64
 8003a28:	f000 f847 	bl	8003aba <__retarget_lock_init_recursive>
 8003a2c:	f7ff ff96 	bl	800395c <__sfp_lock_release>
 8003a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a38:	6025      	str	r5, [r4, #0]
 8003a3a:	61a5      	str	r5, [r4, #24]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4629      	mov	r1, r5
 8003a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a44:	f7ff fac4 	bl	8002fd0 <memset>
 8003a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a50:	4620      	mov	r0, r4
 8003a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a54:	3468      	adds	r4, #104	; 0x68
 8003a56:	e7d9      	b.n	8003a0c <__sfp+0x1c>
 8003a58:	2104      	movs	r1, #4
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7ff ff62 	bl	8003924 <__sfmoreglue>
 8003a60:	4604      	mov	r4, r0
 8003a62:	6030      	str	r0, [r6, #0]
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d1d5      	bne.n	8003a14 <__sfp+0x24>
 8003a68:	f7ff ff78 	bl	800395c <__sfp_lock_release>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	e7ee      	b.n	8003a50 <__sfp+0x60>
 8003a72:	bf00      	nop
 8003a74:	08004034 	.word	0x08004034
 8003a78:	ffff0001 	.word	0xffff0001

08003a7c <_fwalk_reent>:
 8003a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a80:	4606      	mov	r6, r0
 8003a82:	4688      	mov	r8, r1
 8003a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a88:	2700      	movs	r7, #0
 8003a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8003a92:	d505      	bpl.n	8003aa0 <_fwalk_reent+0x24>
 8003a94:	6824      	ldr	r4, [r4, #0]
 8003a96:	2c00      	cmp	r4, #0
 8003a98:	d1f7      	bne.n	8003a8a <_fwalk_reent+0xe>
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa0:	89ab      	ldrh	r3, [r5, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d907      	bls.n	8003ab6 <_fwalk_reent+0x3a>
 8003aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	d003      	beq.n	8003ab6 <_fwalk_reent+0x3a>
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	47c0      	blx	r8
 8003ab4:	4307      	orrs	r7, r0
 8003ab6:	3568      	adds	r5, #104	; 0x68
 8003ab8:	e7e9      	b.n	8003a8e <_fwalk_reent+0x12>

08003aba <__retarget_lock_init_recursive>:
 8003aba:	4770      	bx	lr

08003abc <__retarget_lock_acquire_recursive>:
 8003abc:	4770      	bx	lr

08003abe <__retarget_lock_release_recursive>:
 8003abe:	4770      	bx	lr

08003ac0 <__swhatbuf_r>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	460e      	mov	r6, r1
 8003ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	b096      	sub	sp, #88	; 0x58
 8003acc:	4614      	mov	r4, r2
 8003ace:	461d      	mov	r5, r3
 8003ad0:	da07      	bge.n	8003ae2 <__swhatbuf_r+0x22>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	602b      	str	r3, [r5, #0]
 8003ad6:	89b3      	ldrh	r3, [r6, #12]
 8003ad8:	061a      	lsls	r2, r3, #24
 8003ada:	d410      	bmi.n	8003afe <__swhatbuf_r+0x3e>
 8003adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae0:	e00e      	b.n	8003b00 <__swhatbuf_r+0x40>
 8003ae2:	466a      	mov	r2, sp
 8003ae4:	f000 f9b4 	bl	8003e50 <_fstat_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	dbf2      	blt.n	8003ad2 <__swhatbuf_r+0x12>
 8003aec:	9a01      	ldr	r2, [sp, #4]
 8003aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003af2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003af6:	425a      	negs	r2, r3
 8003af8:	415a      	adcs	r2, r3
 8003afa:	602a      	str	r2, [r5, #0]
 8003afc:	e7ee      	b.n	8003adc <__swhatbuf_r+0x1c>
 8003afe:	2340      	movs	r3, #64	; 0x40
 8003b00:	2000      	movs	r0, #0
 8003b02:	6023      	str	r3, [r4, #0]
 8003b04:	b016      	add	sp, #88	; 0x58
 8003b06:	bd70      	pop	{r4, r5, r6, pc}

08003b08 <__smakebuf_r>:
 8003b08:	898b      	ldrh	r3, [r1, #12]
 8003b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b0c:	079d      	lsls	r5, r3, #30
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	d507      	bpl.n	8003b24 <__smakebuf_r+0x1c>
 8003b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	6163      	str	r3, [r4, #20]
 8003b20:	b002      	add	sp, #8
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	ab01      	add	r3, sp, #4
 8003b26:	466a      	mov	r2, sp
 8003b28:	f7ff ffca 	bl	8003ac0 <__swhatbuf_r>
 8003b2c:	9900      	ldr	r1, [sp, #0]
 8003b2e:	4605      	mov	r5, r0
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f879 	bl	8003c28 <_malloc_r>
 8003b36:	b948      	cbnz	r0, 8003b4c <__smakebuf_r+0x44>
 8003b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b3c:	059a      	lsls	r2, r3, #22
 8003b3e:	d4ef      	bmi.n	8003b20 <__smakebuf_r+0x18>
 8003b40:	f023 0303 	bic.w	r3, r3, #3
 8003b44:	f043 0302 	orr.w	r3, r3, #2
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	e7e3      	b.n	8003b14 <__smakebuf_r+0xc>
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <__smakebuf_r+0x7c>)
 8003b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	6020      	str	r0, [r4, #0]
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	9b00      	ldr	r3, [sp, #0]
 8003b5c:	6163      	str	r3, [r4, #20]
 8003b5e:	9b01      	ldr	r3, [sp, #4]
 8003b60:	6120      	str	r0, [r4, #16]
 8003b62:	b15b      	cbz	r3, 8003b7c <__smakebuf_r+0x74>
 8003b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 f983 	bl	8003e74 <_isatty_r>
 8003b6e:	b128      	cbz	r0, 8003b7c <__smakebuf_r+0x74>
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	89a0      	ldrh	r0, [r4, #12]
 8003b7e:	4305      	orrs	r5, r0
 8003b80:	81a5      	strh	r5, [r4, #12]
 8003b82:	e7cd      	b.n	8003b20 <__smakebuf_r+0x18>
 8003b84:	08003919 	.word	0x08003919

08003b88 <_free_r>:
 8003b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d048      	beq.n	8003c20 <_free_r+0x98>
 8003b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b92:	9001      	str	r0, [sp, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f1a1 0404 	sub.w	r4, r1, #4
 8003b9a:	bfb8      	it	lt
 8003b9c:	18e4      	addlt	r4, r4, r3
 8003b9e:	f000 f98b 	bl	8003eb8 <__malloc_lock>
 8003ba2:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <_free_r+0x9c>)
 8003ba4:	9801      	ldr	r0, [sp, #4]
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	4615      	mov	r5, r2
 8003baa:	b933      	cbnz	r3, 8003bba <_free_r+0x32>
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	6014      	str	r4, [r2, #0]
 8003bb0:	b003      	add	sp, #12
 8003bb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb6:	f000 b985 	b.w	8003ec4 <__malloc_unlock>
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	d90b      	bls.n	8003bd6 <_free_r+0x4e>
 8003bbe:	6821      	ldr	r1, [r4, #0]
 8003bc0:	1862      	adds	r2, r4, r1
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf04      	itt	eq
 8003bc6:	681a      	ldreq	r2, [r3, #0]
 8003bc8:	685b      	ldreq	r3, [r3, #4]
 8003bca:	6063      	str	r3, [r4, #4]
 8003bcc:	bf04      	itt	eq
 8003bce:	1852      	addeq	r2, r2, r1
 8003bd0:	6022      	streq	r2, [r4, #0]
 8003bd2:	602c      	str	r4, [r5, #0]
 8003bd4:	e7ec      	b.n	8003bb0 <_free_r+0x28>
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b10b      	cbz	r3, 8003be0 <_free_r+0x58>
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	d9fa      	bls.n	8003bd6 <_free_r+0x4e>
 8003be0:	6811      	ldr	r1, [r2, #0]
 8003be2:	1855      	adds	r5, r2, r1
 8003be4:	42a5      	cmp	r5, r4
 8003be6:	d10b      	bne.n	8003c00 <_free_r+0x78>
 8003be8:	6824      	ldr	r4, [r4, #0]
 8003bea:	4421      	add	r1, r4
 8003bec:	1854      	adds	r4, r2, r1
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	d1dd      	bne.n	8003bb0 <_free_r+0x28>
 8003bf4:	681c      	ldr	r4, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	6053      	str	r3, [r2, #4]
 8003bfa:	4421      	add	r1, r4
 8003bfc:	6011      	str	r1, [r2, #0]
 8003bfe:	e7d7      	b.n	8003bb0 <_free_r+0x28>
 8003c00:	d902      	bls.n	8003c08 <_free_r+0x80>
 8003c02:	230c      	movs	r3, #12
 8003c04:	6003      	str	r3, [r0, #0]
 8003c06:	e7d3      	b.n	8003bb0 <_free_r+0x28>
 8003c08:	6825      	ldr	r5, [r4, #0]
 8003c0a:	1961      	adds	r1, r4, r5
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	bf04      	itt	eq
 8003c10:	6819      	ldreq	r1, [r3, #0]
 8003c12:	685b      	ldreq	r3, [r3, #4]
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	bf04      	itt	eq
 8003c18:	1949      	addeq	r1, r1, r5
 8003c1a:	6021      	streq	r1, [r4, #0]
 8003c1c:	6054      	str	r4, [r2, #4]
 8003c1e:	e7c7      	b.n	8003bb0 <_free_r+0x28>
 8003c20:	b003      	add	sp, #12
 8003c22:	bd30      	pop	{r4, r5, pc}
 8003c24:	200008cc 	.word	0x200008cc

08003c28 <_malloc_r>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	1ccd      	adds	r5, r1, #3
 8003c2c:	f025 0503 	bic.w	r5, r5, #3
 8003c30:	3508      	adds	r5, #8
 8003c32:	2d0c      	cmp	r5, #12
 8003c34:	bf38      	it	cc
 8003c36:	250c      	movcc	r5, #12
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	db01      	blt.n	8003c42 <_malloc_r+0x1a>
 8003c3e:	42a9      	cmp	r1, r5
 8003c40:	d903      	bls.n	8003c4a <_malloc_r+0x22>
 8003c42:	230c      	movs	r3, #12
 8003c44:	6033      	str	r3, [r6, #0]
 8003c46:	2000      	movs	r0, #0
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c4a:	f000 f935 	bl	8003eb8 <__malloc_lock>
 8003c4e:	4921      	ldr	r1, [pc, #132]	; (8003cd4 <_malloc_r+0xac>)
 8003c50:	680a      	ldr	r2, [r1, #0]
 8003c52:	4614      	mov	r4, r2
 8003c54:	b99c      	cbnz	r4, 8003c7e <_malloc_r+0x56>
 8003c56:	4f20      	ldr	r7, [pc, #128]	; (8003cd8 <_malloc_r+0xb0>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b923      	cbnz	r3, 8003c66 <_malloc_r+0x3e>
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f000 f83c 	bl	8003cdc <_sbrk_r>
 8003c64:	6038      	str	r0, [r7, #0]
 8003c66:	4629      	mov	r1, r5
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f000 f837 	bl	8003cdc <_sbrk_r>
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	d123      	bne.n	8003cba <_malloc_r+0x92>
 8003c72:	230c      	movs	r3, #12
 8003c74:	6033      	str	r3, [r6, #0]
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f924 	bl	8003ec4 <__malloc_unlock>
 8003c7c:	e7e3      	b.n	8003c46 <_malloc_r+0x1e>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	1b5b      	subs	r3, r3, r5
 8003c82:	d417      	bmi.n	8003cb4 <_malloc_r+0x8c>
 8003c84:	2b0b      	cmp	r3, #11
 8003c86:	d903      	bls.n	8003c90 <_malloc_r+0x68>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	441c      	add	r4, r3
 8003c8c:	6025      	str	r5, [r4, #0]
 8003c8e:	e004      	b.n	8003c9a <_malloc_r+0x72>
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	42a2      	cmp	r2, r4
 8003c94:	bf0c      	ite	eq
 8003c96:	600b      	streq	r3, [r1, #0]
 8003c98:	6053      	strne	r3, [r2, #4]
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f912 	bl	8003ec4 <__malloc_unlock>
 8003ca0:	f104 000b 	add.w	r0, r4, #11
 8003ca4:	1d23      	adds	r3, r4, #4
 8003ca6:	f020 0007 	bic.w	r0, r0, #7
 8003caa:	1ac2      	subs	r2, r0, r3
 8003cac:	d0cc      	beq.n	8003c48 <_malloc_r+0x20>
 8003cae:	1a1b      	subs	r3, r3, r0
 8003cb0:	50a3      	str	r3, [r4, r2]
 8003cb2:	e7c9      	b.n	8003c48 <_malloc_r+0x20>
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	6864      	ldr	r4, [r4, #4]
 8003cb8:	e7cc      	b.n	8003c54 <_malloc_r+0x2c>
 8003cba:	1cc4      	adds	r4, r0, #3
 8003cbc:	f024 0403 	bic.w	r4, r4, #3
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d0e3      	beq.n	8003c8c <_malloc_r+0x64>
 8003cc4:	1a21      	subs	r1, r4, r0
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 f808 	bl	8003cdc <_sbrk_r>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d1dd      	bne.n	8003c8c <_malloc_r+0x64>
 8003cd0:	e7cf      	b.n	8003c72 <_malloc_r+0x4a>
 8003cd2:	bf00      	nop
 8003cd4:	200008cc 	.word	0x200008cc
 8003cd8:	200008d0 	.word	0x200008d0

08003cdc <_sbrk_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	; (8003cf8 <_sbrk_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fc fff4 	bl	8000cd4 <_sbrk>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_sbrk_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_sbrk_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	200009f4 	.word	0x200009f4

08003cfc <_raise_r>:
 8003cfc:	291f      	cmp	r1, #31
 8003cfe:	b538      	push	{r3, r4, r5, lr}
 8003d00:	4604      	mov	r4, r0
 8003d02:	460d      	mov	r5, r1
 8003d04:	d904      	bls.n	8003d10 <_raise_r+0x14>
 8003d06:	2316      	movs	r3, #22
 8003d08:	6003      	str	r3, [r0, #0]
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d12:	b112      	cbz	r2, 8003d1a <_raise_r+0x1e>
 8003d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d18:	b94b      	cbnz	r3, 8003d2e <_raise_r+0x32>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f000 f830 	bl	8003d80 <_getpid_r>
 8003d20:	462a      	mov	r2, r5
 8003d22:	4601      	mov	r1, r0
 8003d24:	4620      	mov	r0, r4
 8003d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2a:	f000 b817 	b.w	8003d5c <_kill_r>
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d00a      	beq.n	8003d48 <_raise_r+0x4c>
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	d103      	bne.n	8003d3e <_raise_r+0x42>
 8003d36:	2316      	movs	r3, #22
 8003d38:	6003      	str	r3, [r0, #0]
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	e7e7      	b.n	8003d0e <_raise_r+0x12>
 8003d3e:	2400      	movs	r4, #0
 8003d40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d44:	4628      	mov	r0, r5
 8003d46:	4798      	blx	r3
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e7e0      	b.n	8003d0e <_raise_r+0x12>

08003d4c <raise>:
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <raise+0xc>)
 8003d4e:	4601      	mov	r1, r0
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f7ff bfd3 	b.w	8003cfc <_raise_r>
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <_kill_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d07      	ldr	r5, [pc, #28]	; (8003d7c <_kill_r+0x20>)
 8003d60:	2300      	movs	r3, #0
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	f7fc ff47 	bl	8000bfc <_kill>
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	d102      	bne.n	8003d78 <_kill_r+0x1c>
 8003d72:	682b      	ldr	r3, [r5, #0]
 8003d74:	b103      	cbz	r3, 8003d78 <_kill_r+0x1c>
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	bd38      	pop	{r3, r4, r5, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200009f4 	.word	0x200009f4

08003d80 <_getpid_r>:
 8003d80:	f7fc bf34 	b.w	8000bec <_getpid>

08003d84 <__sread>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	460c      	mov	r4, r1
 8003d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8c:	f000 f8a0 	bl	8003ed0 <_read_r>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	bfab      	itete	ge
 8003d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d96:	89a3      	ldrhlt	r3, [r4, #12]
 8003d98:	181b      	addge	r3, r3, r0
 8003d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d9e:	bfac      	ite	ge
 8003da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003da2:	81a3      	strhlt	r3, [r4, #12]
 8003da4:	bd10      	pop	{r4, pc}

08003da6 <__swrite>:
 8003da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003daa:	461f      	mov	r7, r3
 8003dac:	898b      	ldrh	r3, [r1, #12]
 8003dae:	05db      	lsls	r3, r3, #23
 8003db0:	4605      	mov	r5, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	4616      	mov	r6, r2
 8003db6:	d505      	bpl.n	8003dc4 <__swrite+0x1e>
 8003db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f000 f868 	bl	8003e94 <_lseek_r>
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dce:	81a3      	strh	r3, [r4, #12]
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	f000 b817 	b.w	8003e0c <_write_r>

08003dde <__sseek>:
 8003dde:	b510      	push	{r4, lr}
 8003de0:	460c      	mov	r4, r1
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 f855 	bl	8003e94 <_lseek_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	bf15      	itete	ne
 8003df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dfa:	81a3      	strheq	r3, [r4, #12]
 8003dfc:	bf18      	it	ne
 8003dfe:	81a3      	strhne	r3, [r4, #12]
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <__sclose>:
 8003e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e06:	f000 b813 	b.w	8003e30 <_close_r>
	...

08003e0c <_write_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4d07      	ldr	r5, [pc, #28]	; (8003e2c <_write_r+0x20>)
 8003e10:	4604      	mov	r4, r0
 8003e12:	4608      	mov	r0, r1
 8003e14:	4611      	mov	r1, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	602a      	str	r2, [r5, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f7fc ffa2 	bl	8000d64 <_write>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_write_r+0x1e>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_write_r+0x1e>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	200009f4 	.word	0x200009f4

08003e30 <_close_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4d06      	ldr	r5, [pc, #24]	; (8003e4c <_close_r+0x1c>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	f7fc ff15 	bl	8000c6a <_close>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d102      	bne.n	8003e4a <_close_r+0x1a>
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	b103      	cbz	r3, 8003e4a <_close_r+0x1a>
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	200009f4 	.word	0x200009f4

08003e50 <_fstat_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4d07      	ldr	r5, [pc, #28]	; (8003e70 <_fstat_r+0x20>)
 8003e54:	2300      	movs	r3, #0
 8003e56:	4604      	mov	r4, r0
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	f7fc ff10 	bl	8000c82 <_fstat>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	d102      	bne.n	8003e6c <_fstat_r+0x1c>
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	b103      	cbz	r3, 8003e6c <_fstat_r+0x1c>
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	bd38      	pop	{r3, r4, r5, pc}
 8003e6e:	bf00      	nop
 8003e70:	200009f4 	.word	0x200009f4

08003e74 <_isatty_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_isatty_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc ff0f 	bl	8000ca2 <_isatty>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_isatty_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_isatty_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	200009f4 	.word	0x200009f4

08003e94 <_lseek_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d07      	ldr	r5, [pc, #28]	; (8003eb4 <_lseek_r+0x20>)
 8003e98:	4604      	mov	r4, r0
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	602a      	str	r2, [r5, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f7fc ff08 	bl	8000cb8 <_lseek>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_lseek_r+0x1e>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_lseek_r+0x1e>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	200009f4 	.word	0x200009f4

08003eb8 <__malloc_lock>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	; (8003ec0 <__malloc_lock+0x8>)
 8003eba:	f7ff bdff 	b.w	8003abc <__retarget_lock_acquire_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	200009ec 	.word	0x200009ec

08003ec4 <__malloc_unlock>:
 8003ec4:	4801      	ldr	r0, [pc, #4]	; (8003ecc <__malloc_unlock+0x8>)
 8003ec6:	f7ff bdfa 	b.w	8003abe <__retarget_lock_release_recursive>
 8003eca:	bf00      	nop
 8003ecc:	200009ec 	.word	0x200009ec

08003ed0 <_read_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4d07      	ldr	r5, [pc, #28]	; (8003ef0 <_read_r+0x20>)
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	4611      	mov	r1, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	602a      	str	r2, [r5, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7fc fea6 	bl	8000c30 <_read>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_read_r+0x1e>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_read_r+0x1e>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	200009f4 	.word	0x200009f4

08003ef4 <_init>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr

08003f00 <_fini>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	bf00      	nop
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr
